package go_drift

import (
	"driftgo/lib/drift"
	"github.com/gagliardetto/solana-go"
	"github.com/gagliardetto/solana-go/rpc"
	"math/big"
)

type MakerInfo struct {
	Maker            solana.PublicKey
	MakerStats       solana.PublicKey
	MakerUserAccount *drift.User
	Order            *drift.Order
}

type TakerInfo struct {
	Taker            solana.PublicKey
	TakerStats       solana.PublicKey
	TakerUserAccount *drift.User
	Order            *drift.Order
}

type ReferrerInfo struct {
	Referrer      solana.PublicKey
	ReferrerStats solana.PublicKey
}

type BaseTxParams struct {
	ComputeUnits      uint64
	ComputeUnitsPrice uint64
}

type ProcessingTxParams struct {
	UseSimulatedComputeUnits                     *bool
	ComputeUnitsBufferMultiplier                 *float64
	UseSimulateComputeUnitsForCUPriceCalculation *bool
	GetCUPriceFromComputeUnits                   func(computeUnits uint64) uint64
}
type TxParams struct {
	BaseTxParams
	ProcessingTxParams
}

type IWallet interface {
	SignTransaction(tx *solana.Transaction) *solana.Transaction
	SignAllTransactions(txs []*solana.Transaction) []*solana.Transaction
	GetPublicKey() solana.PublicKey
	GetPrivateKey() solana.PrivateKey
	GetWallet() solana.Wallet
}

type PerpMarketExtendedInfo struct {
	MarketIndex uint16
	/**
	 * Min order size measured in base asset, using base precision
	 */
	MinOrderSize *big.Int
	/**
	 * Margin maintenance percentage, using margin precision (1e4)
	 */
	MarginMaintenance uint32
	/**
	 * Max insurance available, measured in quote asset, using quote preicision
	 */
	AvailableInsurance *big.Int
	/**
	 * Pnl pool available, this is measured in quote asset, using quote precision.
	 * Should be generated by using getTokenAmount and passing in the scaled balance of the base asset + quote spot account
	 */
	PnlPoolValue *big.Int
	ContractTier drift.ContractTier
}

type HealthComponent struct {
	MarketIndex   uint16
	Size          *big.Int
	Value         *big.Int
	Weight        *big.Int
	WeightedValue *big.Int
}

type HeathComponents struct {
	Deposits      []HealthComponent
	Borrows       []HealthComponent
	PerpPositions []HealthComponent
	PerpPnl       []HealthComponent
}

type ProgramAccount[T any] struct {
	PublicKey solana.PublicKey
	Account   *T
}

type ReferrerNameAccount struct {
	Name      []uint8
	User      solana.PublicKey
	Authority solana.PublicKey
	UserStats solana.PublicKey
}

type NecessaryOrderParams struct {
	OrderType       drift.OrderType
	MarketIndex     uint16
	BaseAssetAmount uint64
	Direction       drift.PositionDirection

	UserOrderId       *uint8
	Price             *uint64
	ReduceOnly        *bool
	PostOnly          *drift.PostOnlyParam
	ImmediateOrCancel *bool
	MaxTs             *int64
	TriggerPrice      *uint64
	TriggerCondition  *drift.OrderTriggerCondition
	OraclePriceOffset *int32
	AuctionDuration   *uint8
	AuctionStartPrice *int64
	AuctionEndPrice   *int64
}

type OptionalOrderParams struct {
	OrderType         *drift.OrderType
	MarketType        *drift.MarketType
	Direction         *drift.PositionDirection
	UserOrderId       *uint8
	BaseAssetAmount   *uint64
	Price             *uint64
	MarketIndex       *uint16
	ReduceOnly        *bool
	PostOnly          *drift.PostOnlyParam
	ImmediateOrCancel *bool
	MaxTs             *int64
	TriggerPrice      *uint64
	TriggerCondition  *drift.OrderTriggerCondition
	OraclePriceOffset *int32
	AuctionDuration   *uint8
	AuctionStartPrice *int64
	AuctionEndPrice   *int64
}

type ModifyOrderParams struct {
	OptionalOrderParams
	Policy *drift.ModifyOrderPolicy
}

var DefaultOrderParams = drift.OrderParams{
	OrderType:         drift.OrderType_Market,
	MarketType:        drift.MarketType_Perp,
	Direction:         drift.PositionDirection_Long,
	UserOrderId:       0,
	BaseAssetAmount:   0,
	Price:             0,
	MarketIndex:       0,
	ReduceOnly:        false,
	PostOnly:          drift.PostOnlyParam_None,
	BitFlags:          0,
	MaxTs:             nil,
	TriggerPrice:      nil,
	TriggerCondition:  drift.OrderTriggerCondition_Above,
	OraclePriceOffset: nil,
	AuctionDuration:   nil,
	AuctionStartPrice: nil,
	AuctionEndPrice:   nil,
}

type CancelOrderParams struct {
	MarketType  drift.MarketType
	MarketIndex uint16
	Direction   drift.PositionDirection
}
type FulfillmentType int

const (
	FulfillmentTypeSerumV3 FulfillmentType = iota
	FulfillmentTypePhoenixV1
)

type FulfillmentConfig struct {
	Type                       FulfillmentType
	SerumV3FulfillmentConfig   *drift.SerumV3FulfillmentConfig
	PhoenixV1FulfillmentConfig *drift.PhoenixV1FulfillmentConfig
}

type ConfirmOptions struct {
	rpc.TransactionOpts
	Commitment rpc.CommitmentType
}

type MarketAccount struct {
	PerpMarketAccount *drift.PerpMarket
	SpotMarketAccount *drift.SpotMarket
}

func IsOneOfVariant[T string | int | uint8](object T, types []T) bool {
	for _, v := range types {
		if object == v {
			return true
		}
	}
	return false
}
