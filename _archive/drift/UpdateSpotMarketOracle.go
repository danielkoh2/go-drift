// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSpotMarketOracle is the `updateSpotMarketOracle` instruction.
type UpdateSpotMarketOracle struct {
	Oracle       *ag_solanago.PublicKey
	OracleSource *OracleSource

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] spotMarket
	//
	// [3] = [] oracle
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSpotMarketOracleInstructionBuilder creates a new `UpdateSpotMarketOracle` instruction builder.
func NewUpdateSpotMarketOracleInstructionBuilder() *UpdateSpotMarketOracle {
	nd := &UpdateSpotMarketOracle{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetOracle sets the "oracle" parameter.
func (inst *UpdateSpotMarketOracle) SetOracle(oracle ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	inst.Oracle = &oracle
	return inst
}

// SetOracleSource sets the "oracleSource" parameter.
func (inst *UpdateSpotMarketOracle) SetOracleSource(oracleSource OracleSource) *UpdateSpotMarketOracle {
	inst.OracleSource = &oracleSource
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSpotMarketOracle) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSpotMarketOracle) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSpotMarketOracle) SetStateAccount(state ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSpotMarketOracle) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateSpotMarketOracle) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateSpotMarketOracle) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleAccount sets the "oracle" account.
func (inst *UpdateSpotMarketOracle) SetOracleAccount(oracle ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *UpdateSpotMarketOracle) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateSpotMarketOracle) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSpotMarketOracle,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSpotMarketOracle) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSpotMarketOracle) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Oracle == nil {
			return errors.New("Oracle parameter is not set")
		}
		if inst.OracleSource == nil {
			return errors.New("OracleSource parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Oracle is not set")
		}
	}
	return nil
}

func (inst *UpdateSpotMarketOracle) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSpotMarketOracle")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Oracle", *inst.Oracle))
						paramsBranch.Child(ag_format.Param("OracleSource", *inst.OracleSource))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("spotMarket", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    oracle", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateSpotMarketOracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `OracleSource` param:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSpotMarketOracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSpotMarketOracleInstruction declares a new UpdateSpotMarketOracle instruction with the provided parameters and accounts.
func NewUpdateSpotMarketOracleInstruction(
	// Parameters:
	oracle ag_solanago.PublicKey,
	oracleSource OracleSource,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey,
	oracleAccount ag_solanago.PublicKey) *UpdateSpotMarketOracle {
	return NewUpdateSpotMarketOracleInstructionBuilder().
		SetOracle(oracle).
		SetOracleSource(oracleSource).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket).
		SetOracleAccount(oracleAccount)
}
