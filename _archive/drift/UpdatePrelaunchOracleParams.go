// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdatePrelaunchOracleParams is the `updatePrelaunchOracleParams` instruction.
type UpdatePrelaunchOracleParams struct {
	Params *PrelaunchOracleParams

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] prelaunchOracle
	//
	// [2] = [WRITE] perpMarket
	//
	// [3] = [] state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePrelaunchOracleParamsInstructionBuilder creates a new `UpdatePrelaunchOracleParams` instruction builder.
func NewUpdatePrelaunchOracleParamsInstructionBuilder() *UpdatePrelaunchOracleParams {
	nd := &UpdatePrelaunchOracleParams{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *UpdatePrelaunchOracleParams) SetParams(params PrelaunchOracleParams) *UpdatePrelaunchOracleParams {
	inst.Params = &params
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdatePrelaunchOracleParams) SetAdminAccount(admin ag_solanago.PublicKey) *UpdatePrelaunchOracleParams {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdatePrelaunchOracleParams) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPrelaunchOracleAccount sets the "prelaunchOracle" account.
func (inst *UpdatePrelaunchOracleParams) SetPrelaunchOracleAccount(prelaunchOracle ag_solanago.PublicKey) *UpdatePrelaunchOracleParams {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(prelaunchOracle).WRITE()
	return inst
}

// GetPrelaunchOracleAccount gets the "prelaunchOracle" account.
func (inst *UpdatePrelaunchOracleParams) GetPrelaunchOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPerpMarketAccount sets the "perpMarket" account.
func (inst *UpdatePrelaunchOracleParams) SetPerpMarketAccount(perpMarket ag_solanago.PublicKey) *UpdatePrelaunchOracleParams {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(perpMarket).WRITE()
	return inst
}

// GetPerpMarketAccount gets the "perpMarket" account.
func (inst *UpdatePrelaunchOracleParams) GetPerpMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStateAccount sets the "state" account.
func (inst *UpdatePrelaunchOracleParams) SetStateAccount(state ag_solanago.PublicKey) *UpdatePrelaunchOracleParams {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdatePrelaunchOracleParams) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdatePrelaunchOracleParams) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePrelaunchOracleParams,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePrelaunchOracleParams) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePrelaunchOracleParams) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PrelaunchOracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PerpMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.State is not set")
		}
	}
	return nil
}

func (inst *UpdatePrelaunchOracleParams) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePrelaunchOracleParams")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("prelaunchOracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     perpMarket", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          state", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdatePrelaunchOracleParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdatePrelaunchOracleParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdatePrelaunchOracleParamsInstruction declares a new UpdatePrelaunchOracleParams instruction with the provided parameters and accounts.
func NewUpdatePrelaunchOracleParamsInstruction(
	// Parameters:
	params PrelaunchOracleParams,
	// Accounts:
	admin ag_solanago.PublicKey,
	prelaunchOracle ag_solanago.PublicKey,
	perpMarket ag_solanago.PublicKey,
	state ag_solanago.PublicKey) *UpdatePrelaunchOracleParams {
	return NewUpdatePrelaunchOracleParamsInstructionBuilder().
		SetParams(params).
		SetAdminAccount(admin).
		SetPrelaunchOracleAccount(prelaunchOracle).
		SetPerpMarketAccount(perpMarket).
		SetStateAccount(state)
}
