// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSerumFulfillmentConfigStatus is the `updateSerumFulfillmentConfigStatus` instruction.
type UpdateSerumFulfillmentConfigStatus struct {
	Status *SpotFulfillmentConfigStatus

	// [0] = [] state
	//
	// [1] = [WRITE] serumFulfillmentConfig
	//
	// [2] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSerumFulfillmentConfigStatusInstructionBuilder creates a new `UpdateSerumFulfillmentConfigStatus` instruction builder.
func NewUpdateSerumFulfillmentConfigStatusInstructionBuilder() *UpdateSerumFulfillmentConfigStatus {
	nd := &UpdateSerumFulfillmentConfigStatus{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetStatus sets the "status" parameter.
func (inst *UpdateSerumFulfillmentConfigStatus) SetStatus(status SpotFulfillmentConfigStatus) *UpdateSerumFulfillmentConfigStatus {
	inst.Status = &status
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSerumFulfillmentConfigStatus) SetStateAccount(state ag_solanago.PublicKey) *UpdateSerumFulfillmentConfigStatus {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSerumFulfillmentConfigStatus) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSerumFulfillmentConfigAccount sets the "serumFulfillmentConfig" account.
func (inst *UpdateSerumFulfillmentConfigStatus) SetSerumFulfillmentConfigAccount(serumFulfillmentConfig ag_solanago.PublicKey) *UpdateSerumFulfillmentConfigStatus {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(serumFulfillmentConfig).WRITE()
	return inst
}

// GetSerumFulfillmentConfigAccount gets the "serumFulfillmentConfig" account.
func (inst *UpdateSerumFulfillmentConfigStatus) GetSerumFulfillmentConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSerumFulfillmentConfigStatus) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSerumFulfillmentConfigStatus {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSerumFulfillmentConfigStatus) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateSerumFulfillmentConfigStatus) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSerumFulfillmentConfigStatus,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSerumFulfillmentConfigStatus) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSerumFulfillmentConfigStatus) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Status == nil {
			return errors.New("Status parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SerumFulfillmentConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *UpdateSerumFulfillmentConfigStatus) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSerumFulfillmentConfigStatus")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Status", *inst.Status))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("serumFulfillmentConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 admin", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateSerumFulfillmentConfigStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSerumFulfillmentConfigStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSerumFulfillmentConfigStatusInstruction declares a new UpdateSerumFulfillmentConfigStatus instruction with the provided parameters and accounts.
func NewUpdateSerumFulfillmentConfigStatusInstruction(
	// Parameters:
	status SpotFulfillmentConfigStatus,
	// Accounts:
	state ag_solanago.PublicKey,
	serumFulfillmentConfig ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *UpdateSerumFulfillmentConfigStatus {
	return NewUpdateSerumFulfillmentConfigStatusInstructionBuilder().
		SetStatus(status).
		SetStateAccount(state).
		SetSerumFulfillmentConfigAccount(serumFulfillmentConfig).
		SetAdminAccount(admin)
}
