// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeInsuranceFundStake is the `initializeInsuranceFundStake` instruction.
type InitializeInsuranceFundStake struct {
	MarketIndex *uint16

	// [0] = [] spotMarket
	//
	// [1] = [WRITE] insuranceFundStake
	//
	// [2] = [WRITE] userStats
	//
	// [3] = [] state
	//
	// [4] = [SIGNER] authority
	//
	// [5] = [WRITE, SIGNER] payer
	//
	// [6] = [] rent
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInsuranceFundStakeInstructionBuilder creates a new `InitializeInsuranceFundStake` instruction builder.
func NewInitializeInsuranceFundStakeInstructionBuilder() *InitializeInsuranceFundStake {
	nd := &InitializeInsuranceFundStake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetMarketIndex sets the "marketIndex" parameter.
func (inst *InitializeInsuranceFundStake) SetMarketIndex(marketIndex uint16) *InitializeInsuranceFundStake {
	inst.MarketIndex = &marketIndex
	return inst
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *InitializeInsuranceFundStake) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(spotMarket)
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *InitializeInsuranceFundStake) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInsuranceFundStakeAccount sets the "insuranceFundStake" account.
func (inst *InitializeInsuranceFundStake) SetInsuranceFundStakeAccount(insuranceFundStake ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(insuranceFundStake).WRITE()
	return inst
}

// GetInsuranceFundStakeAccount gets the "insuranceFundStake" account.
func (inst *InitializeInsuranceFundStake) GetInsuranceFundStakeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *InitializeInsuranceFundStake) SetUserStatsAccount(userStats ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *InitializeInsuranceFundStake) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStateAccount sets the "state" account.
func (inst *InitializeInsuranceFundStake) SetStateAccount(state ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializeInsuranceFundStake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeInsuranceFundStake) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeInsuranceFundStake) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializeInsuranceFundStake) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializeInsuranceFundStake) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeInsuranceFundStake) SetRentAccount(rent ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeInsuranceFundStake) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeInsuranceFundStake) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeInsuranceFundStake) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst InitializeInsuranceFundStake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeInsuranceFundStake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInsuranceFundStake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInsuranceFundStake) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketIndex == nil {
			return errors.New("MarketIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InsuranceFundStake is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeInsuranceFundStake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeInsuranceFundStake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MarketIndex", *inst.MarketIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        spotMarket", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("insuranceFundStake", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         userStats", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj InitializeInsuranceFundStake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeInsuranceFundStake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInsuranceFundStakeInstruction declares a new InitializeInsuranceFundStake instruction with the provided parameters and accounts.
func NewInitializeInsuranceFundStakeInstruction(
	// Parameters:
	marketIndex uint16,
	// Accounts:
	spotMarket ag_solanago.PublicKey,
	insuranceFundStake ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeInsuranceFundStake {
	return NewInitializeInsuranceFundStakeInstructionBuilder().
		SetMarketIndex(marketIndex).
		SetSpotMarketAccount(spotMarket).
		SetInsuranceFundStakeAccount(insuranceFundStake).
		SetUserStatsAccount(userStats).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetPayerAccount(payer).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
