// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Drift"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeUser = ag_binary.TypeID([8]byte{111, 17, 185, 250, 60, 122, 38, 254})

	Instruction_InitializeUserStats = ag_binary.TypeID([8]byte{254, 243, 72, 98, 251, 130, 168, 213})

	Instruction_InitializeReferrerName = ag_binary.TypeID([8]byte{235, 126, 231, 10, 42, 164, 26, 61})

	Instruction_Deposit = ag_binary.TypeID([8]byte{242, 35, 198, 137, 82, 225, 242, 182})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_TransferDeposit = ag_binary.TypeID([8]byte{20, 20, 147, 223, 41, 63, 204, 111})

	Instruction_PlacePerpOrder = ag_binary.TypeID([8]byte{69, 161, 93, 202, 120, 126, 76, 185})

	Instruction_CancelOrder = ag_binary.TypeID([8]byte{95, 129, 237, 240, 8, 49, 223, 132})

	Instruction_CancelOrderByUserId = ag_binary.TypeID([8]byte{107, 211, 250, 133, 18, 37, 57, 100})

	Instruction_CancelOrders = ag_binary.TypeID([8]byte{238, 225, 95, 158, 227, 103, 8, 194})

	Instruction_CancelOrdersByIds = ag_binary.TypeID([8]byte{134, 19, 144, 165, 94, 240, 210, 94})

	Instruction_ModifyOrder = ag_binary.TypeID([8]byte{47, 124, 117, 255, 201, 197, 130, 94})

	Instruction_ModifyOrderByUserId = ag_binary.TypeID([8]byte{158, 77, 4, 253, 252, 194, 161, 179})

	Instruction_PlaceAndTakePerpOrder = ag_binary.TypeID([8]byte{213, 51, 1, 187, 108, 220, 230, 224})

	Instruction_PlaceAndMakePerpOrder = ag_binary.TypeID([8]byte{149, 117, 11, 237, 47, 95, 89, 237})

	Instruction_PlaceSpotOrder = ag_binary.TypeID([8]byte{45, 79, 81, 160, 248, 90, 91, 220})

	Instruction_PlaceAndTakeSpotOrder = ag_binary.TypeID([8]byte{191, 3, 138, 71, 114, 198, 202, 100})

	Instruction_PlaceAndMakeSpotOrder = ag_binary.TypeID([8]byte{149, 158, 85, 66, 239, 9, 243, 98})

	Instruction_PlaceOrders = ag_binary.TypeID([8]byte{60, 63, 50, 123, 12, 197, 60, 190})

	Instruction_BeginSwap = ag_binary.TypeID([8]byte{174, 109, 228, 1, 242, 105, 232, 105})

	Instruction_EndSwap = ag_binary.TypeID([8]byte{177, 184, 27, 193, 34, 13, 210, 145})

	Instruction_AddPerpLpShares = ag_binary.TypeID([8]byte{56, 209, 56, 197, 119, 254, 188, 117})

	Instruction_RemovePerpLpShares = ag_binary.TypeID([8]byte{213, 89, 217, 18, 160, 55, 53, 141})

	Instruction_RemovePerpLpSharesInExpiringMarket = ag_binary.TypeID([8]byte{83, 254, 253, 137, 59, 122, 68, 156})

	Instruction_UpdateUserName = ag_binary.TypeID([8]byte{135, 25, 185, 56, 165, 53, 34, 136})

	Instruction_UpdateUserCustomMarginRatio = ag_binary.TypeID([8]byte{21, 221, 140, 187, 32, 129, 11, 123})

	Instruction_UpdateUserMarginTradingEnabled = ag_binary.TypeID([8]byte{194, 92, 204, 223, 246, 188, 31, 203})

	Instruction_UpdateUserDelegate = ag_binary.TypeID([8]byte{139, 205, 141, 141, 113, 36, 94, 187})

	Instruction_UpdateUserReduceOnly = ag_binary.TypeID([8]byte{199, 71, 42, 67, 144, 19, 86, 109})

	Instruction_UpdateUserAdvancedLp = ag_binary.TypeID([8]byte{66, 80, 107, 186, 27, 242, 66, 95})

	Instruction_DeleteUser = ag_binary.TypeID([8]byte{186, 85, 17, 249, 219, 231, 98, 251})

	Instruction_ReclaimRent = ag_binary.TypeID([8]byte{218, 200, 19, 197, 227, 89, 192, 22})

	Instruction_FillPerpOrder = ag_binary.TypeID([8]byte{13, 188, 248, 103, 134, 217, 106, 240})

	Instruction_RevertFill = ag_binary.TypeID([8]byte{236, 238, 176, 69, 239, 10, 181, 193})

	Instruction_FillSpotOrder = ag_binary.TypeID([8]byte{212, 206, 130, 173, 21, 34, 199, 40})

	Instruction_TriggerOrder = ag_binary.TypeID([8]byte{63, 112, 51, 233, 232, 47, 240, 199})

	Instruction_ForceCancelOrders = ag_binary.TypeID([8]byte{64, 181, 196, 63, 222, 72, 64, 232})

	Instruction_UpdateUserIdle = ag_binary.TypeID([8]byte{253, 133, 67, 22, 103, 161, 20, 100})

	Instruction_UpdateUserOpenOrdersCount = ag_binary.TypeID([8]byte{104, 39, 65, 210, 250, 163, 100, 134})

	Instruction_AdminDisableUpdatePerpBidAskTwap = ag_binary.TypeID([8]byte{17, 164, 82, 45, 183, 86, 191, 199})

	Instruction_SettlePnl = ag_binary.TypeID([8]byte{43, 61, 234, 45, 15, 95, 152, 153})

	Instruction_SettleFundingPayment = ag_binary.TypeID([8]byte{222, 90, 202, 94, 28, 45, 115, 183})

	Instruction_SettleLp = ag_binary.TypeID([8]byte{155, 231, 116, 113, 97, 229, 139, 141})

	Instruction_SettleExpiredMarket = ag_binary.TypeID([8]byte{120, 89, 11, 25, 122, 77, 72, 193})

	Instruction_LiquidatePerp = ag_binary.TypeID([8]byte{75, 35, 119, 247, 191, 18, 139, 2})

	Instruction_LiquidateSpot = ag_binary.TypeID([8]byte{107, 0, 128, 41, 35, 229, 251, 18})

	Instruction_LiquidateBorrowForPerpPnl = ag_binary.TypeID([8]byte{169, 17, 32, 90, 207, 148, 209, 27})

	Instruction_LiquidatePerpPnlForDeposit = ag_binary.TypeID([8]byte{237, 75, 198, 235, 233, 186, 75, 35})

	Instruction_ResolvePerpPnlDeficit = ag_binary.TypeID([8]byte{168, 204, 68, 150, 159, 126, 95, 148})

	Instruction_ResolvePerpBankruptcy = ag_binary.TypeID([8]byte{224, 16, 176, 214, 162, 213, 183, 222})

	Instruction_ResolveSpotBankruptcy = ag_binary.TypeID([8]byte{124, 194, 240, 254, 198, 213, 52, 122})

	Instruction_SettleRevenueToInsuranceFund = ag_binary.TypeID([8]byte{200, 120, 93, 136, 69, 38, 199, 159})

	Instruction_UpdateFundingRate = ag_binary.TypeID([8]byte{201, 178, 116, 212, 166, 144, 72, 238})

	Instruction_UpdatePrelaunchOracle = ag_binary.TypeID([8]byte{220, 132, 27, 27, 233, 220, 61, 219})

	Instruction_UpdatePerpBidAskTwap = ag_binary.TypeID([8]byte{247, 23, 255, 65, 212, 90, 221, 194})

	Instruction_UpdateSpotMarketCumulativeInterest = ag_binary.TypeID([8]byte{39, 166, 139, 243, 158, 165, 155, 225})

	Instruction_UpdateAmms = ag_binary.TypeID([8]byte{201, 106, 217, 253, 4, 175, 228, 97})

	Instruction_UpdateSpotMarketExpiry = ag_binary.TypeID([8]byte{208, 11, 211, 159, 226, 24, 11, 247})

	Instruction_UpdateUserQuoteAssetInsuranceStake = ag_binary.TypeID([8]byte{251, 101, 156, 7, 2, 63, 30, 23})

	Instruction_InitializeInsuranceFundStake = ag_binary.TypeID([8]byte{187, 179, 243, 70, 248, 90, 92, 147})

	Instruction_AddInsuranceFundStake = ag_binary.TypeID([8]byte{251, 144, 115, 11, 222, 47, 62, 236})

	Instruction_RequestRemoveInsuranceFundStake = ag_binary.TypeID([8]byte{142, 70, 204, 92, 73, 106, 180, 52})

	Instruction_CancelRequestRemoveInsuranceFundStake = ag_binary.TypeID([8]byte{97, 235, 78, 62, 212, 42, 241, 127})

	Instruction_RemoveInsuranceFundStake = ag_binary.TypeID([8]byte{128, 166, 142, 9, 254, 187, 143, 174})

	Instruction_TransferProtocolIfShares = ag_binary.TypeID([8]byte{94, 93, 226, 240, 195, 201, 184, 109})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_InitializeSpotMarket = ag_binary.TypeID([8]byte{234, 196, 128, 44, 94, 15, 48, 201})

	Instruction_DeleteInitializedSpotMarket = ag_binary.TypeID([8]byte{31, 140, 67, 191, 189, 20, 101, 221})

	Instruction_InitializeSerumFulfillmentConfig = ag_binary.TypeID([8]byte{193, 211, 132, 172, 70, 171, 7, 94})

	Instruction_UpdateSerumFulfillmentConfigStatus = ag_binary.TypeID([8]byte{171, 109, 240, 251, 95, 1, 149, 89})

	Instruction_InitializePhoenixFulfillmentConfig = ag_binary.TypeID([8]byte{135, 132, 110, 107, 185, 160, 169, 154})

	Instruction_PhoenixFulfillmentConfigStatus = ag_binary.TypeID([8]byte{96, 31, 113, 32, 12, 203, 7, 154})

	Instruction_UpdateSerumVault = ag_binary.TypeID([8]byte{219, 8, 246, 96, 169, 121, 91, 110})

	Instruction_InitializePerpMarket = ag_binary.TypeID([8]byte{132, 9, 229, 118, 117, 118, 117, 62})

	Instruction_DeleteInitializedPerpMarket = ag_binary.TypeID([8]byte{91, 154, 24, 87, 106, 59, 190, 66})

	Instruction_MoveAmmPrice = ag_binary.TypeID([8]byte{235, 109, 2, 82, 219, 118, 6, 159})

	Instruction_RecenterPerpMarketAmm = ag_binary.TypeID([8]byte{24, 87, 10, 115, 165, 190, 80, 139})

	Instruction_UpdatePerpMarketExpiry = ag_binary.TypeID([8]byte{44, 221, 227, 151, 131, 140, 22, 110})

	Instruction_SettleExpiredMarketPoolsToRevenuePool = ag_binary.TypeID([8]byte{55, 19, 238, 169, 227, 90, 200, 184})

	Instruction_DepositIntoPerpMarketFeePool = ag_binary.TypeID([8]byte{34, 58, 57, 68, 97, 80, 244, 6})

	Instruction_DepositIntoSpotMarketRevenuePool = ag_binary.TypeID([8]byte{92, 40, 151, 42, 122, 254, 139, 246})

	Instruction_RepegAmmCurve = ag_binary.TypeID([8]byte{3, 36, 102, 89, 180, 128, 120, 213})

	Instruction_UpdatePerpMarketAmmOracleTwap = ag_binary.TypeID([8]byte{241, 74, 114, 123, 206, 153, 24, 202})

	Instruction_ResetPerpMarketAmmOracleTwap = ag_binary.TypeID([8]byte{127, 10, 55, 164, 123, 226, 47, 24})

	Instruction_UpdateK = ag_binary.TypeID([8]byte{72, 98, 9, 139, 129, 229, 172, 56})

	Instruction_UpdatePerpMarketMarginRatio = ag_binary.TypeID([8]byte{130, 173, 107, 45, 119, 105, 26, 113})

	Instruction_UpdatePerpMarketFundingPeriod = ag_binary.TypeID([8]byte{171, 161, 69, 91, 129, 139, 161, 28})

	Instruction_UpdatePerpMarketMaxImbalances = ag_binary.TypeID([8]byte{15, 206, 73, 133, 60, 8, 86, 89})

	Instruction_UpdatePerpMarketLiquidationFee = ag_binary.TypeID([8]byte{90, 137, 9, 145, 41, 8, 148, 117})

	Instruction_UpdateInsuranceFundUnstakingPeriod = ag_binary.TypeID([8]byte{44, 69, 43, 226, 204, 223, 202, 52})

	Instruction_UpdateSpotMarketLiquidationFee = ag_binary.TypeID([8]byte{11, 13, 255, 53, 56, 136, 104, 177})

	Instruction_UpdateWithdrawGuardThreshold = ag_binary.TypeID([8]byte{56, 18, 39, 61, 155, 211, 44, 133})

	Instruction_UpdateSpotMarketIfFactor = ag_binary.TypeID([8]byte{147, 30, 224, 34, 18, 230, 105, 4})

	Instruction_UpdateSpotMarketRevenueSettlePeriod = ag_binary.TypeID([8]byte{81, 92, 126, 41, 250, 225, 156, 219})

	Instruction_UpdateSpotMarketStatus = ag_binary.TypeID([8]byte{78, 94, 16, 188, 193, 110, 231, 31})

	Instruction_UpdateSpotMarketPausedOperations = ag_binary.TypeID([8]byte{100, 61, 153, 81, 180, 12, 6, 248})

	Instruction_UpdateSpotMarketAssetTier = ag_binary.TypeID([8]byte{253, 209, 231, 14, 242, 208, 243, 130})

	Instruction_UpdateSpotMarketMarginWeights = ag_binary.TypeID([8]byte{109, 33, 87, 195, 255, 36, 6, 81})

	Instruction_UpdateSpotMarketBorrowRate = ag_binary.TypeID([8]byte{71, 239, 236, 153, 210, 62, 254, 76})

	Instruction_UpdateSpotMarketMaxTokenDeposits = ag_binary.TypeID([8]byte{56, 191, 79, 18, 26, 121, 80, 208})

	Instruction_UpdateSpotMarketScaleInitialAssetWeightStart = ag_binary.TypeID([8]byte{217, 204, 204, 118, 204, 130, 225, 147})

	Instruction_UpdateSpotMarketOracle = ag_binary.TypeID([8]byte{114, 184, 102, 37, 246, 186, 180, 99})

	Instruction_UpdateSpotMarketStepSizeAndTickSize = ag_binary.TypeID([8]byte{238, 153, 137, 80, 206, 59, 250, 61})

	Instruction_UpdateSpotMarketMinOrderSize = ag_binary.TypeID([8]byte{93, 128, 11, 119, 26, 20, 181, 50})

	Instruction_UpdateSpotMarketOrdersEnabled = ag_binary.TypeID([8]byte{190, 79, 206, 15, 26, 229, 229, 43})

	Instruction_UpdateSpotMarketName = ag_binary.TypeID([8]byte{17, 208, 1, 1, 162, 211, 188, 224})

	Instruction_UpdatePerpMarketStatus = ag_binary.TypeID([8]byte{71, 201, 175, 122, 255, 207, 196, 207})

	Instruction_UpdatePerpMarketPausedOperations = ag_binary.TypeID([8]byte{53, 16, 136, 132, 30, 220, 121, 85})

	Instruction_UpdatePerpMarketContractTier = ag_binary.TypeID([8]byte{236, 128, 15, 95, 203, 214, 68, 117})

	Instruction_UpdatePerpMarketImfFactor = ag_binary.TypeID([8]byte{207, 194, 56, 132, 35, 67, 71, 244})

	Instruction_UpdatePerpMarketUnrealizedAssetWeight = ag_binary.TypeID([8]byte{135, 132, 205, 165, 109, 150, 166, 106})

	Instruction_UpdatePerpMarketConcentrationCoef = ag_binary.TypeID([8]byte{24, 78, 232, 126, 169, 176, 230, 16})

	Instruction_UpdatePerpMarketCurveUpdateIntensity = ag_binary.TypeID([8]byte{50, 131, 6, 156, 226, 231, 189, 72})

	Instruction_UpdatePerpMarketTargetBaseAssetAmountPerLp = ag_binary.TypeID([8]byte{62, 87, 68, 115, 29, 150, 150, 165})

	Instruction_UpdatePerpMarketPerLpBase = ag_binary.TypeID([8]byte{103, 152, 103, 102, 89, 144, 193, 71})

	Instruction_UpdateLpCooldownTime = ag_binary.TypeID([8]byte{198, 133, 88, 41, 241, 119, 61, 14})

	Instruction_UpdatePerpFeeStructure = ag_binary.TypeID([8]byte{23, 178, 111, 203, 73, 22, 140, 75})

	Instruction_UpdateSpotFeeStructure = ag_binary.TypeID([8]byte{97, 216, 105, 131, 113, 246, 142, 141})

	Instruction_UpdateInitialPctToLiquidate = ag_binary.TypeID([8]byte{210, 133, 225, 128, 194, 50, 13, 109})

	Instruction_UpdateLiquidationDuration = ag_binary.TypeID([8]byte{28, 154, 20, 249, 102, 192, 73, 71})

	Instruction_UpdateLiquidationMarginBufferRatio = ag_binary.TypeID([8]byte{132, 224, 243, 160, 154, 82, 97, 215})

	Instruction_UpdateOracleGuardRails = ag_binary.TypeID([8]byte{131, 112, 10, 59, 32, 54, 40, 164})

	Instruction_UpdateStateSettlementDuration = ag_binary.TypeID([8]byte{97, 68, 199, 235, 131, 80, 61, 173})

	Instruction_UpdateStateMaxNumberOfSubAccounts = ag_binary.TypeID([8]byte{155, 123, 214, 2, 221, 166, 204, 85})

	Instruction_UpdateStateMaxInitializeUserFee = ag_binary.TypeID([8]byte{237, 225, 25, 237, 193, 45, 77, 97})

	Instruction_UpdatePerpMarketOracle = ag_binary.TypeID([8]byte{182, 113, 111, 160, 67, 174, 89, 191})

	Instruction_UpdatePerpMarketBaseSpread = ag_binary.TypeID([8]byte{71, 95, 84, 168, 9, 157, 198, 65})

	Instruction_UpdateAmmJitIntensity = ag_binary.TypeID([8]byte{181, 191, 53, 109, 166, 249, 55, 142})

	Instruction_UpdatePerpMarketMaxSpread = ag_binary.TypeID([8]byte{80, 252, 122, 62, 40, 218, 91, 100})

	Instruction_UpdatePerpMarketStepSizeAndTickSize = ag_binary.TypeID([8]byte{231, 255, 97, 25, 146, 139, 174, 4})

	Instruction_UpdatePerpMarketName = ag_binary.TypeID([8]byte{211, 31, 21, 210, 64, 108, 66, 201})

	Instruction_UpdatePerpMarketMinOrderSize = ag_binary.TypeID([8]byte{226, 74, 5, 89, 108, 223, 46, 141})

	Instruction_UpdatePerpMarketMaxSlippageRatio = ag_binary.TypeID([8]byte{235, 37, 40, 196, 70, 146, 54, 201})

	Instruction_UpdatePerpMarketMaxFillReserveFraction = ag_binary.TypeID([8]byte{19, 172, 114, 154, 42, 135, 161, 133})

	Instruction_UpdatePerpMarketMaxOpenInterest = ag_binary.TypeID([8]byte{194, 79, 149, 224, 246, 102, 186, 140})

	Instruction_UpdatePerpMarketNumberOfUsers = ag_binary.TypeID([8]byte{35, 62, 144, 177, 180, 62, 215, 196})

	Instruction_UpdatePerpMarketFeeAdjustment = ag_binary.TypeID([8]byte{194, 174, 87, 102, 43, 148, 32, 112})

	Instruction_UpdateSpotMarketFeeAdjustment = ag_binary.TypeID([8]byte{148, 182, 3, 126, 157, 114, 220, 99})

	Instruction_UpdateAdmin = ag_binary.TypeID([8]byte{161, 176, 40, 213, 60, 184, 179, 228})

	Instruction_UpdateWhitelistMint = ag_binary.TypeID([8]byte{161, 15, 162, 19, 148, 120, 144, 151})

	Instruction_UpdateDiscountMint = ag_binary.TypeID([8]byte{32, 252, 122, 211, 66, 31, 47, 241})

	Instruction_UpdateExchangeStatus = ag_binary.TypeID([8]byte{83, 160, 252, 250, 129, 116, 49, 223})

	Instruction_UpdatePerpAuctionDuration = ag_binary.TypeID([8]byte{126, 110, 52, 174, 30, 206, 215, 90})

	Instruction_UpdateSpotAuctionDuration = ag_binary.TypeID([8]byte{182, 178, 203, 72, 187, 143, 157, 107})

	Instruction_InitializeProtocolIfSharesTransferConfig = ag_binary.TypeID([8]byte{89, 131, 239, 200, 178, 141, 106, 194})

	Instruction_UpdateProtocolIfSharesTransferConfig = ag_binary.TypeID([8]byte{34, 135, 47, 91, 220, 24, 212, 53})

	Instruction_InitializePrelaunchOracle = ag_binary.TypeID([8]byte{169, 178, 84, 25, 175, 62, 29, 247})

	Instruction_UpdatePrelaunchOracleParams = ag_binary.TypeID([8]byte{98, 205, 147, 243, 18, 75, 83, 207})

	Instruction_DeletePrelaunchOracle = ag_binary.TypeID([8]byte{59, 169, 100, 49, 69, 17, 173, 253})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeUser:
		return "InitializeUser"
	case Instruction_InitializeUserStats:
		return "InitializeUserStats"
	case Instruction_InitializeReferrerName:
		return "InitializeReferrerName"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_TransferDeposit:
		return "TransferDeposit"
	case Instruction_PlacePerpOrder:
		return "PlacePerpOrder"
	case Instruction_CancelOrder:
		return "CancelOrder"
	case Instruction_CancelOrderByUserId:
		return "CancelOrderByUserId"
	case Instruction_CancelOrders:
		return "CancelOrders"
	case Instruction_CancelOrdersByIds:
		return "CancelOrdersByIds"
	case Instruction_ModifyOrder:
		return "ModifyOrder"
	case Instruction_ModifyOrderByUserId:
		return "ModifyOrderByUserId"
	case Instruction_PlaceAndTakePerpOrder:
		return "PlaceAndTakePerpOrder"
	case Instruction_PlaceAndMakePerpOrder:
		return "PlaceAndMakePerpOrder"
	case Instruction_PlaceSpotOrder:
		return "PlaceSpotOrder"
	case Instruction_PlaceAndTakeSpotOrder:
		return "PlaceAndTakeSpotOrder"
	case Instruction_PlaceAndMakeSpotOrder:
		return "PlaceAndMakeSpotOrder"
	case Instruction_PlaceOrders:
		return "PlaceOrders"
	case Instruction_BeginSwap:
		return "BeginSwap"
	case Instruction_EndSwap:
		return "EndSwap"
	case Instruction_AddPerpLpShares:
		return "AddPerpLpShares"
	case Instruction_RemovePerpLpShares:
		return "RemovePerpLpShares"
	case Instruction_RemovePerpLpSharesInExpiringMarket:
		return "RemovePerpLpSharesInExpiringMarket"
	case Instruction_UpdateUserName:
		return "UpdateUserName"
	case Instruction_UpdateUserCustomMarginRatio:
		return "UpdateUserCustomMarginRatio"
	case Instruction_UpdateUserMarginTradingEnabled:
		return "UpdateUserMarginTradingEnabled"
	case Instruction_UpdateUserDelegate:
		return "UpdateUserDelegate"
	case Instruction_UpdateUserReduceOnly:
		return "UpdateUserReduceOnly"
	case Instruction_UpdateUserAdvancedLp:
		return "UpdateUserAdvancedLp"
	case Instruction_DeleteUser:
		return "DeleteUser"
	case Instruction_ReclaimRent:
		return "ReclaimRent"
	case Instruction_FillPerpOrder:
		return "FillPerpOrder"
	case Instruction_RevertFill:
		return "RevertFill"
	case Instruction_FillSpotOrder:
		return "FillSpotOrder"
	case Instruction_TriggerOrder:
		return "TriggerOrder"
	case Instruction_ForceCancelOrders:
		return "ForceCancelOrders"
	case Instruction_UpdateUserIdle:
		return "UpdateUserIdle"
	case Instruction_UpdateUserOpenOrdersCount:
		return "UpdateUserOpenOrdersCount"
	case Instruction_AdminDisableUpdatePerpBidAskTwap:
		return "AdminDisableUpdatePerpBidAskTwap"
	case Instruction_SettlePnl:
		return "SettlePnl"
	case Instruction_SettleFundingPayment:
		return "SettleFundingPayment"
	case Instruction_SettleLp:
		return "SettleLp"
	case Instruction_SettleExpiredMarket:
		return "SettleExpiredMarket"
	case Instruction_LiquidatePerp:
		return "LiquidatePerp"
	case Instruction_LiquidateSpot:
		return "LiquidateSpot"
	case Instruction_LiquidateBorrowForPerpPnl:
		return "LiquidateBorrowForPerpPnl"
	case Instruction_LiquidatePerpPnlForDeposit:
		return "LiquidatePerpPnlForDeposit"
	case Instruction_ResolvePerpPnlDeficit:
		return "ResolvePerpPnlDeficit"
	case Instruction_ResolvePerpBankruptcy:
		return "ResolvePerpBankruptcy"
	case Instruction_ResolveSpotBankruptcy:
		return "ResolveSpotBankruptcy"
	case Instruction_SettleRevenueToInsuranceFund:
		return "SettleRevenueToInsuranceFund"
	case Instruction_UpdateFundingRate:
		return "UpdateFundingRate"
	case Instruction_UpdatePrelaunchOracle:
		return "UpdatePrelaunchOracle"
	case Instruction_UpdatePerpBidAskTwap:
		return "UpdatePerpBidAskTwap"
	case Instruction_UpdateSpotMarketCumulativeInterest:
		return "UpdateSpotMarketCumulativeInterest"
	case Instruction_UpdateAmms:
		return "UpdateAmms"
	case Instruction_UpdateSpotMarketExpiry:
		return "UpdateSpotMarketExpiry"
	case Instruction_UpdateUserQuoteAssetInsuranceStake:
		return "UpdateUserQuoteAssetInsuranceStake"
	case Instruction_InitializeInsuranceFundStake:
		return "InitializeInsuranceFundStake"
	case Instruction_AddInsuranceFundStake:
		return "AddInsuranceFundStake"
	case Instruction_RequestRemoveInsuranceFundStake:
		return "RequestRemoveInsuranceFundStake"
	case Instruction_CancelRequestRemoveInsuranceFundStake:
		return "CancelRequestRemoveInsuranceFundStake"
	case Instruction_RemoveInsuranceFundStake:
		return "RemoveInsuranceFundStake"
	case Instruction_TransferProtocolIfShares:
		return "TransferProtocolIfShares"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_InitializeSpotMarket:
		return "InitializeSpotMarket"
	case Instruction_DeleteInitializedSpotMarket:
		return "DeleteInitializedSpotMarket"
	case Instruction_InitializeSerumFulfillmentConfig:
		return "InitializeSerumFulfillmentConfig"
	case Instruction_UpdateSerumFulfillmentConfigStatus:
		return "UpdateSerumFulfillmentConfigStatus"
	case Instruction_InitializePhoenixFulfillmentConfig:
		return "InitializePhoenixFulfillmentConfig"
	case Instruction_PhoenixFulfillmentConfigStatus:
		return "PhoenixFulfillmentConfigStatus"
	case Instruction_UpdateSerumVault:
		return "UpdateSerumVault"
	case Instruction_InitializePerpMarket:
		return "InitializePerpMarket"
	case Instruction_DeleteInitializedPerpMarket:
		return "DeleteInitializedPerpMarket"
	case Instruction_MoveAmmPrice:
		return "MoveAmmPrice"
	case Instruction_RecenterPerpMarketAmm:
		return "RecenterPerpMarketAmm"
	case Instruction_UpdatePerpMarketExpiry:
		return "UpdatePerpMarketExpiry"
	case Instruction_SettleExpiredMarketPoolsToRevenuePool:
		return "SettleExpiredMarketPoolsToRevenuePool"
	case Instruction_DepositIntoPerpMarketFeePool:
		return "DepositIntoPerpMarketFeePool"
	case Instruction_DepositIntoSpotMarketRevenuePool:
		return "DepositIntoSpotMarketRevenuePool"
	case Instruction_RepegAmmCurve:
		return "RepegAmmCurve"
	case Instruction_UpdatePerpMarketAmmOracleTwap:
		return "UpdatePerpMarketAmmOracleTwap"
	case Instruction_ResetPerpMarketAmmOracleTwap:
		return "ResetPerpMarketAmmOracleTwap"
	case Instruction_UpdateK:
		return "UpdateK"
	case Instruction_UpdatePerpMarketMarginRatio:
		return "UpdatePerpMarketMarginRatio"
	case Instruction_UpdatePerpMarketFundingPeriod:
		return "UpdatePerpMarketFundingPeriod"
	case Instruction_UpdatePerpMarketMaxImbalances:
		return "UpdatePerpMarketMaxImbalances"
	case Instruction_UpdatePerpMarketLiquidationFee:
		return "UpdatePerpMarketLiquidationFee"
	case Instruction_UpdateInsuranceFundUnstakingPeriod:
		return "UpdateInsuranceFundUnstakingPeriod"
	case Instruction_UpdateSpotMarketLiquidationFee:
		return "UpdateSpotMarketLiquidationFee"
	case Instruction_UpdateWithdrawGuardThreshold:
		return "UpdateWithdrawGuardThreshold"
	case Instruction_UpdateSpotMarketIfFactor:
		return "UpdateSpotMarketIfFactor"
	case Instruction_UpdateSpotMarketRevenueSettlePeriod:
		return "UpdateSpotMarketRevenueSettlePeriod"
	case Instruction_UpdateSpotMarketStatus:
		return "UpdateSpotMarketStatus"
	case Instruction_UpdateSpotMarketPausedOperations:
		return "UpdateSpotMarketPausedOperations"
	case Instruction_UpdateSpotMarketAssetTier:
		return "UpdateSpotMarketAssetTier"
	case Instruction_UpdateSpotMarketMarginWeights:
		return "UpdateSpotMarketMarginWeights"
	case Instruction_UpdateSpotMarketBorrowRate:
		return "UpdateSpotMarketBorrowRate"
	case Instruction_UpdateSpotMarketMaxTokenDeposits:
		return "UpdateSpotMarketMaxTokenDeposits"
	case Instruction_UpdateSpotMarketScaleInitialAssetWeightStart:
		return "UpdateSpotMarketScaleInitialAssetWeightStart"
	case Instruction_UpdateSpotMarketOracle:
		return "UpdateSpotMarketOracle"
	case Instruction_UpdateSpotMarketStepSizeAndTickSize:
		return "UpdateSpotMarketStepSizeAndTickSize"
	case Instruction_UpdateSpotMarketMinOrderSize:
		return "UpdateSpotMarketMinOrderSize"
	case Instruction_UpdateSpotMarketOrdersEnabled:
		return "UpdateSpotMarketOrdersEnabled"
	case Instruction_UpdateSpotMarketName:
		return "UpdateSpotMarketName"
	case Instruction_UpdatePerpMarketStatus:
		return "UpdatePerpMarketStatus"
	case Instruction_UpdatePerpMarketPausedOperations:
		return "UpdatePerpMarketPausedOperations"
	case Instruction_UpdatePerpMarketContractTier:
		return "UpdatePerpMarketContractTier"
	case Instruction_UpdatePerpMarketImfFactor:
		return "UpdatePerpMarketImfFactor"
	case Instruction_UpdatePerpMarketUnrealizedAssetWeight:
		return "UpdatePerpMarketUnrealizedAssetWeight"
	case Instruction_UpdatePerpMarketConcentrationCoef:
		return "UpdatePerpMarketConcentrationCoef"
	case Instruction_UpdatePerpMarketCurveUpdateIntensity:
		return "UpdatePerpMarketCurveUpdateIntensity"
	case Instruction_UpdatePerpMarketTargetBaseAssetAmountPerLp:
		return "UpdatePerpMarketTargetBaseAssetAmountPerLp"
	case Instruction_UpdatePerpMarketPerLpBase:
		return "UpdatePerpMarketPerLpBase"
	case Instruction_UpdateLpCooldownTime:
		return "UpdateLpCooldownTime"
	case Instruction_UpdatePerpFeeStructure:
		return "UpdatePerpFeeStructure"
	case Instruction_UpdateSpotFeeStructure:
		return "UpdateSpotFeeStructure"
	case Instruction_UpdateInitialPctToLiquidate:
		return "UpdateInitialPctToLiquidate"
	case Instruction_UpdateLiquidationDuration:
		return "UpdateLiquidationDuration"
	case Instruction_UpdateLiquidationMarginBufferRatio:
		return "UpdateLiquidationMarginBufferRatio"
	case Instruction_UpdateOracleGuardRails:
		return "UpdateOracleGuardRails"
	case Instruction_UpdateStateSettlementDuration:
		return "UpdateStateSettlementDuration"
	case Instruction_UpdateStateMaxNumberOfSubAccounts:
		return "UpdateStateMaxNumberOfSubAccounts"
	case Instruction_UpdateStateMaxInitializeUserFee:
		return "UpdateStateMaxInitializeUserFee"
	case Instruction_UpdatePerpMarketOracle:
		return "UpdatePerpMarketOracle"
	case Instruction_UpdatePerpMarketBaseSpread:
		return "UpdatePerpMarketBaseSpread"
	case Instruction_UpdateAmmJitIntensity:
		return "UpdateAmmJitIntensity"
	case Instruction_UpdatePerpMarketMaxSpread:
		return "UpdatePerpMarketMaxSpread"
	case Instruction_UpdatePerpMarketStepSizeAndTickSize:
		return "UpdatePerpMarketStepSizeAndTickSize"
	case Instruction_UpdatePerpMarketName:
		return "UpdatePerpMarketName"
	case Instruction_UpdatePerpMarketMinOrderSize:
		return "UpdatePerpMarketMinOrderSize"
	case Instruction_UpdatePerpMarketMaxSlippageRatio:
		return "UpdatePerpMarketMaxSlippageRatio"
	case Instruction_UpdatePerpMarketMaxFillReserveFraction:
		return "UpdatePerpMarketMaxFillReserveFraction"
	case Instruction_UpdatePerpMarketMaxOpenInterest:
		return "UpdatePerpMarketMaxOpenInterest"
	case Instruction_UpdatePerpMarketNumberOfUsers:
		return "UpdatePerpMarketNumberOfUsers"
	case Instruction_UpdatePerpMarketFeeAdjustment:
		return "UpdatePerpMarketFeeAdjustment"
	case Instruction_UpdateSpotMarketFeeAdjustment:
		return "UpdateSpotMarketFeeAdjustment"
	case Instruction_UpdateAdmin:
		return "UpdateAdmin"
	case Instruction_UpdateWhitelistMint:
		return "UpdateWhitelistMint"
	case Instruction_UpdateDiscountMint:
		return "UpdateDiscountMint"
	case Instruction_UpdateExchangeStatus:
		return "UpdateExchangeStatus"
	case Instruction_UpdatePerpAuctionDuration:
		return "UpdatePerpAuctionDuration"
	case Instruction_UpdateSpotAuctionDuration:
		return "UpdateSpotAuctionDuration"
	case Instruction_InitializeProtocolIfSharesTransferConfig:
		return "InitializeProtocolIfSharesTransferConfig"
	case Instruction_UpdateProtocolIfSharesTransferConfig:
		return "UpdateProtocolIfSharesTransferConfig"
	case Instruction_InitializePrelaunchOracle:
		return "InitializePrelaunchOracle"
	case Instruction_UpdatePrelaunchOracleParams:
		return "UpdatePrelaunchOracleParams"
	case Instruction_DeletePrelaunchOracle:
		return "DeletePrelaunchOracle"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_user", (*InitializeUser)(nil),
		},
		{
			"initialize_user_stats", (*InitializeUserStats)(nil),
		},
		{
			"initialize_referrer_name", (*InitializeReferrerName)(nil),
		},
		{
			"deposit", (*Deposit)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"transfer_deposit", (*TransferDeposit)(nil),
		},
		{
			"place_perp_order", (*PlacePerpOrder)(nil),
		},
		{
			"cancel_order", (*CancelOrder)(nil),
		},
		{
			"cancel_order_by_user_id", (*CancelOrderByUserId)(nil),
		},
		{
			"cancel_orders", (*CancelOrders)(nil),
		},
		{
			"cancel_orders_by_ids", (*CancelOrdersByIds)(nil),
		},
		{
			"modify_order", (*ModifyOrder)(nil),
		},
		{
			"modify_order_by_user_id", (*ModifyOrderByUserId)(nil),
		},
		{
			"place_and_take_perp_order", (*PlaceAndTakePerpOrder)(nil),
		},
		{
			"place_and_make_perp_order", (*PlaceAndMakePerpOrder)(nil),
		},
		{
			"place_spot_order", (*PlaceSpotOrder)(nil),
		},
		{
			"place_and_take_spot_order", (*PlaceAndTakeSpotOrder)(nil),
		},
		{
			"place_and_make_spot_order", (*PlaceAndMakeSpotOrder)(nil),
		},
		{
			"place_orders", (*PlaceOrders)(nil),
		},
		{
			"begin_swap", (*BeginSwap)(nil),
		},
		{
			"end_swap", (*EndSwap)(nil),
		},
		{
			"add_perp_lp_shares", (*AddPerpLpShares)(nil),
		},
		{
			"remove_perp_lp_shares", (*RemovePerpLpShares)(nil),
		},
		{
			"remove_perp_lp_shares_in_expiring_market", (*RemovePerpLpSharesInExpiringMarket)(nil),
		},
		{
			"update_user_name", (*UpdateUserName)(nil),
		},
		{
			"update_user_custom_margin_ratio", (*UpdateUserCustomMarginRatio)(nil),
		},
		{
			"update_user_margin_trading_enabled", (*UpdateUserMarginTradingEnabled)(nil),
		},
		{
			"update_user_delegate", (*UpdateUserDelegate)(nil),
		},
		{
			"update_user_reduce_only", (*UpdateUserReduceOnly)(nil),
		},
		{
			"update_user_advanced_lp", (*UpdateUserAdvancedLp)(nil),
		},
		{
			"delete_user", (*DeleteUser)(nil),
		},
		{
			"reclaim_rent", (*ReclaimRent)(nil),
		},
		{
			"fill_perp_order", (*FillPerpOrder)(nil),
		},
		{
			"revert_fill", (*RevertFill)(nil),
		},
		{
			"fill_spot_order", (*FillSpotOrder)(nil),
		},
		{
			"trigger_order", (*TriggerOrder)(nil),
		},
		{
			"force_cancel_orders", (*ForceCancelOrders)(nil),
		},
		{
			"update_user_idle", (*UpdateUserIdle)(nil),
		},
		{
			"update_user_open_orders_count", (*UpdateUserOpenOrdersCount)(nil),
		},
		{
			"admin_disable_update_perp_bid_ask_twap", (*AdminDisableUpdatePerpBidAskTwap)(nil),
		},
		{
			"settle_pnl", (*SettlePnl)(nil),
		},
		{
			"settle_funding_payment", (*SettleFundingPayment)(nil),
		},
		{
			"settle_lp", (*SettleLp)(nil),
		},
		{
			"settle_expired_market", (*SettleExpiredMarket)(nil),
		},
		{
			"liquidate_perp", (*LiquidatePerp)(nil),
		},
		{
			"liquidate_spot", (*LiquidateSpot)(nil),
		},
		{
			"liquidate_borrow_for_perp_pnl", (*LiquidateBorrowForPerpPnl)(nil),
		},
		{
			"liquidate_perp_pnl_for_deposit", (*LiquidatePerpPnlForDeposit)(nil),
		},
		{
			"resolve_perp_pnl_deficit", (*ResolvePerpPnlDeficit)(nil),
		},
		{
			"resolve_perp_bankruptcy", (*ResolvePerpBankruptcy)(nil),
		},
		{
			"resolve_spot_bankruptcy", (*ResolveSpotBankruptcy)(nil),
		},
		{
			"settle_revenue_to_insurance_fund", (*SettleRevenueToInsuranceFund)(nil),
		},
		{
			"update_funding_rate", (*UpdateFundingRate)(nil),
		},
		{
			"update_prelaunch_oracle", (*UpdatePrelaunchOracle)(nil),
		},
		{
			"update_perp_bid_ask_twap", (*UpdatePerpBidAskTwap)(nil),
		},
		{
			"update_spot_market_cumulative_interest", (*UpdateSpotMarketCumulativeInterest)(nil),
		},
		{
			"update_amms", (*UpdateAmms)(nil),
		},
		{
			"update_spot_market_expiry", (*UpdateSpotMarketExpiry)(nil),
		},
		{
			"update_user_quote_asset_insurance_stake", (*UpdateUserQuoteAssetInsuranceStake)(nil),
		},
		{
			"initialize_insurance_fund_stake", (*InitializeInsuranceFundStake)(nil),
		},
		{
			"add_insurance_fund_stake", (*AddInsuranceFundStake)(nil),
		},
		{
			"request_remove_insurance_fund_stake", (*RequestRemoveInsuranceFundStake)(nil),
		},
		{
			"cancel_request_remove_insurance_fund_stake", (*CancelRequestRemoveInsuranceFundStake)(nil),
		},
		{
			"remove_insurance_fund_stake", (*RemoveInsuranceFundStake)(nil),
		},
		{
			"transfer_protocol_if_shares", (*TransferProtocolIfShares)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"initialize_spot_market", (*InitializeSpotMarket)(nil),
		},
		{
			"delete_initialized_spot_market", (*DeleteInitializedSpotMarket)(nil),
		},
		{
			"initialize_serum_fulfillment_config", (*InitializeSerumFulfillmentConfig)(nil),
		},
		{
			"update_serum_fulfillment_config_status", (*UpdateSerumFulfillmentConfigStatus)(nil),
		},
		{
			"initialize_phoenix_fulfillment_config", (*InitializePhoenixFulfillmentConfig)(nil),
		},
		{
			"phoenix_fulfillment_config_status", (*PhoenixFulfillmentConfigStatus)(nil),
		},
		{
			"update_serum_vault", (*UpdateSerumVault)(nil),
		},
		{
			"initialize_perp_market", (*InitializePerpMarket)(nil),
		},
		{
			"delete_initialized_perp_market", (*DeleteInitializedPerpMarket)(nil),
		},
		{
			"move_amm_price", (*MoveAmmPrice)(nil),
		},
		{
			"recenter_perp_market_amm", (*RecenterPerpMarketAmm)(nil),
		},
		{
			"update_perp_market_expiry", (*UpdatePerpMarketExpiry)(nil),
		},
		{
			"settle_expired_market_pools_to_revenue_pool", (*SettleExpiredMarketPoolsToRevenuePool)(nil),
		},
		{
			"deposit_into_perp_market_fee_pool", (*DepositIntoPerpMarketFeePool)(nil),
		},
		{
			"deposit_into_spot_market_revenue_pool", (*DepositIntoSpotMarketRevenuePool)(nil),
		},
		{
			"repeg_amm_curve", (*RepegAmmCurve)(nil),
		},
		{
			"update_perp_market_amm_oracle_twap", (*UpdatePerpMarketAmmOracleTwap)(nil),
		},
		{
			"reset_perp_market_amm_oracle_twap", (*ResetPerpMarketAmmOracleTwap)(nil),
		},
		{
			"update_k", (*UpdateK)(nil),
		},
		{
			"update_perp_market_margin_ratio", (*UpdatePerpMarketMarginRatio)(nil),
		},
		{
			"update_perp_market_funding_period", (*UpdatePerpMarketFundingPeriod)(nil),
		},
		{
			"update_perp_market_max_imbalances", (*UpdatePerpMarketMaxImbalances)(nil),
		},
		{
			"update_perp_market_liquidation_fee", (*UpdatePerpMarketLiquidationFee)(nil),
		},
		{
			"update_insurance_fund_unstaking_period", (*UpdateInsuranceFundUnstakingPeriod)(nil),
		},
		{
			"update_spot_market_liquidation_fee", (*UpdateSpotMarketLiquidationFee)(nil),
		},
		{
			"update_withdraw_guard_threshold", (*UpdateWithdrawGuardThreshold)(nil),
		},
		{
			"update_spot_market_if_factor", (*UpdateSpotMarketIfFactor)(nil),
		},
		{
			"update_spot_market_revenue_settle_period", (*UpdateSpotMarketRevenueSettlePeriod)(nil),
		},
		{
			"update_spot_market_status", (*UpdateSpotMarketStatus)(nil),
		},
		{
			"update_spot_market_paused_operations", (*UpdateSpotMarketPausedOperations)(nil),
		},
		{
			"update_spot_market_asset_tier", (*UpdateSpotMarketAssetTier)(nil),
		},
		{
			"update_spot_market_margin_weights", (*UpdateSpotMarketMarginWeights)(nil),
		},
		{
			"update_spot_market_borrow_rate", (*UpdateSpotMarketBorrowRate)(nil),
		},
		{
			"update_spot_market_max_token_deposits", (*UpdateSpotMarketMaxTokenDeposits)(nil),
		},
		{
			"update_spot_market_scale_initial_asset_weight_start", (*UpdateSpotMarketScaleInitialAssetWeightStart)(nil),
		},
		{
			"update_spot_market_oracle", (*UpdateSpotMarketOracle)(nil),
		},
		{
			"update_spot_market_step_size_and_tick_size", (*UpdateSpotMarketStepSizeAndTickSize)(nil),
		},
		{
			"update_spot_market_min_order_size", (*UpdateSpotMarketMinOrderSize)(nil),
		},
		{
			"update_spot_market_orders_enabled", (*UpdateSpotMarketOrdersEnabled)(nil),
		},
		{
			"update_spot_market_name", (*UpdateSpotMarketName)(nil),
		},
		{
			"update_perp_market_status", (*UpdatePerpMarketStatus)(nil),
		},
		{
			"update_perp_market_paused_operations", (*UpdatePerpMarketPausedOperations)(nil),
		},
		{
			"update_perp_market_contract_tier", (*UpdatePerpMarketContractTier)(nil),
		},
		{
			"update_perp_market_imf_factor", (*UpdatePerpMarketImfFactor)(nil),
		},
		{
			"update_perp_market_unrealized_asset_weight", (*UpdatePerpMarketUnrealizedAssetWeight)(nil),
		},
		{
			"update_perp_market_concentration_coef", (*UpdatePerpMarketConcentrationCoef)(nil),
		},
		{
			"update_perp_market_curve_update_intensity", (*UpdatePerpMarketCurveUpdateIntensity)(nil),
		},
		{
			"update_perp_market_target_base_asset_amount_per_lp", (*UpdatePerpMarketTargetBaseAssetAmountPerLp)(nil),
		},
		{
			"update_perp_market_per_lp_base", (*UpdatePerpMarketPerLpBase)(nil),
		},
		{
			"update_lp_cooldown_time", (*UpdateLpCooldownTime)(nil),
		},
		{
			"update_perp_fee_structure", (*UpdatePerpFeeStructure)(nil),
		},
		{
			"update_spot_fee_structure", (*UpdateSpotFeeStructure)(nil),
		},
		{
			"update_initial_pct_to_liquidate", (*UpdateInitialPctToLiquidate)(nil),
		},
		{
			"update_liquidation_duration", (*UpdateLiquidationDuration)(nil),
		},
		{
			"update_liquidation_margin_buffer_ratio", (*UpdateLiquidationMarginBufferRatio)(nil),
		},
		{
			"update_oracle_guard_rails", (*UpdateOracleGuardRails)(nil),
		},
		{
			"update_state_settlement_duration", (*UpdateStateSettlementDuration)(nil),
		},
		{
			"update_state_max_number_of_sub_accounts", (*UpdateStateMaxNumberOfSubAccounts)(nil),
		},
		{
			"update_state_max_initialize_user_fee", (*UpdateStateMaxInitializeUserFee)(nil),
		},
		{
			"update_perp_market_oracle", (*UpdatePerpMarketOracle)(nil),
		},
		{
			"update_perp_market_base_spread", (*UpdatePerpMarketBaseSpread)(nil),
		},
		{
			"update_amm_jit_intensity", (*UpdateAmmJitIntensity)(nil),
		},
		{
			"update_perp_market_max_spread", (*UpdatePerpMarketMaxSpread)(nil),
		},
		{
			"update_perp_market_step_size_and_tick_size", (*UpdatePerpMarketStepSizeAndTickSize)(nil),
		},
		{
			"update_perp_market_name", (*UpdatePerpMarketName)(nil),
		},
		{
			"update_perp_market_min_order_size", (*UpdatePerpMarketMinOrderSize)(nil),
		},
		{
			"update_perp_market_max_slippage_ratio", (*UpdatePerpMarketMaxSlippageRatio)(nil),
		},
		{
			"update_perp_market_max_fill_reserve_fraction", (*UpdatePerpMarketMaxFillReserveFraction)(nil),
		},
		{
			"update_perp_market_max_open_interest", (*UpdatePerpMarketMaxOpenInterest)(nil),
		},
		{
			"update_perp_market_number_of_users", (*UpdatePerpMarketNumberOfUsers)(nil),
		},
		{
			"update_perp_market_fee_adjustment", (*UpdatePerpMarketFeeAdjustment)(nil),
		},
		{
			"update_spot_market_fee_adjustment", (*UpdateSpotMarketFeeAdjustment)(nil),
		},
		{
			"update_admin", (*UpdateAdmin)(nil),
		},
		{
			"update_whitelist_mint", (*UpdateWhitelistMint)(nil),
		},
		{
			"update_discount_mint", (*UpdateDiscountMint)(nil),
		},
		{
			"update_exchange_status", (*UpdateExchangeStatus)(nil),
		},
		{
			"update_perp_auction_duration", (*UpdatePerpAuctionDuration)(nil),
		},
		{
			"update_spot_auction_duration", (*UpdateSpotAuctionDuration)(nil),
		},
		{
			"initialize_protocol_if_shares_transfer_config", (*InitializeProtocolIfSharesTransferConfig)(nil),
		},
		{
			"update_protocol_if_shares_transfer_config", (*UpdateProtocolIfSharesTransferConfig)(nil),
		},
		{
			"initialize_prelaunch_oracle", (*InitializePrelaunchOracle)(nil),
		},
		{
			"update_prelaunch_oracle_params", (*UpdatePrelaunchOracleParams)(nil),
		},
		{
			"delete_prelaunch_oracle", (*DeletePrelaunchOracle)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
