// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RevertFill is the `revertFill` instruction.
type RevertFill struct {

	// [0] = [] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] filler
	//
	// [3] = [WRITE] fillerStats
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRevertFillInstructionBuilder creates a new `RevertFill` instruction builder.
func NewRevertFillInstructionBuilder() *RevertFill {
	nd := &RevertFill{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *RevertFill) SetStateAccount(state ag_solanago.PublicKey) *RevertFill {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *RevertFill) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *RevertFill) SetAuthorityAccount(authority ag_solanago.PublicKey) *RevertFill {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *RevertFill) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFillerAccount sets the "filler" account.
func (inst *RevertFill) SetFillerAccount(filler ag_solanago.PublicKey) *RevertFill {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(filler).WRITE()
	return inst
}

// GetFillerAccount gets the "filler" account.
func (inst *RevertFill) GetFillerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFillerStatsAccount sets the "fillerStats" account.
func (inst *RevertFill) SetFillerStatsAccount(fillerStats ag_solanago.PublicKey) *RevertFill {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fillerStats).WRITE()
	return inst
}

// GetFillerStatsAccount gets the "fillerStats" account.
func (inst *RevertFill) GetFillerStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst RevertFill) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RevertFill,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RevertFill) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RevertFill) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Filler is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FillerStats is not set")
		}
	}
	return nil
}

func (inst *RevertFill) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RevertFill")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     filler", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("fillerStats", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj RevertFill) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RevertFill) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRevertFillInstruction declares a new RevertFill instruction with the provided parameters and accounts.
func NewRevertFillInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	filler ag_solanago.PublicKey,
	fillerStats ag_solanago.PublicKey) *RevertFill {
	return NewRevertFillInstructionBuilder().
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetFillerAccount(filler).
		SetFillerStatsAccount(fillerStats)
}
