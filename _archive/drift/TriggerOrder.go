// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TriggerOrder is the `triggerOrder` instruction.
type TriggerOrder struct {
	OrderId *uint32

	// [0] = [] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] filler
	//
	// [3] = [WRITE] user
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTriggerOrderInstructionBuilder creates a new `TriggerOrder` instruction builder.
func NewTriggerOrderInstructionBuilder() *TriggerOrder {
	nd := &TriggerOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetOrderId sets the "orderId" parameter.
func (inst *TriggerOrder) SetOrderId(orderId uint32) *TriggerOrder {
	inst.OrderId = &orderId
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *TriggerOrder) SetStateAccount(state ag_solanago.PublicKey) *TriggerOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *TriggerOrder) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TriggerOrder) SetAuthorityAccount(authority ag_solanago.PublicKey) *TriggerOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TriggerOrder) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFillerAccount sets the "filler" account.
func (inst *TriggerOrder) SetFillerAccount(filler ag_solanago.PublicKey) *TriggerOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(filler).WRITE()
	return inst
}

// GetFillerAccount gets the "filler" account.
func (inst *TriggerOrder) GetFillerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *TriggerOrder) SetUserAccount(user ag_solanago.PublicKey) *TriggerOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *TriggerOrder) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst TriggerOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TriggerOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TriggerOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TriggerOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OrderId == nil {
			return errors.New("OrderId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Filler is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
	}
	return nil
}

func (inst *TriggerOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TriggerOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OrderId", *inst.OrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   filler", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     user", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj TriggerOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TriggerOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}

// NewTriggerOrderInstruction declares a new TriggerOrder instruction with the provided parameters and accounts.
func NewTriggerOrderInstruction(
	// Parameters:
	orderId uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	filler ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *TriggerOrder {
	return NewTriggerOrderInstructionBuilder().
		SetOrderId(orderId).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetFillerAccount(filler).
		SetUserAccount(user)
}
