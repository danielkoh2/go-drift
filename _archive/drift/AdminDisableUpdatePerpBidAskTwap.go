// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminDisableUpdatePerpBidAskTwap is the `adminDisableUpdatePerpBidAskTwap` instruction.
type AdminDisableUpdatePerpBidAskTwap struct {
	Disable *bool

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] userStats
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminDisableUpdatePerpBidAskTwapInstructionBuilder creates a new `AdminDisableUpdatePerpBidAskTwap` instruction builder.
func NewAdminDisableUpdatePerpBidAskTwapInstructionBuilder() *AdminDisableUpdatePerpBidAskTwap {
	nd := &AdminDisableUpdatePerpBidAskTwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetDisable sets the "disable" parameter.
func (inst *AdminDisableUpdatePerpBidAskTwap) SetDisable(disable bool) *AdminDisableUpdatePerpBidAskTwap {
	inst.Disable = &disable
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) SetAdminAccount(admin ag_solanago.PublicKey) *AdminDisableUpdatePerpBidAskTwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) SetStateAccount(state ag_solanago.PublicKey) *AdminDisableUpdatePerpBidAskTwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) SetUserStatsAccount(userStats ag_solanago.PublicKey) *AdminDisableUpdatePerpBidAskTwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *AdminDisableUpdatePerpBidAskTwap) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst AdminDisableUpdatePerpBidAskTwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminDisableUpdatePerpBidAskTwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminDisableUpdatePerpBidAskTwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminDisableUpdatePerpBidAskTwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Disable == nil {
			return errors.New("Disable parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserStats is not set")
		}
	}
	return nil
}

func (inst *AdminDisableUpdatePerpBidAskTwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminDisableUpdatePerpBidAskTwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Disable", *inst.Disable))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("userStats", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj AdminDisableUpdatePerpBidAskTwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Disable` param:
	err = encoder.Encode(obj.Disable)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminDisableUpdatePerpBidAskTwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Disable`:
	err = decoder.Decode(&obj.Disable)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminDisableUpdatePerpBidAskTwapInstruction declares a new AdminDisableUpdatePerpBidAskTwap instruction with the provided parameters and accounts.
func NewAdminDisableUpdatePerpBidAskTwapInstruction(
	// Parameters:
	disable bool,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey) *AdminDisableUpdatePerpBidAskTwap {
	return NewAdminDisableUpdatePerpBidAskTwapInstructionBuilder().
		SetDisable(disable).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetUserStatsAccount(userStats)
}
