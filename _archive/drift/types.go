// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type LiquidatePerpRecord struct {
	MarketIndex      uint16
	OraclePrice      int64
	BaseAssetAmount  int64
	QuoteAssetAmount int64

	// precision: AMM_RESERVE_PRECISION
	LpShares          uint64
	FillRecordId      uint64
	UserOrderId       uint32
	LiquidatorOrderId uint32

	// precision: QUOTE_PRECISION
	LiquidatorFee uint64

	// precision: QUOTE_PRECISION
	IfFee uint64
}

func (obj LiquidatePerpRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OraclePrice` param:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmount` param:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `LpShares` param:
	err = encoder.Encode(obj.LpShares)
	if err != nil {
		return err
	}
	// Serialize `FillRecordId` param:
	err = encoder.Encode(obj.FillRecordId)
	if err != nil {
		return err
	}
	// Serialize `UserOrderId` param:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorOrderId` param:
	err = encoder.Encode(obj.LiquidatorOrderId)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorFee` param:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Serialize `IfFee` param:
	err = encoder.Encode(obj.IfFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidatePerpRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `LpShares`:
	err = decoder.Decode(&obj.LpShares)
	if err != nil {
		return err
	}
	// Deserialize `FillRecordId`:
	err = decoder.Decode(&obj.FillRecordId)
	if err != nil {
		return err
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorOrderId`:
	err = decoder.Decode(&obj.LiquidatorOrderId)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Deserialize `IfFee`:
	err = decoder.Decode(&obj.IfFee)
	if err != nil {
		return err
	}
	return nil
}

type LiquidateSpotRecord struct {
	AssetMarketIndex     uint16
	AssetPrice           int64
	AssetTransfer        ag_binary.Uint128
	LiabilityMarketIndex uint16
	LiabilityPrice       int64

	// precision: token mint precision
	LiabilityTransfer ag_binary.Uint128

	// precision: token mint precision
	IfFee uint64
}

func (obj LiquidateSpotRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetMarketIndex` param:
	err = encoder.Encode(obj.AssetMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `AssetPrice` param:
	err = encoder.Encode(obj.AssetPrice)
	if err != nil {
		return err
	}
	// Serialize `AssetTransfer` param:
	err = encoder.Encode(obj.AssetTransfer)
	if err != nil {
		return err
	}
	// Serialize `LiabilityMarketIndex` param:
	err = encoder.Encode(obj.LiabilityMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `LiabilityPrice` param:
	err = encoder.Encode(obj.LiabilityPrice)
	if err != nil {
		return err
	}
	// Serialize `LiabilityTransfer` param:
	err = encoder.Encode(obj.LiabilityTransfer)
	if err != nil {
		return err
	}
	// Serialize `IfFee` param:
	err = encoder.Encode(obj.IfFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidateSpotRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetMarketIndex`:
	err = decoder.Decode(&obj.AssetMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `AssetPrice`:
	err = decoder.Decode(&obj.AssetPrice)
	if err != nil {
		return err
	}
	// Deserialize `AssetTransfer`:
	err = decoder.Decode(&obj.AssetTransfer)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityMarketIndex`:
	err = decoder.Decode(&obj.LiabilityMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityPrice`:
	err = decoder.Decode(&obj.LiabilityPrice)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityTransfer`:
	err = decoder.Decode(&obj.LiabilityTransfer)
	if err != nil {
		return err
	}
	// Deserialize `IfFee`:
	err = decoder.Decode(&obj.IfFee)
	if err != nil {
		return err
	}
	return nil
}

type LiquidateBorrowForPerpPnlRecord struct {
	PerpMarketIndex      uint16
	MarketOraclePrice    int64
	PnlTransfer          ag_binary.Uint128
	LiabilityMarketIndex uint16
	LiabilityPrice       int64
	LiabilityTransfer    ag_binary.Uint128
}

func (obj LiquidateBorrowForPerpPnlRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `MarketOraclePrice` param:
	err = encoder.Encode(obj.MarketOraclePrice)
	if err != nil {
		return err
	}
	// Serialize `PnlTransfer` param:
	err = encoder.Encode(obj.PnlTransfer)
	if err != nil {
		return err
	}
	// Serialize `LiabilityMarketIndex` param:
	err = encoder.Encode(obj.LiabilityMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `LiabilityPrice` param:
	err = encoder.Encode(obj.LiabilityPrice)
	if err != nil {
		return err
	}
	// Serialize `LiabilityTransfer` param:
	err = encoder.Encode(obj.LiabilityTransfer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidateBorrowForPerpPnlRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `MarketOraclePrice`:
	err = decoder.Decode(&obj.MarketOraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `PnlTransfer`:
	err = decoder.Decode(&obj.PnlTransfer)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityMarketIndex`:
	err = decoder.Decode(&obj.LiabilityMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityPrice`:
	err = decoder.Decode(&obj.LiabilityPrice)
	if err != nil {
		return err
	}
	// Deserialize `LiabilityTransfer`:
	err = decoder.Decode(&obj.LiabilityTransfer)
	if err != nil {
		return err
	}
	return nil
}

type LiquidatePerpPnlForDepositRecord struct {
	PerpMarketIndex   uint16
	MarketOraclePrice int64
	PnlTransfer       ag_binary.Uint128
	AssetMarketIndex  uint16
	AssetPrice        int64
	AssetTransfer     ag_binary.Uint128
}

func (obj LiquidatePerpPnlForDepositRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `MarketOraclePrice` param:
	err = encoder.Encode(obj.MarketOraclePrice)
	if err != nil {
		return err
	}
	// Serialize `PnlTransfer` param:
	err = encoder.Encode(obj.PnlTransfer)
	if err != nil {
		return err
	}
	// Serialize `AssetMarketIndex` param:
	err = encoder.Encode(obj.AssetMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `AssetPrice` param:
	err = encoder.Encode(obj.AssetPrice)
	if err != nil {
		return err
	}
	// Serialize `AssetTransfer` param:
	err = encoder.Encode(obj.AssetTransfer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidatePerpPnlForDepositRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `MarketOraclePrice`:
	err = decoder.Decode(&obj.MarketOraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `PnlTransfer`:
	err = decoder.Decode(&obj.PnlTransfer)
	if err != nil {
		return err
	}
	// Deserialize `AssetMarketIndex`:
	err = decoder.Decode(&obj.AssetMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `AssetPrice`:
	err = decoder.Decode(&obj.AssetPrice)
	if err != nil {
		return err
	}
	// Deserialize `AssetTransfer`:
	err = decoder.Decode(&obj.AssetTransfer)
	if err != nil {
		return err
	}
	return nil
}

type PerpBankruptcyRecord struct {
	MarketIndex                uint16
	Pnl                        ag_binary.Int128
	IfPayment                  ag_binary.Uint128
	ClawbackUser               *ag_solanago.PublicKey `bin:"optional"`
	ClawbackUserPayment        *ag_binary.Uint128     `bin:"optional"`
	CumulativeFundingRateDelta ag_binary.Int128
}

func (obj PerpBankruptcyRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Pnl` param:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return err
	}
	// Serialize `IfPayment` param:
	err = encoder.Encode(obj.IfPayment)
	if err != nil {
		return err
	}
	// Serialize `ClawbackUser` param (optional):
	{
		if obj.ClawbackUser == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClawbackUser)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ClawbackUserPayment` param (optional):
	{
		if obj.ClawbackUserPayment == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClawbackUserPayment)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CumulativeFundingRateDelta` param:
	err = encoder.Encode(obj.CumulativeFundingRateDelta)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PerpBankruptcyRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return err
	}
	// Deserialize `IfPayment`:
	err = decoder.Decode(&obj.IfPayment)
	if err != nil {
		return err
	}
	// Deserialize `ClawbackUser` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClawbackUser)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ClawbackUserPayment` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClawbackUserPayment)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CumulativeFundingRateDelta`:
	err = decoder.Decode(&obj.CumulativeFundingRateDelta)
	if err != nil {
		return err
	}
	return nil
}

type SpotBankruptcyRecord struct {
	MarketIndex                    uint16
	BorrowAmount                   ag_binary.Uint128
	IfPayment                      ag_binary.Uint128
	CumulativeDepositInterestDelta ag_binary.Uint128
}

func (obj SpotBankruptcyRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `BorrowAmount` param:
	err = encoder.Encode(obj.BorrowAmount)
	if err != nil {
		return err
	}
	// Serialize `IfPayment` param:
	err = encoder.Encode(obj.IfPayment)
	if err != nil {
		return err
	}
	// Serialize `CumulativeDepositInterestDelta` param:
	err = encoder.Encode(obj.CumulativeDepositInterestDelta)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SpotBankruptcyRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `BorrowAmount`:
	err = decoder.Decode(&obj.BorrowAmount)
	if err != nil {
		return err
	}
	// Deserialize `IfPayment`:
	err = decoder.Decode(&obj.IfPayment)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeDepositInterestDelta`:
	err = decoder.Decode(&obj.CumulativeDepositInterestDelta)
	if err != nil {
		return err
	}
	return nil
}

type MarketIdentifier struct {
	MarketType  MarketType
	MarketIndex uint16
}

func (obj MarketIdentifier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketType` param:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketIdentifier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

type HistoricalOracleData struct {
	// precision: PRICE_PRECISION
	LastOraclePrice int64

	// precision: PRICE_PRECISION
	LastOracleConf uint64

	// number of slots since last update
	LastOracleDelay int64

	// precision: PRICE_PRECISION
	LastOraclePriceTwap int64

	// precision: PRICE_PRECISION
	LastOraclePriceTwap5Min int64

	// unix_timestamp of last snapshot
	LastOraclePriceTwapTs int64
}

func (obj HistoricalOracleData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastOraclePrice` param:
	err = encoder.Encode(obj.LastOraclePrice)
	if err != nil {
		return err
	}
	// Serialize `LastOracleConf` param:
	err = encoder.Encode(obj.LastOracleConf)
	if err != nil {
		return err
	}
	// Serialize `LastOracleDelay` param:
	err = encoder.Encode(obj.LastOracleDelay)
	if err != nil {
		return err
	}
	// Serialize `LastOraclePriceTwap` param:
	err = encoder.Encode(obj.LastOraclePriceTwap)
	if err != nil {
		return err
	}
	// Serialize `LastOraclePriceTwap5Min` param:
	err = encoder.Encode(obj.LastOraclePriceTwap5Min)
	if err != nil {
		return err
	}
	// Serialize `LastOraclePriceTwapTs` param:
	err = encoder.Encode(obj.LastOraclePriceTwapTs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HistoricalOracleData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastOraclePrice`:
	err = decoder.Decode(&obj.LastOraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleConf`:
	err = decoder.Decode(&obj.LastOracleConf)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleDelay`:
	err = decoder.Decode(&obj.LastOracleDelay)
	if err != nil {
		return err
	}
	// Deserialize `LastOraclePriceTwap`:
	err = decoder.Decode(&obj.LastOraclePriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastOraclePriceTwap5Min`:
	err = decoder.Decode(&obj.LastOraclePriceTwap5Min)
	if err != nil {
		return err
	}
	// Deserialize `LastOraclePriceTwapTs`:
	err = decoder.Decode(&obj.LastOraclePriceTwapTs)
	if err != nil {
		return err
	}
	return nil
}

type HistoricalIndexData struct {
	// precision: PRICE_PRECISION
	LastIndexBidPrice uint64

	// precision: PRICE_PRECISION
	LastIndexAskPrice uint64

	// precision: PRICE_PRECISION
	LastIndexPriceTwap uint64

	// precision: PRICE_PRECISION
	LastIndexPriceTwap5Min uint64

	// unix_timestamp of last snapshot
	LastIndexPriceTwapTs int64
}

func (obj HistoricalIndexData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastIndexBidPrice` param:
	err = encoder.Encode(obj.LastIndexBidPrice)
	if err != nil {
		return err
	}
	// Serialize `LastIndexAskPrice` param:
	err = encoder.Encode(obj.LastIndexAskPrice)
	if err != nil {
		return err
	}
	// Serialize `LastIndexPriceTwap` param:
	err = encoder.Encode(obj.LastIndexPriceTwap)
	if err != nil {
		return err
	}
	// Serialize `LastIndexPriceTwap5Min` param:
	err = encoder.Encode(obj.LastIndexPriceTwap5Min)
	if err != nil {
		return err
	}
	// Serialize `LastIndexPriceTwapTs` param:
	err = encoder.Encode(obj.LastIndexPriceTwapTs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HistoricalIndexData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastIndexBidPrice`:
	err = decoder.Decode(&obj.LastIndexBidPrice)
	if err != nil {
		return err
	}
	// Deserialize `LastIndexAskPrice`:
	err = decoder.Decode(&obj.LastIndexAskPrice)
	if err != nil {
		return err
	}
	// Deserialize `LastIndexPriceTwap`:
	err = decoder.Decode(&obj.LastIndexPriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastIndexPriceTwap5Min`:
	err = decoder.Decode(&obj.LastIndexPriceTwap5Min)
	if err != nil {
		return err
	}
	// Deserialize `LastIndexPriceTwapTs`:
	err = decoder.Decode(&obj.LastIndexPriceTwapTs)
	if err != nil {
		return err
	}
	return nil
}

type PrelaunchOracleParams struct {
	PerpMarketIndex uint16
	Price           *int64 `bin:"optional"`
	MaxPrice        *int64 `bin:"optional"`
}

func (obj PrelaunchOracleParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Price` param (optional):
	{
		if obj.Price == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Price)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxPrice` param (optional):
	{
		if obj.MaxPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *PrelaunchOracleParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Price` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Price)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type OrderParams struct {
	OrderType         OrderType
	MarketType        MarketType
	Direction         PositionDirection
	UserOrderId       uint8
	BaseAssetAmount   uint64
	Price             uint64
	MarketIndex       uint16
	ReduceOnly        bool
	PostOnly          PostOnlyParam
	ImmediateOrCancel bool
	MaxTs             *int64  `bin:"optional"`
	TriggerPrice      *uint64 `bin:"optional"`
	TriggerCondition  OrderTriggerCondition
	OraclePriceOffset *int32 `bin:"optional"`
	AuctionDuration   *uint8 `bin:"optional"`
	AuctionStartPrice *int64 `bin:"optional"`
	AuctionEndPrice   *int64 `bin:"optional"`
}

func (obj OrderParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `MarketType` param:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return err
	}
	// Serialize `Direction` param:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return err
	}
	// Serialize `UserOrderId` param:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `ReduceOnly` param:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return err
	}
	// Serialize `PostOnly` param:
	err = encoder.Encode(obj.PostOnly)
	if err != nil {
		return err
	}
	// Serialize `ImmediateOrCancel` param:
	err = encoder.Encode(obj.ImmediateOrCancel)
	if err != nil {
		return err
	}
	// Serialize `MaxTs` param (optional):
	{
		if obj.MaxTs == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxTs)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TriggerPrice` param (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TriggerCondition` param:
	err = encoder.Encode(obj.TriggerCondition)
	if err != nil {
		return err
	}
	// Serialize `OraclePriceOffset` param (optional):
	{
		if obj.OraclePriceOffset == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.OraclePriceOffset)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionDuration` param (optional):
	{
		if obj.AuctionDuration == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionDuration)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionStartPrice` param (optional):
	{
		if obj.AuctionStartPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionStartPrice)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionEndPrice` param (optional):
	{
		if obj.AuctionEndPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionEndPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OrderParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return err
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return err
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return err
	}
	// Deserialize `PostOnly`:
	err = decoder.Decode(&obj.PostOnly)
	if err != nil {
		return err
	}
	// Deserialize `ImmediateOrCancel`:
	err = decoder.Decode(&obj.ImmediateOrCancel)
	if err != nil {
		return err
	}
	// Deserialize `MaxTs` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxTs)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TriggerCondition`:
	err = decoder.Decode(&obj.TriggerCondition)
	if err != nil {
		return err
	}
	// Deserialize `OraclePriceOffset` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.OraclePriceOffset)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionDuration` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionDuration)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionStartPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionStartPrice)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionEndPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionEndPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ModifyOrderParams struct {
	Direction         *PositionDirection     `bin:"optional"`
	BaseAssetAmount   *uint64                `bin:"optional"`
	Price             *uint64                `bin:"optional"`
	ReduceOnly        *bool                  `bin:"optional"`
	PostOnly          *PostOnlyParam         `bin:"optional"`
	ImmediateOrCancel *bool                  `bin:"optional"`
	MaxTs             *int64                 `bin:"optional"`
	TriggerPrice      *uint64                `bin:"optional"`
	TriggerCondition  *OrderTriggerCondition `bin:"optional"`
	OraclePriceOffset *int32                 `bin:"optional"`
	AuctionDuration   *uint8                 `bin:"optional"`
	AuctionStartPrice *int64                 `bin:"optional"`
	AuctionEndPrice   *int64                 `bin:"optional"`
	Policy            *ModifyOrderPolicy     `bin:"optional"`
}

func (obj ModifyOrderParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Direction` param (optional):
	{
		if obj.Direction == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Direction)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BaseAssetAmount` param (optional):
	{
		if obj.BaseAssetAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Price` param (optional):
	{
		if obj.Price == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Price)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ReduceOnly` param (optional):
	{
		if obj.ReduceOnly == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ReduceOnly)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PostOnly` param (optional):
	{
		if obj.PostOnly == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PostOnly)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ImmediateOrCancel` param (optional):
	{
		if obj.ImmediateOrCancel == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ImmediateOrCancel)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxTs` param (optional):
	{
		if obj.MaxTs == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxTs)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TriggerPrice` param (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TriggerCondition` param (optional):
	{
		if obj.TriggerCondition == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TriggerCondition)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `OraclePriceOffset` param (optional):
	{
		if obj.OraclePriceOffset == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.OraclePriceOffset)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionDuration` param (optional):
	{
		if obj.AuctionDuration == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionDuration)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionStartPrice` param (optional):
	{
		if obj.AuctionStartPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionStartPrice)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AuctionEndPrice` param (optional):
	{
		if obj.AuctionEndPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuctionEndPrice)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Policy` param (optional):
	{
		if obj.Policy == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Policy)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ModifyOrderParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Direction` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Direction)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Price` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Price)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ReduceOnly` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ReduceOnly)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PostOnly` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PostOnly)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ImmediateOrCancel` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ImmediateOrCancel)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxTs` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxTs)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TriggerCondition` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TriggerCondition)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `OraclePriceOffset` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.OraclePriceOffset)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionDuration` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionDuration)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionStartPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionStartPrice)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AuctionEndPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuctionEndPrice)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Policy` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Policy)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InsuranceClaim struct {
	// The amount of revenue last settled
	// Positive if funds left the perp market,
	// negative if funds were pulled into the perp market
	// precision: QUOTE_PRECISION
	RevenueWithdrawSinceLastSettle int64

	// The max amount of revenue that can be withdrawn per period
	// precision: QUOTE_PRECISION
	MaxRevenueWithdrawPerPeriod uint64

	// The max amount of insurance that perp market can use to resolve bankruptcy and pnl deficits
	// precision: QUOTE_PRECISION
	QuoteMaxInsurance uint64

	// The amount of insurance that has been used to resolve bankruptcy and pnl deficits
	// precision: QUOTE_PRECISION
	QuoteSettledInsurance uint64

	// The last time revenue was settled in/out of market
	LastRevenueWithdrawTs int64
}

func (obj InsuranceClaim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RevenueWithdrawSinceLastSettle` param:
	err = encoder.Encode(obj.RevenueWithdrawSinceLastSettle)
	if err != nil {
		return err
	}
	// Serialize `MaxRevenueWithdrawPerPeriod` param:
	err = encoder.Encode(obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `QuoteMaxInsurance` param:
	err = encoder.Encode(obj.QuoteMaxInsurance)
	if err != nil {
		return err
	}
	// Serialize `QuoteSettledInsurance` param:
	err = encoder.Encode(obj.QuoteSettledInsurance)
	if err != nil {
		return err
	}
	// Serialize `LastRevenueWithdrawTs` param:
	err = encoder.Encode(obj.LastRevenueWithdrawTs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceClaim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RevenueWithdrawSinceLastSettle`:
	err = decoder.Decode(&obj.RevenueWithdrawSinceLastSettle)
	if err != nil {
		return err
	}
	// Deserialize `MaxRevenueWithdrawPerPeriod`:
	err = decoder.Decode(&obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMaxInsurance`:
	err = decoder.Decode(&obj.QuoteMaxInsurance)
	if err != nil {
		return err
	}
	// Deserialize `QuoteSettledInsurance`:
	err = decoder.Decode(&obj.QuoteSettledInsurance)
	if err != nil {
		return err
	}
	// Deserialize `LastRevenueWithdrawTs`:
	err = decoder.Decode(&obj.LastRevenueWithdrawTs)
	if err != nil {
		return err
	}
	return nil
}

type PoolBalance struct {
	// To get the pool's token amount, you must multiply the scaled balance by the market's cumulative
	// deposit interest
	// precision: SPOT_BALANCE_PRECISION
	ScaledBalance ag_binary.Uint128

	// The spot market the pool is for
	MarketIndex uint16
	Padding     [6]uint8
}

func (obj PoolBalance) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ScaledBalance` param:
	err = encoder.Encode(obj.ScaledBalance)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolBalance) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ScaledBalance`:
	err = decoder.Decode(&obj.ScaledBalance)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type AMM struct {
	// oracle price data public key
	Oracle ag_solanago.PublicKey

	// stores historically witnessed oracle data
	HistoricalOracleData HistoricalOracleData

	// accumulated base asset amount since inception per lp share
	// precision: QUOTE_PRECISION
	BaseAssetAmountPerLp ag_binary.Int128

	// accumulated quote asset amount since inception per lp share
	// precision: QUOTE_PRECISION
	QuoteAssetAmountPerLp ag_binary.Int128

	// partition of fees from perp market trading moved from pnl settlements
	FeePool PoolBalance

	// `x` reserves for constant product mm formula (x * y = k)
	// precision: AMM_RESERVE_PRECISION
	BaseAssetReserve ag_binary.Uint128

	// `y` reserves for constant product mm formula (x * y = k)
	// precision: AMM_RESERVE_PRECISION
	QuoteAssetReserve ag_binary.Uint128

	// determines how close the min/max base asset reserve sit vs base reserves
	// allow for decreasing slippage without increasing liquidity and v.v.
	// precision: PERCENTAGE_PRECISION
	ConcentrationCoef ag_binary.Uint128

	// minimum base_asset_reserve allowed before AMM is unavailable
	// precision: AMM_RESERVE_PRECISION
	MinBaseAssetReserve ag_binary.Uint128

	// maximum base_asset_reserve allowed before AMM is unavailable
	// precision: AMM_RESERVE_PRECISION
	MaxBaseAssetReserve ag_binary.Uint128

	// `sqrt(k)` in constant product mm formula (x * y = k). stored to avoid drift caused by integer math issues
	// precision: AMM_RESERVE_PRECISION
	SqrtK ag_binary.Uint128

	// normalizing numerical factor for y, its use offers lowest slippage in cp-curve when market is balanced
	// precision: PEG_PRECISION
	PegMultiplier ag_binary.Uint128

	// y when market is balanced. stored to save computation
	// precision: AMM_RESERVE_PRECISION
	TerminalQuoteAssetReserve ag_binary.Uint128

	// always non-negative. tracks number of total longs in market (regardless of counterparty)
	// precision: BASE_PRECISION
	BaseAssetAmountLong ag_binary.Int128

	// always non-positive. tracks number of total shorts in market (regardless of counterparty)
	// precision: BASE_PRECISION
	BaseAssetAmountShort ag_binary.Int128

	// tracks net position (longs-shorts) in market with AMM as counterparty
	// precision: BASE_PRECISION
	BaseAssetAmountWithAmm ag_binary.Int128

	// tracks net position (longs-shorts) in market with LPs as counterparty
	// precision: BASE_PRECISION
	BaseAssetAmountWithUnsettledLp ag_binary.Int128

	// max allowed open interest, blocks trades that breach this value
	// precision: BASE_PRECISION
	MaxOpenInterest ag_binary.Uint128

	// sum of all user's perp quote_asset_amount in market
	// precision: QUOTE_PRECISION
	QuoteAssetAmount ag_binary.Int128

	// sum of all long user's quote_entry_amount in market
	// precision: QUOTE_PRECISION
	QuoteEntryAmountLong ag_binary.Int128

	// sum of all short user's quote_entry_amount in market
	// precision: QUOTE_PRECISION
	QuoteEntryAmountShort ag_binary.Int128

	// sum of all long user's quote_break_even_amount in market
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmountLong ag_binary.Int128

	// sum of all short user's quote_break_even_amount in market
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmountShort ag_binary.Int128

	// total user lp shares of sqrt_k (protocol owned liquidity = sqrt_k - last_funding_rate)
	// precision: AMM_RESERVE_PRECISION
	UserLpShares ag_binary.Uint128

	// last funding rate in this perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	LastFundingRate int64

	// last funding rate for longs in this perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	LastFundingRateLong int64

	// last funding rate for shorts in this perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	LastFundingRateShort int64

	// estimate of last 24h of funding rate perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	Last24HAvgFundingRate int64

	// total fees collected by this perp market
	// precision: QUOTE_PRECISION
	TotalFee ag_binary.Int128

	// total fees collected by the vAMM's bid/ask spread
	// precision: QUOTE_PRECISION
	TotalMmFee ag_binary.Int128

	// total fees collected by exchange fee schedule
	// precision: QUOTE_PRECISION
	TotalExchangeFee ag_binary.Uint128

	// total fees minus any recognized upnl and pool withdraws
	// precision: QUOTE_PRECISION
	TotalFeeMinusDistributions ag_binary.Int128

	// sum of all fees from fee pool withdrawn to revenue pool
	// precision: QUOTE_PRECISION
	TotalFeeWithdrawn ag_binary.Uint128

	// all fees collected by market for liquidations
	// precision: QUOTE_PRECISION
	TotalLiquidationFee ag_binary.Uint128

	// accumulated funding rate for longs since inception in market
	CumulativeFundingRateLong ag_binary.Int128

	// accumulated funding rate for shorts since inception in market
	CumulativeFundingRateShort ag_binary.Int128

	// accumulated social loss paid by users since inception in market
	TotalSocialLoss ag_binary.Uint128

	// transformed base_asset_reserve for users going long
	// precision: AMM_RESERVE_PRECISION
	AskBaseAssetReserve ag_binary.Uint128

	// transformed quote_asset_reserve for users going long
	// precision: AMM_RESERVE_PRECISION
	AskQuoteAssetReserve ag_binary.Uint128

	// transformed base_asset_reserve for users going short
	// precision: AMM_RESERVE_PRECISION
	BidBaseAssetReserve ag_binary.Uint128

	// transformed quote_asset_reserve for users going short
	// precision: AMM_RESERVE_PRECISION
	BidQuoteAssetReserve ag_binary.Uint128

	// the last seen oracle price partially shrunk toward the amm reserve price
	// precision: PRICE_PRECISION
	LastOracleNormalisedPrice int64

	// the gap between the oracle price and the reserve price = y * peg_multiplier / x
	LastOracleReservePriceSpreadPct int64

	// average estimate of bid price over funding_period
	// precision: PRICE_PRECISION
	LastBidPriceTwap uint64

	// average estimate of ask price over funding_period
	// precision: PRICE_PRECISION
	LastAskPriceTwap uint64

	// average estimate of (bid+ask)/2 price over funding_period
	// precision: PRICE_PRECISION
	LastMarkPriceTwap uint64

	// average estimate of (bid+ask)/2 price over FIVE_MINUTES
	LastMarkPriceTwap5Min uint64

	// the last blockchain slot the amm was updated
	LastUpdateSlot uint64

	// the pct size of the oracle confidence interval
	// precision: PERCENTAGE_PRECISION
	LastOracleConfPct uint64

	// the total_fee_minus_distribution change since the last funding update
	// precision: QUOTE_PRECISION
	NetRevenueSinceLastFunding int64

	// the last funding rate update unix_timestamp
	LastFundingRateTs int64

	// the peridocity of the funding rate updates
	FundingPeriod int64

	// the base step size (increment) of orders
	// precision: BASE_PRECISION
	OrderStepSize uint64

	// the price tick size of orders
	// precision: PRICE_PRECISION
	OrderTickSize uint64

	// the minimum base size of an order
	// precision: BASE_PRECISION
	MinOrderSize uint64

	// the max base size a single user can have
	// precision: BASE_PRECISION
	MaxPositionSize uint64

	// estimated total of volume in market
	// QUOTE_PRECISION
	Volume24H uint64

	// the volume intensity of long fills against AMM
	LongIntensityVolume uint64

	// the volume intensity of short fills against AMM
	ShortIntensityVolume uint64

	// the blockchain unix timestamp at the time of the last trade
	LastTradeTs int64

	// estimate of standard deviation of the fill (mark) prices
	// precision: PRICE_PRECISION
	MarkStd uint64

	// estimate of standard deviation of the oracle price at each update
	// precision: PRICE_PRECISION
	OracleStd uint64

	// the last unix_timestamp the mark twap was updated
	LastMarkPriceTwapTs int64

	// the minimum spread the AMM can quote. also used as step size for some spread logic increases.
	BaseSpread uint32

	// the maximum spread the AMM can quote
	MaxSpread uint32

	// the spread for asks vs the reserve price
	LongSpread uint32

	// the spread for bids vs the reserve price
	ShortSpread uint32

	// the count intensity of long fills against AMM
	LongIntensityCount uint32

	// the count intensity of short fills against AMM
	ShortIntensityCount uint32

	// the fraction of total available liquidity a single fill on the AMM can consume
	MaxFillReserveFraction uint16

	// the maximum slippage a single fill on the AMM can push
	MaxSlippageRatio uint16

	// the update intensity of AMM formulaic updates (adjusting k). 0-100
	CurveUpdateIntensity uint8

	// the jit intensity of AMM. larger intensity means larger participation in jit. 0 means no jit participation.
	// (0, 100] is intensity for protocol-owned AMM. (100, 200] is intensity for user LP-owned AMM.
	AmmJitIntensity uint8

	// the oracle provider information. used to decode/scale the oracle public key
	OracleSource OracleSource

	// tracks whether the oracle was considered valid at the last AMM update
	LastOracleValid bool

	// the target value for `base_asset_amount_per_lp`, used during AMM JIT with LP split
	// precision: BASE_PRECISION
	TargetBaseAssetAmountPerLp int32

	// expo for unit of per_lp, base 10 (if per_lp_base=X, then per_lp unit is 10^X)
	PerLpBase                       int8
	Padding1                        uint8
	Padding2                        uint16
	TotalFeeEarnedPerLp             uint64
	NetUnsettledFundingPnl          int64
	QuoteAssetAmountWithUnsettledLp int64
	ReferencePriceOffset            int32
	Padding                         [12]uint8
}

func (obj AMM) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `HistoricalOracleData` param:
	err = encoder.Encode(obj.HistoricalOracleData)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountPerLp` param:
	err = encoder.Encode(obj.BaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmountPerLp` param:
	err = encoder.Encode(obj.QuoteAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Serialize `FeePool` param:
	err = encoder.Encode(obj.FeePool)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetReserve` param:
	err = encoder.Encode(obj.BaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetReserve` param:
	err = encoder.Encode(obj.QuoteAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `ConcentrationCoef` param:
	err = encoder.Encode(obj.ConcentrationCoef)
	if err != nil {
		return err
	}
	// Serialize `MinBaseAssetReserve` param:
	err = encoder.Encode(obj.MinBaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseAssetReserve` param:
	err = encoder.Encode(obj.MaxBaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `SqrtK` param:
	err = encoder.Encode(obj.SqrtK)
	if err != nil {
		return err
	}
	// Serialize `PegMultiplier` param:
	err = encoder.Encode(obj.PegMultiplier)
	if err != nil {
		return err
	}
	// Serialize `TerminalQuoteAssetReserve` param:
	err = encoder.Encode(obj.TerminalQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountLong` param:
	err = encoder.Encode(obj.BaseAssetAmountLong)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountShort` param:
	err = encoder.Encode(obj.BaseAssetAmountShort)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountWithAmm` param:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountWithUnsettledLp` param:
	err = encoder.Encode(obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	// Serialize `MaxOpenInterest` param:
	err = encoder.Encode(obj.MaxOpenInterest)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmount` param:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteEntryAmountLong` param:
	err = encoder.Encode(obj.QuoteEntryAmountLong)
	if err != nil {
		return err
	}
	// Serialize `QuoteEntryAmountShort` param:
	err = encoder.Encode(obj.QuoteEntryAmountShort)
	if err != nil {
		return err
	}
	// Serialize `QuoteBreakEvenAmountLong` param:
	err = encoder.Encode(obj.QuoteBreakEvenAmountLong)
	if err != nil {
		return err
	}
	// Serialize `QuoteBreakEvenAmountShort` param:
	err = encoder.Encode(obj.QuoteBreakEvenAmountShort)
	if err != nil {
		return err
	}
	// Serialize `UserLpShares` param:
	err = encoder.Encode(obj.UserLpShares)
	if err != nil {
		return err
	}
	// Serialize `LastFundingRate` param:
	err = encoder.Encode(obj.LastFundingRate)
	if err != nil {
		return err
	}
	// Serialize `LastFundingRateLong` param:
	err = encoder.Encode(obj.LastFundingRateLong)
	if err != nil {
		return err
	}
	// Serialize `LastFundingRateShort` param:
	err = encoder.Encode(obj.LastFundingRateShort)
	if err != nil {
		return err
	}
	// Serialize `Last24HAvgFundingRate` param:
	err = encoder.Encode(obj.Last24HAvgFundingRate)
	if err != nil {
		return err
	}
	// Serialize `TotalFee` param:
	err = encoder.Encode(obj.TotalFee)
	if err != nil {
		return err
	}
	// Serialize `TotalMmFee` param:
	err = encoder.Encode(obj.TotalMmFee)
	if err != nil {
		return err
	}
	// Serialize `TotalExchangeFee` param:
	err = encoder.Encode(obj.TotalExchangeFee)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeMinusDistributions` param:
	err = encoder.Encode(obj.TotalFeeMinusDistributions)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeWithdrawn` param:
	err = encoder.Encode(obj.TotalFeeWithdrawn)
	if err != nil {
		return err
	}
	// Serialize `TotalLiquidationFee` param:
	err = encoder.Encode(obj.TotalLiquidationFee)
	if err != nil {
		return err
	}
	// Serialize `CumulativeFundingRateLong` param:
	err = encoder.Encode(obj.CumulativeFundingRateLong)
	if err != nil {
		return err
	}
	// Serialize `CumulativeFundingRateShort` param:
	err = encoder.Encode(obj.CumulativeFundingRateShort)
	if err != nil {
		return err
	}
	// Serialize `TotalSocialLoss` param:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Serialize `AskBaseAssetReserve` param:
	err = encoder.Encode(obj.AskBaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `AskQuoteAssetReserve` param:
	err = encoder.Encode(obj.AskQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `BidBaseAssetReserve` param:
	err = encoder.Encode(obj.BidBaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `BidQuoteAssetReserve` param:
	err = encoder.Encode(obj.BidQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `LastOracleNormalisedPrice` param:
	err = encoder.Encode(obj.LastOracleNormalisedPrice)
	if err != nil {
		return err
	}
	// Serialize `LastOracleReservePriceSpreadPct` param:
	err = encoder.Encode(obj.LastOracleReservePriceSpreadPct)
	if err != nil {
		return err
	}
	// Serialize `LastBidPriceTwap` param:
	err = encoder.Encode(obj.LastBidPriceTwap)
	if err != nil {
		return err
	}
	// Serialize `LastAskPriceTwap` param:
	err = encoder.Encode(obj.LastAskPriceTwap)
	if err != nil {
		return err
	}
	// Serialize `LastMarkPriceTwap` param:
	err = encoder.Encode(obj.LastMarkPriceTwap)
	if err != nil {
		return err
	}
	// Serialize `LastMarkPriceTwap5Min` param:
	err = encoder.Encode(obj.LastMarkPriceTwap5Min)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateSlot` param:
	err = encoder.Encode(obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Serialize `LastOracleConfPct` param:
	err = encoder.Encode(obj.LastOracleConfPct)
	if err != nil {
		return err
	}
	// Serialize `NetRevenueSinceLastFunding` param:
	err = encoder.Encode(obj.NetRevenueSinceLastFunding)
	if err != nil {
		return err
	}
	// Serialize `LastFundingRateTs` param:
	err = encoder.Encode(obj.LastFundingRateTs)
	if err != nil {
		return err
	}
	// Serialize `FundingPeriod` param:
	err = encoder.Encode(obj.FundingPeriod)
	if err != nil {
		return err
	}
	// Serialize `OrderStepSize` param:
	err = encoder.Encode(obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Serialize `OrderTickSize` param:
	err = encoder.Encode(obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Serialize `MinOrderSize` param:
	err = encoder.Encode(obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Serialize `MaxPositionSize` param:
	err = encoder.Encode(obj.MaxPositionSize)
	if err != nil {
		return err
	}
	// Serialize `Volume24H` param:
	err = encoder.Encode(obj.Volume24H)
	if err != nil {
		return err
	}
	// Serialize `LongIntensityVolume` param:
	err = encoder.Encode(obj.LongIntensityVolume)
	if err != nil {
		return err
	}
	// Serialize `ShortIntensityVolume` param:
	err = encoder.Encode(obj.ShortIntensityVolume)
	if err != nil {
		return err
	}
	// Serialize `LastTradeTs` param:
	err = encoder.Encode(obj.LastTradeTs)
	if err != nil {
		return err
	}
	// Serialize `MarkStd` param:
	err = encoder.Encode(obj.MarkStd)
	if err != nil {
		return err
	}
	// Serialize `OracleStd` param:
	err = encoder.Encode(obj.OracleStd)
	if err != nil {
		return err
	}
	// Serialize `LastMarkPriceTwapTs` param:
	err = encoder.Encode(obj.LastMarkPriceTwapTs)
	if err != nil {
		return err
	}
	// Serialize `BaseSpread` param:
	err = encoder.Encode(obj.BaseSpread)
	if err != nil {
		return err
	}
	// Serialize `MaxSpread` param:
	err = encoder.Encode(obj.MaxSpread)
	if err != nil {
		return err
	}
	// Serialize `LongSpread` param:
	err = encoder.Encode(obj.LongSpread)
	if err != nil {
		return err
	}
	// Serialize `ShortSpread` param:
	err = encoder.Encode(obj.ShortSpread)
	if err != nil {
		return err
	}
	// Serialize `LongIntensityCount` param:
	err = encoder.Encode(obj.LongIntensityCount)
	if err != nil {
		return err
	}
	// Serialize `ShortIntensityCount` param:
	err = encoder.Encode(obj.ShortIntensityCount)
	if err != nil {
		return err
	}
	// Serialize `MaxFillReserveFraction` param:
	err = encoder.Encode(obj.MaxFillReserveFraction)
	if err != nil {
		return err
	}
	// Serialize `MaxSlippageRatio` param:
	err = encoder.Encode(obj.MaxSlippageRatio)
	if err != nil {
		return err
	}
	// Serialize `CurveUpdateIntensity` param:
	err = encoder.Encode(obj.CurveUpdateIntensity)
	if err != nil {
		return err
	}
	// Serialize `AmmJitIntensity` param:
	err = encoder.Encode(obj.AmmJitIntensity)
	if err != nil {
		return err
	}
	// Serialize `OracleSource` param:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return err
	}
	// Serialize `LastOracleValid` param:
	err = encoder.Encode(obj.LastOracleValid)
	if err != nil {
		return err
	}
	// Serialize `TargetBaseAssetAmountPerLp` param:
	err = encoder.Encode(obj.TargetBaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Serialize `PerLpBase` param:
	err = encoder.Encode(obj.PerLpBase)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeEarnedPerLp` param:
	err = encoder.Encode(obj.TotalFeeEarnedPerLp)
	if err != nil {
		return err
	}
	// Serialize `NetUnsettledFundingPnl` param:
	err = encoder.Encode(obj.NetUnsettledFundingPnl)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmountWithUnsettledLp` param:
	err = encoder.Encode(obj.QuoteAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	// Serialize `ReferencePriceOffset` param:
	err = encoder.Encode(obj.ReferencePriceOffset)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AMM) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `HistoricalOracleData`:
	err = decoder.Decode(&obj.HistoricalOracleData)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.BaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmountPerLp`:
	err = decoder.Decode(&obj.QuoteAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Deserialize `FeePool`:
	err = decoder.Decode(&obj.FeePool)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetReserve`:
	err = decoder.Decode(&obj.BaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetReserve`:
	err = decoder.Decode(&obj.QuoteAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `ConcentrationCoef`:
	err = decoder.Decode(&obj.ConcentrationCoef)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseAssetReserve`:
	err = decoder.Decode(&obj.MinBaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseAssetReserve`:
	err = decoder.Decode(&obj.MaxBaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `SqrtK`:
	err = decoder.Decode(&obj.SqrtK)
	if err != nil {
		return err
	}
	// Deserialize `PegMultiplier`:
	err = decoder.Decode(&obj.PegMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `TerminalQuoteAssetReserve`:
	err = decoder.Decode(&obj.TerminalQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountLong`:
	err = decoder.Decode(&obj.BaseAssetAmountLong)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountShort`:
	err = decoder.Decode(&obj.BaseAssetAmountShort)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	// Deserialize `MaxOpenInterest`:
	err = decoder.Decode(&obj.MaxOpenInterest)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteEntryAmountLong`:
	err = decoder.Decode(&obj.QuoteEntryAmountLong)
	if err != nil {
		return err
	}
	// Deserialize `QuoteEntryAmountShort`:
	err = decoder.Decode(&obj.QuoteEntryAmountShort)
	if err != nil {
		return err
	}
	// Deserialize `QuoteBreakEvenAmountLong`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmountLong)
	if err != nil {
		return err
	}
	// Deserialize `QuoteBreakEvenAmountShort`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmountShort)
	if err != nil {
		return err
	}
	// Deserialize `UserLpShares`:
	err = decoder.Decode(&obj.UserLpShares)
	if err != nil {
		return err
	}
	// Deserialize `LastFundingRate`:
	err = decoder.Decode(&obj.LastFundingRate)
	if err != nil {
		return err
	}
	// Deserialize `LastFundingRateLong`:
	err = decoder.Decode(&obj.LastFundingRateLong)
	if err != nil {
		return err
	}
	// Deserialize `LastFundingRateShort`:
	err = decoder.Decode(&obj.LastFundingRateShort)
	if err != nil {
		return err
	}
	// Deserialize `Last24HAvgFundingRate`:
	err = decoder.Decode(&obj.Last24HAvgFundingRate)
	if err != nil {
		return err
	}
	// Deserialize `TotalFee`:
	err = decoder.Decode(&obj.TotalFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalMmFee`:
	err = decoder.Decode(&obj.TotalMmFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalExchangeFee`:
	err = decoder.Decode(&obj.TotalExchangeFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeMinusDistributions`:
	err = decoder.Decode(&obj.TotalFeeMinusDistributions)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeWithdrawn`:
	err = decoder.Decode(&obj.TotalFeeWithdrawn)
	if err != nil {
		return err
	}
	// Deserialize `TotalLiquidationFee`:
	err = decoder.Decode(&obj.TotalLiquidationFee)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeFundingRateLong`:
	err = decoder.Decode(&obj.CumulativeFundingRateLong)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeFundingRateShort`:
	err = decoder.Decode(&obj.CumulativeFundingRateShort)
	if err != nil {
		return err
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Deserialize `AskBaseAssetReserve`:
	err = decoder.Decode(&obj.AskBaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `AskQuoteAssetReserve`:
	err = decoder.Decode(&obj.AskQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `BidBaseAssetReserve`:
	err = decoder.Decode(&obj.BidBaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `BidQuoteAssetReserve`:
	err = decoder.Decode(&obj.BidQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleNormalisedPrice`:
	err = decoder.Decode(&obj.LastOracleNormalisedPrice)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleReservePriceSpreadPct`:
	err = decoder.Decode(&obj.LastOracleReservePriceSpreadPct)
	if err != nil {
		return err
	}
	// Deserialize `LastBidPriceTwap`:
	err = decoder.Decode(&obj.LastBidPriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastAskPriceTwap`:
	err = decoder.Decode(&obj.LastAskPriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastMarkPriceTwap`:
	err = decoder.Decode(&obj.LastMarkPriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastMarkPriceTwap5Min`:
	err = decoder.Decode(&obj.LastMarkPriceTwap5Min)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateSlot`:
	err = decoder.Decode(&obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleConfPct`:
	err = decoder.Decode(&obj.LastOracleConfPct)
	if err != nil {
		return err
	}
	// Deserialize `NetRevenueSinceLastFunding`:
	err = decoder.Decode(&obj.NetRevenueSinceLastFunding)
	if err != nil {
		return err
	}
	// Deserialize `LastFundingRateTs`:
	err = decoder.Decode(&obj.LastFundingRateTs)
	if err != nil {
		return err
	}
	// Deserialize `FundingPeriod`:
	err = decoder.Decode(&obj.FundingPeriod)
	if err != nil {
		return err
	}
	// Deserialize `OrderStepSize`:
	err = decoder.Decode(&obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Deserialize `OrderTickSize`:
	err = decoder.Decode(&obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Deserialize `MinOrderSize`:
	err = decoder.Decode(&obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Deserialize `MaxPositionSize`:
	err = decoder.Decode(&obj.MaxPositionSize)
	if err != nil {
		return err
	}
	// Deserialize `Volume24H`:
	err = decoder.Decode(&obj.Volume24H)
	if err != nil {
		return err
	}
	// Deserialize `LongIntensityVolume`:
	err = decoder.Decode(&obj.LongIntensityVolume)
	if err != nil {
		return err
	}
	// Deserialize `ShortIntensityVolume`:
	err = decoder.Decode(&obj.ShortIntensityVolume)
	if err != nil {
		return err
	}
	// Deserialize `LastTradeTs`:
	err = decoder.Decode(&obj.LastTradeTs)
	if err != nil {
		return err
	}
	// Deserialize `MarkStd`:
	err = decoder.Decode(&obj.MarkStd)
	if err != nil {
		return err
	}
	// Deserialize `OracleStd`:
	err = decoder.Decode(&obj.OracleStd)
	if err != nil {
		return err
	}
	// Deserialize `LastMarkPriceTwapTs`:
	err = decoder.Decode(&obj.LastMarkPriceTwapTs)
	if err != nil {
		return err
	}
	// Deserialize `BaseSpread`:
	err = decoder.Decode(&obj.BaseSpread)
	if err != nil {
		return err
	}
	// Deserialize `MaxSpread`:
	err = decoder.Decode(&obj.MaxSpread)
	if err != nil {
		return err
	}
	// Deserialize `LongSpread`:
	err = decoder.Decode(&obj.LongSpread)
	if err != nil {
		return err
	}
	// Deserialize `ShortSpread`:
	err = decoder.Decode(&obj.ShortSpread)
	if err != nil {
		return err
	}
	// Deserialize `LongIntensityCount`:
	err = decoder.Decode(&obj.LongIntensityCount)
	if err != nil {
		return err
	}
	// Deserialize `ShortIntensityCount`:
	err = decoder.Decode(&obj.ShortIntensityCount)
	if err != nil {
		return err
	}
	// Deserialize `MaxFillReserveFraction`:
	err = decoder.Decode(&obj.MaxFillReserveFraction)
	if err != nil {
		return err
	}
	// Deserialize `MaxSlippageRatio`:
	err = decoder.Decode(&obj.MaxSlippageRatio)
	if err != nil {
		return err
	}
	// Deserialize `CurveUpdateIntensity`:
	err = decoder.Decode(&obj.CurveUpdateIntensity)
	if err != nil {
		return err
	}
	// Deserialize `AmmJitIntensity`:
	err = decoder.Decode(&obj.AmmJitIntensity)
	if err != nil {
		return err
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return err
	}
	// Deserialize `LastOracleValid`:
	err = decoder.Decode(&obj.LastOracleValid)
	if err != nil {
		return err
	}
	// Deserialize `TargetBaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.TargetBaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Deserialize `PerLpBase`:
	err = decoder.Decode(&obj.PerLpBase)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeEarnedPerLp`:
	err = decoder.Decode(&obj.TotalFeeEarnedPerLp)
	if err != nil {
		return err
	}
	// Deserialize `NetUnsettledFundingPnl`:
	err = decoder.Decode(&obj.NetUnsettledFundingPnl)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.QuoteAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	// Deserialize `ReferencePriceOffset`:
	err = decoder.Decode(&obj.ReferencePriceOffset)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type InsuranceFund struct {
	Vault               ag_solanago.PublicKey
	TotalShares         ag_binary.Uint128
	UserShares          ag_binary.Uint128
	SharesBase          ag_binary.Uint128
	UnstakingPeriod     int64
	LastRevenueSettleTs int64
	RevenueSettlePeriod int64
	TotalFactor         uint32
	UserFactor          uint32
}

func (obj InsuranceFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `TotalShares` param:
	err = encoder.Encode(obj.TotalShares)
	if err != nil {
		return err
	}
	// Serialize `UserShares` param:
	err = encoder.Encode(obj.UserShares)
	if err != nil {
		return err
	}
	// Serialize `SharesBase` param:
	err = encoder.Encode(obj.SharesBase)
	if err != nil {
		return err
	}
	// Serialize `UnstakingPeriod` param:
	err = encoder.Encode(obj.UnstakingPeriod)
	if err != nil {
		return err
	}
	// Serialize `LastRevenueSettleTs` param:
	err = encoder.Encode(obj.LastRevenueSettleTs)
	if err != nil {
		return err
	}
	// Serialize `RevenueSettlePeriod` param:
	err = encoder.Encode(obj.RevenueSettlePeriod)
	if err != nil {
		return err
	}
	// Serialize `TotalFactor` param:
	err = encoder.Encode(obj.TotalFactor)
	if err != nil {
		return err
	}
	// Serialize `UserFactor` param:
	err = encoder.Encode(obj.UserFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `TotalShares`:
	err = decoder.Decode(&obj.TotalShares)
	if err != nil {
		return err
	}
	// Deserialize `UserShares`:
	err = decoder.Decode(&obj.UserShares)
	if err != nil {
		return err
	}
	// Deserialize `SharesBase`:
	err = decoder.Decode(&obj.SharesBase)
	if err != nil {
		return err
	}
	// Deserialize `UnstakingPeriod`:
	err = decoder.Decode(&obj.UnstakingPeriod)
	if err != nil {
		return err
	}
	// Deserialize `LastRevenueSettleTs`:
	err = decoder.Decode(&obj.LastRevenueSettleTs)
	if err != nil {
		return err
	}
	// Deserialize `RevenueSettlePeriod`:
	err = decoder.Decode(&obj.RevenueSettlePeriod)
	if err != nil {
		return err
	}
	// Deserialize `TotalFactor`:
	err = decoder.Decode(&obj.TotalFactor)
	if err != nil {
		return err
	}
	// Deserialize `UserFactor`:
	err = decoder.Decode(&obj.UserFactor)
	if err != nil {
		return err
	}
	return nil
}

type OracleGuardRails struct {
	PriceDivergence PriceDivergenceGuardRails
	Validity        ValidityGuardRails
}

func (obj OracleGuardRails) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceDivergence` param:
	err = encoder.Encode(obj.PriceDivergence)
	if err != nil {
		return err
	}
	// Serialize `Validity` param:
	err = encoder.Encode(obj.Validity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleGuardRails) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceDivergence`:
	err = decoder.Decode(&obj.PriceDivergence)
	if err != nil {
		return err
	}
	// Deserialize `Validity`:
	err = decoder.Decode(&obj.Validity)
	if err != nil {
		return err
	}
	return nil
}

type PriceDivergenceGuardRails struct {
	MarkOraclePercentDivergence     uint64
	OracleTwap5MinPercentDivergence uint64
}

func (obj PriceDivergenceGuardRails) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarkOraclePercentDivergence` param:
	err = encoder.Encode(obj.MarkOraclePercentDivergence)
	if err != nil {
		return err
	}
	// Serialize `OracleTwap5MinPercentDivergence` param:
	err = encoder.Encode(obj.OracleTwap5MinPercentDivergence)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PriceDivergenceGuardRails) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarkOraclePercentDivergence`:
	err = decoder.Decode(&obj.MarkOraclePercentDivergence)
	if err != nil {
		return err
	}
	// Deserialize `OracleTwap5MinPercentDivergence`:
	err = decoder.Decode(&obj.OracleTwap5MinPercentDivergence)
	if err != nil {
		return err
	}
	return nil
}

type ValidityGuardRails struct {
	SlotsBeforeStaleForAmm    int64
	SlotsBeforeStaleForMargin int64
	ConfidenceIntervalMaxSize uint64
	TooVolatileRatio          int64
}

func (obj ValidityGuardRails) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SlotsBeforeStaleForAmm` param:
	err = encoder.Encode(obj.SlotsBeforeStaleForAmm)
	if err != nil {
		return err
	}
	// Serialize `SlotsBeforeStaleForMargin` param:
	err = encoder.Encode(obj.SlotsBeforeStaleForMargin)
	if err != nil {
		return err
	}
	// Serialize `ConfidenceIntervalMaxSize` param:
	err = encoder.Encode(obj.ConfidenceIntervalMaxSize)
	if err != nil {
		return err
	}
	// Serialize `TooVolatileRatio` param:
	err = encoder.Encode(obj.TooVolatileRatio)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ValidityGuardRails) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SlotsBeforeStaleForAmm`:
	err = decoder.Decode(&obj.SlotsBeforeStaleForAmm)
	if err != nil {
		return err
	}
	// Deserialize `SlotsBeforeStaleForMargin`:
	err = decoder.Decode(&obj.SlotsBeforeStaleForMargin)
	if err != nil {
		return err
	}
	// Deserialize `ConfidenceIntervalMaxSize`:
	err = decoder.Decode(&obj.ConfidenceIntervalMaxSize)
	if err != nil {
		return err
	}
	// Deserialize `TooVolatileRatio`:
	err = decoder.Decode(&obj.TooVolatileRatio)
	if err != nil {
		return err
	}
	return nil
}

type FeeStructure struct {
	FeeTiers                      [10]FeeTier
	FillerRewardStructure         OrderFillerRewardStructure
	ReferrerRewardEpochUpperBound uint64
	FlatFillerFee                 uint64
}

func (obj FeeStructure) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeTiers` param:
	err = encoder.Encode(obj.FeeTiers)
	if err != nil {
		return err
	}
	// Serialize `FillerRewardStructure` param:
	err = encoder.Encode(obj.FillerRewardStructure)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRewardEpochUpperBound` param:
	err = encoder.Encode(obj.ReferrerRewardEpochUpperBound)
	if err != nil {
		return err
	}
	// Serialize `FlatFillerFee` param:
	err = encoder.Encode(obj.FlatFillerFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeStructure) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeTiers`:
	err = decoder.Decode(&obj.FeeTiers)
	if err != nil {
		return err
	}
	// Deserialize `FillerRewardStructure`:
	err = decoder.Decode(&obj.FillerRewardStructure)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRewardEpochUpperBound`:
	err = decoder.Decode(&obj.ReferrerRewardEpochUpperBound)
	if err != nil {
		return err
	}
	// Deserialize `FlatFillerFee`:
	err = decoder.Decode(&obj.FlatFillerFee)
	if err != nil {
		return err
	}
	return nil
}

type FeeTier struct {
	FeeNumerator              uint32
	FeeDenominator            uint32
	MakerRebateNumerator      uint32
	MakerRebateDenominator    uint32
	ReferrerRewardNumerator   uint32
	ReferrerRewardDenominator uint32
	RefereeFeeNumerator       uint32
	RefereeFeeDenominator     uint32
}

func (obj FeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeNumerator` param:
	err = encoder.Encode(obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `FeeDenominator` param:
	err = encoder.Encode(obj.FeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `MakerRebateNumerator` param:
	err = encoder.Encode(obj.MakerRebateNumerator)
	if err != nil {
		return err
	}
	// Serialize `MakerRebateDenominator` param:
	err = encoder.Encode(obj.MakerRebateDenominator)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRewardNumerator` param:
	err = encoder.Encode(obj.ReferrerRewardNumerator)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRewardDenominator` param:
	err = encoder.Encode(obj.ReferrerRewardDenominator)
	if err != nil {
		return err
	}
	// Serialize `RefereeFeeNumerator` param:
	err = encoder.Encode(obj.RefereeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `RefereeFeeDenominator` param:
	err = encoder.Encode(obj.RefereeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeNumerator`:
	err = decoder.Decode(&obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `FeeDenominator`:
	err = decoder.Decode(&obj.FeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `MakerRebateNumerator`:
	err = decoder.Decode(&obj.MakerRebateNumerator)
	if err != nil {
		return err
	}
	// Deserialize `MakerRebateDenominator`:
	err = decoder.Decode(&obj.MakerRebateDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRewardNumerator`:
	err = decoder.Decode(&obj.ReferrerRewardNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRewardDenominator`:
	err = decoder.Decode(&obj.ReferrerRewardDenominator)
	if err != nil {
		return err
	}
	// Deserialize `RefereeFeeNumerator`:
	err = decoder.Decode(&obj.RefereeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `RefereeFeeDenominator`:
	err = decoder.Decode(&obj.RefereeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

type OrderFillerRewardStructure struct {
	RewardNumerator           uint32
	RewardDenominator         uint32
	TimeBasedRewardLowerBound ag_binary.Uint128
}

func (obj OrderFillerRewardStructure) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardNumerator` param:
	err = encoder.Encode(obj.RewardNumerator)
	if err != nil {
		return err
	}
	// Serialize `RewardDenominator` param:
	err = encoder.Encode(obj.RewardDenominator)
	if err != nil {
		return err
	}
	// Serialize `TimeBasedRewardLowerBound` param:
	err = encoder.Encode(obj.TimeBasedRewardLowerBound)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderFillerRewardStructure) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardNumerator`:
	err = decoder.Decode(&obj.RewardNumerator)
	if err != nil {
		return err
	}
	// Deserialize `RewardDenominator`:
	err = decoder.Decode(&obj.RewardDenominator)
	if err != nil {
		return err
	}
	// Deserialize `TimeBasedRewardLowerBound`:
	err = decoder.Decode(&obj.TimeBasedRewardLowerBound)
	if err != nil {
		return err
	}
	return nil
}

type UserFees struct {
	// Total taker fee paid
	// precision: QUOTE_PRECISION
	TotalFeePaid uint64

	// Total maker fee rebate
	// precision: QUOTE_PRECISION
	TotalFeeRebate uint64

	// Total discount from holding token
	// precision: QUOTE_PRECISION
	TotalTokenDiscount uint64

	// Total discount from being referred
	// precision: QUOTE_PRECISION
	TotalRefereeDiscount uint64

	// Total reward to referrer
	// precision: QUOTE_PRECISION
	TotalReferrerReward uint64

	// Total reward to referrer this epoch
	// precision: QUOTE_PRECISION
	CurrentEpochReferrerReward uint64
}

func (obj UserFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalFeePaid` param:
	err = encoder.Encode(obj.TotalFeePaid)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeRebate` param:
	err = encoder.Encode(obj.TotalFeeRebate)
	if err != nil {
		return err
	}
	// Serialize `TotalTokenDiscount` param:
	err = encoder.Encode(obj.TotalTokenDiscount)
	if err != nil {
		return err
	}
	// Serialize `TotalRefereeDiscount` param:
	err = encoder.Encode(obj.TotalRefereeDiscount)
	if err != nil {
		return err
	}
	// Serialize `TotalReferrerReward` param:
	err = encoder.Encode(obj.TotalReferrerReward)
	if err != nil {
		return err
	}
	// Serialize `CurrentEpochReferrerReward` param:
	err = encoder.Encode(obj.CurrentEpochReferrerReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalFeePaid`:
	err = decoder.Decode(&obj.TotalFeePaid)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeRebate`:
	err = decoder.Decode(&obj.TotalFeeRebate)
	if err != nil {
		return err
	}
	// Deserialize `TotalTokenDiscount`:
	err = decoder.Decode(&obj.TotalTokenDiscount)
	if err != nil {
		return err
	}
	// Deserialize `TotalRefereeDiscount`:
	err = decoder.Decode(&obj.TotalRefereeDiscount)
	if err != nil {
		return err
	}
	// Deserialize `TotalReferrerReward`:
	err = decoder.Decode(&obj.TotalReferrerReward)
	if err != nil {
		return err
	}
	// Deserialize `CurrentEpochReferrerReward`:
	err = decoder.Decode(&obj.CurrentEpochReferrerReward)
	if err != nil {
		return err
	}
	return nil
}

type SpotPosition struct {
	// The scaled balance of the position. To get the token amount, multiply by the cumulative deposit/borrow
	// interest of corresponding market.
	// precision: SPOT_BALANCE_PRECISION
	ScaledBalance uint64

	// How many spot bids the user has open
	// precision: token mint precision
	OpenBids int64

	// How many spot asks the user has open
	// precision: token mint precision
	OpenAsks int64

	// The cumulative deposits/borrows a user has made into a market
	// precision: token mint precision
	CumulativeDeposits int64

	// The market index of the corresponding spot market
	MarketIndex uint16

	// Whether the position is deposit or borrow
	BalanceType SpotBalanceType

	// Number of open orders
	OpenOrders uint8
	Padding    [4]uint8
}

func (obj SpotPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ScaledBalance` param:
	err = encoder.Encode(obj.ScaledBalance)
	if err != nil {
		return err
	}
	// Serialize `OpenBids` param:
	err = encoder.Encode(obj.OpenBids)
	if err != nil {
		return err
	}
	// Serialize `OpenAsks` param:
	err = encoder.Encode(obj.OpenAsks)
	if err != nil {
		return err
	}
	// Serialize `CumulativeDeposits` param:
	err = encoder.Encode(obj.CumulativeDeposits)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `BalanceType` param:
	err = encoder.Encode(obj.BalanceType)
	if err != nil {
		return err
	}
	// Serialize `OpenOrders` param:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SpotPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ScaledBalance`:
	err = decoder.Decode(&obj.ScaledBalance)
	if err != nil {
		return err
	}
	// Deserialize `OpenBids`:
	err = decoder.Decode(&obj.OpenBids)
	if err != nil {
		return err
	}
	// Deserialize `OpenAsks`:
	err = decoder.Decode(&obj.OpenAsks)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeDeposits`:
	err = decoder.Decode(&obj.CumulativeDeposits)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `BalanceType`:
	err = decoder.Decode(&obj.BalanceType)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PerpPosition struct {
	// The perp market's last cumulative funding rate. Used to calculate the funding payment owed to user
	// precision: FUNDING_RATE_PRECISION
	LastCumulativeFundingRate int64

	// the size of the users perp position
	// precision: BASE_PRECISION
	BaseAssetAmount int64

	// Used to calculate the users pnl. Upon entry, is equal to base_asset_amount * avg entry price - fees
	// Updated when the user open/closes position or settles pnl. Includes fees/funding
	// precision: QUOTE_PRECISION
	QuoteAssetAmount int64

	// The amount of quote the user would need to exit their position at to break even
	// Updated when the user open/closes position or settles pnl. Includes fees/funding
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmount int64

	// The amount quote the user entered the position with. Equal to base asset amount * avg entry price
	// Updated when the user open/closes position. Excludes fees/funding
	// precision: QUOTE_PRECISION
	QuoteEntryAmount int64

	// The amount of open bids the user has in this perp market
	// precision: BASE_PRECISION
	OpenBids int64

	// The amount of open asks the user has in this perp market
	// precision: BASE_PRECISION
	OpenAsks int64

	// The amount of pnl settled in this market since opening the position
	// precision: QUOTE_PRECISION
	SettledPnl int64

	// The number of lp (liquidity provider) shares the user has in this perp market
	// LP shares allow users to provide liquidity via the AMM
	// precision: BASE_PRECISION
	LpShares uint64

	// The last base asset amount per lp the amm had
	// Used to settle the users lp position
	// precision: BASE_PRECISION
	LastBaseAssetAmountPerLp int64

	// The last quote asset amount per lp the amm had
	// Used to settle the users lp position
	// precision: QUOTE_PRECISION
	LastQuoteAssetAmountPerLp int64

	// Settling LP position can lead to a small amount of base asset being left over smaller than step size
	// This records that remainder so it can be settled later on
	// precision: BASE_PRECISION
	RemainderBaseAssetAmount int32

	// The market index for the perp market
	MarketIndex uint16

	// The number of open orders
	OpenOrders uint8
	PerLpBase  int8
}

func (obj PerpPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastCumulativeFundingRate` param:
	err = encoder.Encode(obj.LastCumulativeFundingRate)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmount` param:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteBreakEvenAmount` param:
	err = encoder.Encode(obj.QuoteBreakEvenAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteEntryAmount` param:
	err = encoder.Encode(obj.QuoteEntryAmount)
	if err != nil {
		return err
	}
	// Serialize `OpenBids` param:
	err = encoder.Encode(obj.OpenBids)
	if err != nil {
		return err
	}
	// Serialize `OpenAsks` param:
	err = encoder.Encode(obj.OpenAsks)
	if err != nil {
		return err
	}
	// Serialize `SettledPnl` param:
	err = encoder.Encode(obj.SettledPnl)
	if err != nil {
		return err
	}
	// Serialize `LpShares` param:
	err = encoder.Encode(obj.LpShares)
	if err != nil {
		return err
	}
	// Serialize `LastBaseAssetAmountPerLp` param:
	err = encoder.Encode(obj.LastBaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Serialize `LastQuoteAssetAmountPerLp` param:
	err = encoder.Encode(obj.LastQuoteAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Serialize `RemainderBaseAssetAmount` param:
	err = encoder.Encode(obj.RemainderBaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OpenOrders` param:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return err
	}
	// Serialize `PerLpBase` param:
	err = encoder.Encode(obj.PerLpBase)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PerpPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastCumulativeFundingRate`:
	err = decoder.Decode(&obj.LastCumulativeFundingRate)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteBreakEvenAmount`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteEntryAmount`:
	err = decoder.Decode(&obj.QuoteEntryAmount)
	if err != nil {
		return err
	}
	// Deserialize `OpenBids`:
	err = decoder.Decode(&obj.OpenBids)
	if err != nil {
		return err
	}
	// Deserialize `OpenAsks`:
	err = decoder.Decode(&obj.OpenAsks)
	if err != nil {
		return err
	}
	// Deserialize `SettledPnl`:
	err = decoder.Decode(&obj.SettledPnl)
	if err != nil {
		return err
	}
	// Deserialize `LpShares`:
	err = decoder.Decode(&obj.LpShares)
	if err != nil {
		return err
	}
	// Deserialize `LastBaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.LastBaseAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Deserialize `LastQuoteAssetAmountPerLp`:
	err = decoder.Decode(&obj.LastQuoteAssetAmountPerLp)
	if err != nil {
		return err
	}
	// Deserialize `RemainderBaseAssetAmount`:
	err = decoder.Decode(&obj.RemainderBaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return err
	}
	// Deserialize `PerLpBase`:
	err = decoder.Decode(&obj.PerLpBase)
	if err != nil {
		return err
	}
	return nil
}

type Order struct {
	// The slot the order was placed
	Slot uint64

	// The limit price for the order (can be 0 for market orders)
	// For orders with an auction, this price isn't used until the auction is complete
	// precision: PRICE_PRECISION
	Price uint64

	// The size of the order
	// precision for perps: BASE_PRECISION
	// precision for spot: token mint precision
	BaseAssetAmount uint64

	// The amount of the order filled
	// precision for perps: BASE_PRECISION
	// precision for spot: token mint precision
	BaseAssetAmountFilled uint64

	// The amount of quote filled for the order
	// precision: QUOTE_PRECISION
	QuoteAssetAmountFilled uint64

	// At what price the order will be triggered. Only relevant for trigger orders
	// precision: PRICE_PRECISION
	TriggerPrice uint64

	// The start price for the auction. Only relevant for market/oracle orders
	// precision: PRICE_PRECISION
	AuctionStartPrice int64

	// The end price for the auction. Only relevant for market/oracle orders
	// precision: PRICE_PRECISION
	AuctionEndPrice int64

	// The time when the order will expire
	MaxTs int64

	// If set, the order limit price is the oracle price + this offset
	// precision: PRICE_PRECISION
	OraclePriceOffset int32

	// The id for the order. Each users has their own order id space
	OrderId uint32

	// The perp/spot market index
	MarketIndex uint16

	// Whether the order is open or unused
	Status OrderStatus

	// The type of order
	OrderType OrderType

	// Whether market is spot or perp
	MarketType MarketType

	// User generated order id. Can make it easier to place/cancel orders
	UserOrderId uint8

	// What the users position was when the order was placed
	ExistingPositionDirection PositionDirection

	// Whether the user is going long or short. LONG = bid, SHORT = ask
	Direction PositionDirection

	// Whether the order is allowed to only reduce position size
	ReduceOnly bool

	// Whether the order must be a maker
	PostOnly bool

	// Whether the order must be canceled the same slot it is placed
	ImmediateOrCancel bool

	// Whether the order is triggered above or below the trigger price. Only relevant for trigger orders
	TriggerCondition OrderTriggerCondition

	// How many slots the auction lasts
	AuctionDuration uint8
	Padding         [3]uint8
}

func (obj Order) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Slot` param:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountFilled` param:
	err = encoder.Encode(obj.BaseAssetAmountFilled)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmountFilled` param:
	err = encoder.Encode(obj.QuoteAssetAmountFilled)
	if err != nil {
		return err
	}
	// Serialize `TriggerPrice` param:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return err
	}
	// Serialize `AuctionStartPrice` param:
	err = encoder.Encode(obj.AuctionStartPrice)
	if err != nil {
		return err
	}
	// Serialize `AuctionEndPrice` param:
	err = encoder.Encode(obj.AuctionEndPrice)
	if err != nil {
		return err
	}
	// Serialize `MaxTs` param:
	err = encoder.Encode(obj.MaxTs)
	if err != nil {
		return err
	}
	// Serialize `OraclePriceOffset` param:
	err = encoder.Encode(obj.OraclePriceOffset)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `MarketType` param:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return err
	}
	// Serialize `UserOrderId` param:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return err
	}
	// Serialize `ExistingPositionDirection` param:
	err = encoder.Encode(obj.ExistingPositionDirection)
	if err != nil {
		return err
	}
	// Serialize `Direction` param:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return err
	}
	// Serialize `ReduceOnly` param:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return err
	}
	// Serialize `PostOnly` param:
	err = encoder.Encode(obj.PostOnly)
	if err != nil {
		return err
	}
	// Serialize `ImmediateOrCancel` param:
	err = encoder.Encode(obj.ImmediateOrCancel)
	if err != nil {
		return err
	}
	// Serialize `TriggerCondition` param:
	err = encoder.Encode(obj.TriggerCondition)
	if err != nil {
		return err
	}
	// Serialize `AuctionDuration` param:
	err = encoder.Encode(obj.AuctionDuration)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountFilled`:
	err = decoder.Decode(&obj.BaseAssetAmountFilled)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmountFilled`:
	err = decoder.Decode(&obj.QuoteAssetAmountFilled)
	if err != nil {
		return err
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return err
	}
	// Deserialize `AuctionStartPrice`:
	err = decoder.Decode(&obj.AuctionStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `AuctionEndPrice`:
	err = decoder.Decode(&obj.AuctionEndPrice)
	if err != nil {
		return err
	}
	// Deserialize `MaxTs`:
	err = decoder.Decode(&obj.MaxTs)
	if err != nil {
		return err
	}
	// Deserialize `OraclePriceOffset`:
	err = decoder.Decode(&obj.OraclePriceOffset)
	if err != nil {
		return err
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return err
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return err
	}
	// Deserialize `ExistingPositionDirection`:
	err = decoder.Decode(&obj.ExistingPositionDirection)
	if err != nil {
		return err
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return err
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return err
	}
	// Deserialize `PostOnly`:
	err = decoder.Decode(&obj.PostOnly)
	if err != nil {
		return err
	}
	// Deserialize `ImmediateOrCancel`:
	err = decoder.Decode(&obj.ImmediateOrCancel)
	if err != nil {
		return err
	}
	// Deserialize `TriggerCondition`:
	err = decoder.Decode(&obj.TriggerCondition)
	if err != nil {
		return err
	}
	// Deserialize `AuctionDuration`:
	err = decoder.Decode(&obj.AuctionDuration)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type SwapDirection ag_binary.BorshEnum

const (
	SwapDirectionAdd SwapDirection = iota
	SwapDirectionRemove
)

func (value SwapDirection) String() string {
	switch value {
	case SwapDirectionAdd:
		return "Add"
	case SwapDirectionRemove:
		return "Remove"
	default:
		return ""
	}
}

type ModifyOrderId ag_binary.BorshEnum

const (
	ModifyOrderIdUserOrderId ModifyOrderId = iota
	ModifyOrderIdOrderId
)

func (value ModifyOrderId) String() string {
	switch value {
	case ModifyOrderIdUserOrderId:
		return "UserOrderId"
	case ModifyOrderIdOrderId:
		return "OrderId"
	default:
		return ""
	}
}

type PositionDirection ag_binary.BorshEnum

const (
	PositionDirectionLong PositionDirection = iota
	PositionDirectionShort
)

func (value PositionDirection) String() string {
	switch value {
	case PositionDirectionLong:
		return "Long"
	case PositionDirectionShort:
		return "Short"
	default:
		return ""
	}
}

type SpotFulfillmentType ag_binary.BorshEnum

const (
	SpotFulfillmentTypeSerumV3 SpotFulfillmentType = iota
	SpotFulfillmentTypeMatch
	SpotFulfillmentTypePhoenixV1
)

func (value SpotFulfillmentType) String() string {
	switch value {
	case SpotFulfillmentTypeSerumV3:
		return "SerumV3"
	case SpotFulfillmentTypeMatch:
		return "Match"
	case SpotFulfillmentTypePhoenixV1:
		return "PhoenixV1"
	default:
		return ""
	}
}

type SwapReduceOnly ag_binary.BorshEnum

const (
	SwapReduceOnlyIn SwapReduceOnly = iota
	SwapReduceOnlyOut
)

func (value SwapReduceOnly) String() string {
	switch value {
	case SwapReduceOnlyIn:
		return "In"
	case SwapReduceOnlyOut:
		return "Out"
	default:
		return ""
	}
}

type TwapPeriod ag_binary.BorshEnum

const (
	TwapPeriodFundingPeriod TwapPeriod = iota
	TwapPeriodFiveMin
)

func (value TwapPeriod) String() string {
	switch value {
	case TwapPeriodFundingPeriod:
		return "FundingPeriod"
	case TwapPeriodFiveMin:
		return "FiveMin"
	default:
		return ""
	}
}

type LiquidationMultiplierType ag_binary.BorshEnum

const (
	LiquidationMultiplierTypeDiscount LiquidationMultiplierType = iota
	LiquidationMultiplierTypePremium
)

func (value LiquidationMultiplierType) String() string {
	switch value {
	case LiquidationMultiplierTypeDiscount:
		return "Discount"
	case LiquidationMultiplierTypePremium:
		return "Premium"
	default:
		return ""
	}
}

type MarginRequirementType ag_binary.BorshEnum

const (
	MarginRequirementTypeInitial MarginRequirementType = iota
	MarginRequirementTypeFill
	MarginRequirementTypeMaintenance
)

func (value MarginRequirementType) String() string {
	switch value {
	case MarginRequirementTypeInitial:
		return "Initial"
	case MarginRequirementTypeFill:
		return "Fill"
	case MarginRequirementTypeMaintenance:
		return "Maintenance"
	default:
		return ""
	}
}

type OracleValidity ag_binary.BorshEnum

const (
	OracleValidityInvalid OracleValidity = iota
	OracleValidityTooVolatile
	OracleValidityTooUncertain
	OracleValidityStaleForMargin
	OracleValidityInsufficientDataPoints
	OracleValidityStaleForAMM
	OracleValidityValid
)

func (value OracleValidity) String() string {
	switch value {
	case OracleValidityInvalid:
		return "Invalid"
	case OracleValidityTooVolatile:
		return "TooVolatile"
	case OracleValidityTooUncertain:
		return "TooUncertain"
	case OracleValidityStaleForMargin:
		return "StaleForMargin"
	case OracleValidityInsufficientDataPoints:
		return "InsufficientDataPoints"
	case OracleValidityStaleForAMM:
		return "StaleForAMM"
	case OracleValidityValid:
		return "Valid"
	default:
		return ""
	}
}

type DriftAction ag_binary.BorshEnum

const (
	DriftActionUpdateFunding DriftAction = iota
	DriftActionSettlePnl
	DriftActionTriggerOrder
	DriftActionFillOrderMatch
	DriftActionFillOrderAmm
	DriftActionLiquidate
	DriftActionMarginCalc
	DriftActionUpdateTwap
	DriftActionUpdateAMMCurve
	DriftActionOracleOrderPrice
)

func (value DriftAction) String() string {
	switch value {
	case DriftActionUpdateFunding:
		return "UpdateFunding"
	case DriftActionSettlePnl:
		return "SettlePnl"
	case DriftActionTriggerOrder:
		return "TriggerOrder"
	case DriftActionFillOrderMatch:
		return "FillOrderMatch"
	case DriftActionFillOrderAmm:
		return "FillOrderAmm"
	case DriftActionLiquidate:
		return "Liquidate"
	case DriftActionMarginCalc:
		return "MarginCalc"
	case DriftActionUpdateTwap:
		return "UpdateTwap"
	case DriftActionUpdateAMMCurve:
		return "UpdateAMMCurve"
	case DriftActionOracleOrderPrice:
		return "OracleOrderPrice"
	default:
		return ""
	}
}

type PositionUpdateType ag_binary.BorshEnum

const (
	PositionUpdateTypeOpen PositionUpdateType = iota
	PositionUpdateTypeIncrease
	PositionUpdateTypeReduce
	PositionUpdateTypeClose
	PositionUpdateTypeFlip
)

func (value PositionUpdateType) String() string {
	switch value {
	case PositionUpdateTypeOpen:
		return "Open"
	case PositionUpdateTypeIncrease:
		return "Increase"
	case PositionUpdateTypeReduce:
		return "Reduce"
	case PositionUpdateTypeClose:
		return "Close"
	case PositionUpdateTypeFlip:
		return "Flip"
	default:
		return ""
	}
}

type DepositExplanation ag_binary.BorshEnum

const (
	DepositExplanationNone DepositExplanation = iota
	DepositExplanationTransfer
	DepositExplanationBorrow
	DepositExplanationRepayBorrow
)

func (value DepositExplanation) String() string {
	switch value {
	case DepositExplanationNone:
		return "None"
	case DepositExplanationTransfer:
		return "Transfer"
	case DepositExplanationBorrow:
		return "Borrow"
	case DepositExplanationRepayBorrow:
		return "RepayBorrow"
	default:
		return ""
	}
}

type DepositDirection ag_binary.BorshEnum

const (
	DepositDirectionDeposit DepositDirection = iota
	DepositDirectionWithdraw
)

func (value DepositDirection) String() string {
	switch value {
	case DepositDirectionDeposit:
		return "Deposit"
	case DepositDirectionWithdraw:
		return "Withdraw"
	default:
		return ""
	}
}

type OrderAction ag_binary.BorshEnum

const (
	OrderActionPlace OrderAction = iota
	OrderActionCancel
	OrderActionFill
	OrderActionTrigger
	OrderActionExpire
)

func (value OrderAction) String() string {
	switch value {
	case OrderActionPlace:
		return "Place"
	case OrderActionCancel:
		return "Cancel"
	case OrderActionFill:
		return "Fill"
	case OrderActionTrigger:
		return "Trigger"
	case OrderActionExpire:
		return "Expire"
	default:
		return ""
	}
}

type OrderActionExplanation ag_binary.BorshEnum

const (
	OrderActionExplanationNone OrderActionExplanation = iota
	OrderActionExplanationInsufficientFreeCollateral
	OrderActionExplanationOraclePriceBreachedLimitPrice
	OrderActionExplanationMarketOrderFilledToLimitPrice
	OrderActionExplanationOrderExpired
	OrderActionExplanationLiquidation
	OrderActionExplanationOrderFilledWithAMM
	OrderActionExplanationOrderFilledWithAMMJit
	OrderActionExplanationOrderFilledWithMatch
	OrderActionExplanationOrderFilledWithMatchJit
	OrderActionExplanationMarketExpired
	OrderActionExplanationRiskingIncreasingOrder
	OrderActionExplanationReduceOnlyOrderIncreasedPosition
	OrderActionExplanationOrderFillWithSerum
	OrderActionExplanationNoBorrowLiquidity
	OrderActionExplanationOrderFillWithPhoenix
	OrderActionExplanationOrderFilledWithAMMJitLPSplit
	OrderActionExplanationOrderFilledWithLPJit
	OrderActionExplanationDeriskLp
)

func (value OrderActionExplanation) String() string {
	switch value {
	case OrderActionExplanationNone:
		return "None"
	case OrderActionExplanationInsufficientFreeCollateral:
		return "InsufficientFreeCollateral"
	case OrderActionExplanationOraclePriceBreachedLimitPrice:
		return "OraclePriceBreachedLimitPrice"
	case OrderActionExplanationMarketOrderFilledToLimitPrice:
		return "MarketOrderFilledToLimitPrice"
	case OrderActionExplanationOrderExpired:
		return "OrderExpired"
	case OrderActionExplanationLiquidation:
		return "Liquidation"
	case OrderActionExplanationOrderFilledWithAMM:
		return "OrderFilledWithAMM"
	case OrderActionExplanationOrderFilledWithAMMJit:
		return "OrderFilledWithAMMJit"
	case OrderActionExplanationOrderFilledWithMatch:
		return "OrderFilledWithMatch"
	case OrderActionExplanationOrderFilledWithMatchJit:
		return "OrderFilledWithMatchJit"
	case OrderActionExplanationMarketExpired:
		return "MarketExpired"
	case OrderActionExplanationRiskingIncreasingOrder:
		return "RiskingIncreasingOrder"
	case OrderActionExplanationReduceOnlyOrderIncreasedPosition:
		return "ReduceOnlyOrderIncreasedPosition"
	case OrderActionExplanationOrderFillWithSerum:
		return "OrderFillWithSerum"
	case OrderActionExplanationNoBorrowLiquidity:
		return "NoBorrowLiquidity"
	case OrderActionExplanationOrderFillWithPhoenix:
		return "OrderFillWithPhoenix"
	case OrderActionExplanationOrderFilledWithAMMJitLPSplit:
		return "OrderFilledWithAMMJitLPSplit"
	case OrderActionExplanationOrderFilledWithLPJit:
		return "OrderFilledWithLPJit"
	case OrderActionExplanationDeriskLp:
		return "DeriskLp"
	default:
		return ""
	}
}

type LPAction ag_binary.BorshEnum

const (
	LPActionAddLiquidity LPAction = iota
	LPActionRemoveLiquidity
	LPActionSettleLiquidity
	LPActionRemoveLiquidityDerisk
)

func (value LPAction) String() string {
	switch value {
	case LPActionAddLiquidity:
		return "AddLiquidity"
	case LPActionRemoveLiquidity:
		return "RemoveLiquidity"
	case LPActionSettleLiquidity:
		return "SettleLiquidity"
	case LPActionRemoveLiquidityDerisk:
		return "RemoveLiquidityDerisk"
	default:
		return ""
	}
}

type LiquidationType ag_binary.BorshEnum

const (
	LiquidationTypeLiquidatePerp LiquidationType = iota
	LiquidationTypeLiquidateSpot
	LiquidationTypeLiquidateBorrowForPerpPnl
	LiquidationTypeLiquidatePerpPnlForDeposit
	LiquidationTypePerpBankruptcy
	LiquidationTypeSpotBankruptcy
)

func (value LiquidationType) String() string {
	switch value {
	case LiquidationTypeLiquidatePerp:
		return "LiquidatePerp"
	case LiquidationTypeLiquidateSpot:
		return "LiquidateSpot"
	case LiquidationTypeLiquidateBorrowForPerpPnl:
		return "LiquidateBorrowForPerpPnl"
	case LiquidationTypeLiquidatePerpPnlForDeposit:
		return "LiquidatePerpPnlForDeposit"
	case LiquidationTypePerpBankruptcy:
		return "PerpBankruptcy"
	case LiquidationTypeSpotBankruptcy:
		return "SpotBankruptcy"
	default:
		return ""
	}
}

type SettlePnlExplanation ag_binary.BorshEnum

const (
	SettlePnlExplanationNone SettlePnlExplanation = iota
	SettlePnlExplanationExpiredPosition
)

func (value SettlePnlExplanation) String() string {
	switch value {
	case SettlePnlExplanationNone:
		return "None"
	case SettlePnlExplanationExpiredPosition:
		return "ExpiredPosition"
	default:
		return ""
	}
}

type StakeAction ag_binary.BorshEnum

const (
	StakeActionStake StakeAction = iota
	StakeActionUnstakeRequest
	StakeActionUnstakeCancelRequest
	StakeActionUnstake
	StakeActionUnstakeTransfer
	StakeActionStakeTransfer
)

func (value StakeAction) String() string {
	switch value {
	case StakeActionStake:
		return "Stake"
	case StakeActionUnstakeRequest:
		return "UnstakeRequest"
	case StakeActionUnstakeCancelRequest:
		return "UnstakeCancelRequest"
	case StakeActionUnstake:
		return "Unstake"
	case StakeActionUnstakeTransfer:
		return "UnstakeTransfer"
	case StakeActionStakeTransfer:
		return "StakeTransfer"
	default:
		return ""
	}
}

type FillMode ag_binary.BorshEnum

const (
	FillModeFill FillMode = iota
	FillModePlaceAndMake
	FillModePlaceAndTake
)

func (value FillMode) String() string {
	switch value {
	case FillModeFill:
		return "Fill"
	case FillModePlaceAndMake:
		return "PlaceAndMake"
	case FillModePlaceAndTake:
		return "PlaceAndTake"
	default:
		return ""
	}
}

type PerpFulfillmentMethod ag_binary.BorshEnum

const (
	PerpFulfillmentMethodAMM PerpFulfillmentMethod = iota
	PerpFulfillmentMethodMatch
)

func (value PerpFulfillmentMethod) String() string {
	switch value {
	case PerpFulfillmentMethodAMM:
		return "AMM"
	case PerpFulfillmentMethodMatch:
		return "Match"
	default:
		return ""
	}
}

type SpotFulfillmentMethod ag_binary.BorshEnum

const (
	SpotFulfillmentMethodExternalMarket SpotFulfillmentMethod = iota
	SpotFulfillmentMethodMatch
)

func (value SpotFulfillmentMethod) String() string {
	switch value {
	case SpotFulfillmentMethodExternalMarket:
		return "ExternalMarket"
	case SpotFulfillmentMethodMatch:
		return "Match"
	default:
		return ""
	}
}

type MarginCalculationMode interface {
	isMarginCalculationMode()
}

type marginCalculationModeContainer struct {
	Enum        ag_binary.BorshEnum `borsh_enum:"true"`
	Standard    MarginCalculationModeStandard
	Liquidation MarginCalculationModeLiquidation
}

type MarginCalculationModeStandard struct {
	TrackOpenOrdersFraction bool
}

func (obj MarginCalculationModeStandard) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TrackOpenOrdersFraction` param:
	err = encoder.Encode(obj.TrackOpenOrdersFraction)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarginCalculationModeStandard) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TrackOpenOrdersFraction`:
	err = decoder.Decode(&obj.TrackOpenOrdersFraction)
	if err != nil {
		return err
	}
	return nil
}

func (_ *MarginCalculationModeStandard) isMarginCalculationMode() {}

type MarginCalculationModeLiquidation struct {
	MarketToTrackMarginRequirement *MarketIdentifier `bin:"optional"`
}

func (obj MarginCalculationModeLiquidation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketToTrackMarginRequirement` param (optional):
	{
		if obj.MarketToTrackMarginRequirement == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MarketToTrackMarginRequirement)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MarginCalculationModeLiquidation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketToTrackMarginRequirement` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MarketToTrackMarginRequirement)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ *MarginCalculationModeLiquidation) isMarginCalculationMode() {}

type OracleSource ag_binary.BorshEnum

const (
	OracleSourcePyth OracleSource = iota
	OracleSourcePyth_1K
	OracleSourcePyth_1M
	OracleSourcePyth_Pull
	OracleSourcePyth_1K_Pull
	OracleSourcePyth_1M_Pull
	OracleSourceSwitchboard
	OracleSourceQuoteAsset
	OracleSourcePyth_Stable_Coin
	OracleSourcePyth_Stable_Coin_Pull
	OracleSourcePrelaunch
	OracleSourceSwitchboard_On_Demand
	OracleSourcePyth_Lazer
	OracleSourcePyth_Lazer_1K
	OracleSourcePyth_Lazer_1M
	OracleSourcePyth_Lazer_Stable_Coin
)

func (value OracleSource) String() string {
	switch value {
	case OracleSourcePyth: return "OracleSourcePyth"
	case OracleSourcePyth_1K: return "OracleSourcePyth_1K"
	case OracleSourcePyth_1M: return "OracleSourcePyth_1M"
	case OracleSourcePyth_Pull: return "OracleSourcePyth_Pull"
	case OracleSourcePyth_1K_Pull: return "OracleSourcePyth_1K_Pull"
	case OracleSourcePyth_1M_Pull: return "OracleSourcePyth_1M_Pull"
	case OracleSourceSwitchboard: return "OracleSourceSwitchboard"
	case OracleSourceQuoteAsset: return "OracleSourceQuoteAsset"
	case OracleSourcePyth_Stable_Coin: return "OracleSourcePyth_Stable_Coin"
	case OracleSourcePyth_Stable_Coin_Pull: return "OracleSourcePyth_Stable_Coin_Pull"
	case OracleSourcePrelaunch: return "OracleSourcePrelaunch"
	case OracleSourceSwitchboard_On_Demand: return "OracleSourceSwitchboard_On_Demand"
	case OracleSourcePyth_Lazer: return "OracleSourcePyth_Lazer"
	case OracleSourcePyth_Lazer_1K: return "OracleSourcePyth_Lazer_1K"
	case OracleSourcePyth_Lazer_1M: return "OracleSourcePyth_Lazer_1M"
	case OracleSourcePyth_Lazer_Stable_Coin: return "OracleSourcePyth_Lazer_Stable_Coin"
	default:
		return ""
	}
}

type PostOnlyParam ag_binary.BorshEnum

const (
	PostOnlyParamNone PostOnlyParam = iota
	PostOnlyParamMustPostOnly
	PostOnlyParamTryPostOnly
	PostOnlyParamSlide
)

func (value PostOnlyParam) String() string {
	switch value {
	case PostOnlyParamNone:
		return "None"
	case PostOnlyParamMustPostOnly:
		return "MustPostOnly"
	case PostOnlyParamTryPostOnly:
		return "TryPostOnly"
	case PostOnlyParamSlide:
		return "Slide"
	default:
		return ""
	}
}

type ModifyOrderPolicy ag_binary.BorshEnum

const (
	ModifyOrderPolicyTryModify ModifyOrderPolicy = iota
	ModifyOrderPolicyMustModify
)

func (value ModifyOrderPolicy) String() string {
	switch value {
	case ModifyOrderPolicyTryModify:
		return "TryModify"
	case ModifyOrderPolicyMustModify:
		return "MustModify"
	default:
		return ""
	}
}

type PerpOperation ag_binary.BorshEnum

const (
	PerpOperationUpdateFunding PerpOperation = iota
	PerpOperationAmmFill
	PerpOperationFill
	PerpOperationSettlePnl
	PerpOperationSettlePnlWithPosition
	PerpOperationLiquidation
)

func (value PerpOperation) String() string {
	switch value {
	case PerpOperationUpdateFunding:
		return "UpdateFunding"
	case PerpOperationAmmFill:
		return "AmmFill"
	case PerpOperationFill:
		return "Fill"
	case PerpOperationSettlePnl:
		return "SettlePnl"
	case PerpOperationSettlePnlWithPosition:
		return "SettlePnlWithPosition"
	case PerpOperationLiquidation:
		return "Liquidation"
	default:
		return ""
	}
}

type SpotOperation ag_binary.BorshEnum

const (
	SpotOperationUpdateCumulativeInterest SpotOperation = iota
	SpotOperationFill
	SpotOperationWithdraw
	SpotOperationLiquidation
)

func (value SpotOperation) String() string {
	switch value {
	case SpotOperationUpdateCumulativeInterest:
		return "UpdateCumulativeInterest"
	case SpotOperationFill:
		return "Fill"
	case SpotOperationWithdraw:
		return "Withdraw"
	case SpotOperationLiquidation:
		return "Liquidation"
	default:
		return ""
	}
}

type MarketStatus ag_binary.BorshEnum

const (
	MarketStatusInitialized MarketStatus = iota
	MarketStatusActive
	MarketStatusFundingPaused
	MarketStatusAmmPaused
	MarketStatusFillPaused
	MarketStatusWithdrawPaused
	MarketStatusReduceOnly
	MarketStatusSettlement
	MarketStatusDelisted
)

func (value MarketStatus) String() string {
	switch value {
	case MarketStatusInitialized:
		return "Initialized"
	case MarketStatusActive:
		return "Active"
	case MarketStatusFundingPaused:
		return "FundingPaused"
	case MarketStatusAmmPaused:
		return "AmmPaused"
	case MarketStatusFillPaused:
		return "FillPaused"
	case MarketStatusWithdrawPaused:
		return "WithdrawPaused"
	case MarketStatusReduceOnly:
		return "ReduceOnly"
	case MarketStatusSettlement:
		return "Settlement"
	case MarketStatusDelisted:
		return "Delisted"
	default:
		return ""
	}
}

type ContractType ag_binary.BorshEnum

const (
	ContractTypePerpetual ContractType = iota
	ContractTypeFuture
)

func (value ContractType) String() string {
	switch value {
	case ContractTypePerpetual:
		return "Perpetual"
	case ContractTypeFuture:
		return "Future"
	default:
		return ""
	}
}

type ContractTier ag_binary.BorshEnum

const (
	ContractTierA ContractTier = iota
	ContractTierB
	ContractTierC
	ContractTierSpeculative
	ContractTierHighlySpeculative
	ContractTierIsolated
)

func (value ContractTier) String() string {
	switch value {
	case ContractTierA:
		return "A"
	case ContractTierB:
		return "B"
	case ContractTierC:
		return "C"
	case ContractTierSpeculative:
		return "Speculative"
	case ContractTierHighlySpeculative:
		return "HighlySpeculative"
	case ContractTierIsolated:
		return "Isolated"
	default:
		return ""
	}
}

type AMMLiquiditySplit ag_binary.BorshEnum

const (
	AMMLiquiditySplitProtocolOwned AMMLiquiditySplit = iota
	AMMLiquiditySplitLPOwned
	AMMLiquiditySplitShared
)

func (value AMMLiquiditySplit) String() string {
	switch value {
	case AMMLiquiditySplitProtocolOwned:
		return "ProtocolOwned"
	case AMMLiquiditySplitLPOwned:
		return "LPOwned"
	case AMMLiquiditySplitShared:
		return "Shared"
	default:
		return ""
	}
}

type SpotBalanceType ag_binary.BorshEnum

const (
	SpotBalanceTypeDeposit SpotBalanceType = iota
	SpotBalanceTypeBorrow
)

func (value SpotBalanceType) String() string {
	switch value {
	case SpotBalanceTypeDeposit:
		return "Deposit"
	case SpotBalanceTypeBorrow:
		return "Borrow"
	default:
		return ""
	}
}

type SpotFulfillmentConfigStatus ag_binary.BorshEnum

const (
	SpotFulfillmentConfigStatusEnabled SpotFulfillmentConfigStatus = iota
	SpotFulfillmentConfigStatusDisabled
)

func (value SpotFulfillmentConfigStatus) String() string {
	switch value {
	case SpotFulfillmentConfigStatusEnabled:
		return "Enabled"
	case SpotFulfillmentConfigStatusDisabled:
		return "Disabled"
	default:
		return ""
	}
}

type AssetTier ag_binary.BorshEnum

const (
	AssetTierCollateral AssetTier = iota
	AssetTierProtected
	AssetTierCross
	AssetTierIsolated
	AssetTierUnlisted
)

func (value AssetTier) String() string {
	switch value {
	case AssetTierCollateral:
		return "Collateral"
	case AssetTierProtected:
		return "Protected"
	case AssetTierCross:
		return "Cross"
	case AssetTierIsolated:
		return "Isolated"
	case AssetTierUnlisted:
		return "Unlisted"
	default:
		return ""
	}
}

type ExchangeStatus ag_binary.BorshEnum

const (
	ExchangeStatusDepositPaused ExchangeStatus = iota
	ExchangeStatusWithdrawPaused
	ExchangeStatusAmmPaused
	ExchangeStatusFillPaused
	ExchangeStatusLiqPaused
	ExchangeStatusFundingPaused
	ExchangeStatusSettlePnlPaused
)

func (value ExchangeStatus) String() string {
	switch value {
	case ExchangeStatusDepositPaused:
		return "DepositPaused"
	case ExchangeStatusWithdrawPaused:
		return "WithdrawPaused"
	case ExchangeStatusAmmPaused:
		return "AmmPaused"
	case ExchangeStatusFillPaused:
		return "FillPaused"
	case ExchangeStatusLiqPaused:
		return "LiqPaused"
	case ExchangeStatusFundingPaused:
		return "FundingPaused"
	case ExchangeStatusSettlePnlPaused:
		return "SettlePnlPaused"
	default:
		return ""
	}
}

type UserStatus ag_binary.BorshEnum

const (
	UserStatusBeingLiquidated UserStatus = iota
	UserStatusBankrupt
	UserStatusReduceOnly
	UserStatusAdvancedLp
)

func (value UserStatus) String() string {
	switch value {
	case UserStatusBeingLiquidated:
		return "BeingLiquidated"
	case UserStatusBankrupt:
		return "Bankrupt"
	case UserStatusReduceOnly:
		return "ReduceOnly"
	case UserStatusAdvancedLp:
		return "AdvancedLp"
	default:
		return ""
	}
}

type AssetType ag_binary.BorshEnum

const (
	AssetTypeBase AssetType = iota
	AssetTypeQuote
)

func (value AssetType) String() string {
	switch value {
	case AssetTypeBase:
		return "Base"
	case AssetTypeQuote:
		return "Quote"
	default:
		return ""
	}
}

type OrderStatus ag_binary.BorshEnum

const (
	OrderStatusInit OrderStatus = iota
	OrderStatusOpen
	OrderStatusFilled
	OrderStatusCanceled
)

func (value OrderStatus) String() string {
	switch value {
	case OrderStatusInit:
		return "Init"
	case OrderStatusOpen:
		return "Open"
	case OrderStatusFilled:
		return "Filled"
	case OrderStatusCanceled:
		return "Canceled"
	default:
		return ""
	}
}

type OrderType ag_binary.BorshEnum

const (
	OrderTypeMarket OrderType = iota
	OrderTypeLimit
	OrderTypeTriggerMarket
	OrderTypeTriggerLimit
	OrderTypeOracle
)

func (value OrderType) String() string {
	switch value {
	case OrderTypeMarket:
		return "Market"
	case OrderTypeLimit:
		return "Limit"
	case OrderTypeTriggerMarket:
		return "TriggerMarket"
	case OrderTypeTriggerLimit:
		return "TriggerLimit"
	case OrderTypeOracle:
		return "Oracle"
	default:
		return ""
	}
}

type OrderTriggerCondition ag_binary.BorshEnum

const (
	OrderTriggerConditionAbove OrderTriggerCondition = iota
	OrderTriggerConditionBelow
	OrderTriggerConditionTriggeredAbove
	OrderTriggerConditionTriggeredBelow
)

func (value OrderTriggerCondition) String() string {
	switch value {
	case OrderTriggerConditionAbove:
		return "Above"
	case OrderTriggerConditionBelow:
		return "Below"
	case OrderTriggerConditionTriggeredAbove:
		return "TriggeredAbove"
	case OrderTriggerConditionTriggeredBelow:
		return "TriggeredBelow"
	default:
		return ""
	}
}

type MarketType ag_binary.BorshEnum

const (
	MarketTypeSpot MarketType = iota
	MarketTypePerp
)

func (value MarketType) String() string {
	switch value {
	case MarketTypeSpot:
		return "Spot"
	case MarketTypePerp:
		return "Perp"
	default:
		return ""
	}
}
