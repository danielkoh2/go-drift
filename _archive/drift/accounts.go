// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type PhoenixV1FulfillmentConfig struct {
	Pubkey              ag_solanago.PublicKey
	PhoenixProgramId    ag_solanago.PublicKey
	PhoenixLogAuthority ag_solanago.PublicKey
	PhoenixMarket       ag_solanago.PublicKey
	PhoenixBaseVault    ag_solanago.PublicKey
	PhoenixQuoteVault   ag_solanago.PublicKey
	MarketIndex         uint16
	FulfillmentType     SpotFulfillmentType
	Status              SpotFulfillmentConfigStatus
	Padding             [4]uint8
}

var PhoenixV1FulfillmentConfigDiscriminator = [8]byte{233, 45, 62, 40, 35, 129, 48, 72}

func (obj PhoenixV1FulfillmentConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PhoenixV1FulfillmentConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `PhoenixProgramId` param:
	err = encoder.Encode(obj.PhoenixProgramId)
	if err != nil {
		return err
	}
	// Serialize `PhoenixLogAuthority` param:
	err = encoder.Encode(obj.PhoenixLogAuthority)
	if err != nil {
		return err
	}
	// Serialize `PhoenixMarket` param:
	err = encoder.Encode(obj.PhoenixMarket)
	if err != nil {
		return err
	}
	// Serialize `PhoenixBaseVault` param:
	err = encoder.Encode(obj.PhoenixBaseVault)
	if err != nil {
		return err
	}
	// Serialize `PhoenixQuoteVault` param:
	err = encoder.Encode(obj.PhoenixQuoteVault)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `FulfillmentType` param:
	err = encoder.Encode(obj.FulfillmentType)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PhoenixV1FulfillmentConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PhoenixV1FulfillmentConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[233 45 62 40 35 129 48 72]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `PhoenixProgramId`:
	err = decoder.Decode(&obj.PhoenixProgramId)
	if err != nil {
		return err
	}
	// Deserialize `PhoenixLogAuthority`:
	err = decoder.Decode(&obj.PhoenixLogAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PhoenixMarket`:
	err = decoder.Decode(&obj.PhoenixMarket)
	if err != nil {
		return err
	}
	// Deserialize `PhoenixBaseVault`:
	err = decoder.Decode(&obj.PhoenixBaseVault)
	if err != nil {
		return err
	}
	// Deserialize `PhoenixQuoteVault`:
	err = decoder.Decode(&obj.PhoenixQuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `FulfillmentType`:
	err = decoder.Decode(&obj.FulfillmentType)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type SerumV3FulfillmentConfig struct {
	Pubkey            ag_solanago.PublicKey
	SerumProgramId    ag_solanago.PublicKey
	SerumMarket       ag_solanago.PublicKey
	SerumRequestQueue ag_solanago.PublicKey
	SerumEventQueue   ag_solanago.PublicKey
	SerumBids         ag_solanago.PublicKey
	SerumAsks         ag_solanago.PublicKey
	SerumBaseVault    ag_solanago.PublicKey
	SerumQuoteVault   ag_solanago.PublicKey
	SerumOpenOrders   ag_solanago.PublicKey
	SerumSignerNonce  uint64
	MarketIndex       uint16
	FulfillmentType   SpotFulfillmentType
	Status            SpotFulfillmentConfigStatus
	Padding           [4]uint8
}

var SerumV3FulfillmentConfigDiscriminator = [8]byte{65, 160, 197, 112, 239, 168, 103, 185}

func (obj SerumV3FulfillmentConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SerumV3FulfillmentConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `SerumProgramId` param:
	err = encoder.Encode(obj.SerumProgramId)
	if err != nil {
		return err
	}
	// Serialize `SerumMarket` param:
	err = encoder.Encode(obj.SerumMarket)
	if err != nil {
		return err
	}
	// Serialize `SerumRequestQueue` param:
	err = encoder.Encode(obj.SerumRequestQueue)
	if err != nil {
		return err
	}
	// Serialize `SerumEventQueue` param:
	err = encoder.Encode(obj.SerumEventQueue)
	if err != nil {
		return err
	}
	// Serialize `SerumBids` param:
	err = encoder.Encode(obj.SerumBids)
	if err != nil {
		return err
	}
	// Serialize `SerumAsks` param:
	err = encoder.Encode(obj.SerumAsks)
	if err != nil {
		return err
	}
	// Serialize `SerumBaseVault` param:
	err = encoder.Encode(obj.SerumBaseVault)
	if err != nil {
		return err
	}
	// Serialize `SerumQuoteVault` param:
	err = encoder.Encode(obj.SerumQuoteVault)
	if err != nil {
		return err
	}
	// Serialize `SerumOpenOrders` param:
	err = encoder.Encode(obj.SerumOpenOrders)
	if err != nil {
		return err
	}
	// Serialize `SerumSignerNonce` param:
	err = encoder.Encode(obj.SerumSignerNonce)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `FulfillmentType` param:
	err = encoder.Encode(obj.FulfillmentType)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SerumV3FulfillmentConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SerumV3FulfillmentConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[65 160 197 112 239 168 103 185]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `SerumProgramId`:
	err = decoder.Decode(&obj.SerumProgramId)
	if err != nil {
		return err
	}
	// Deserialize `SerumMarket`:
	err = decoder.Decode(&obj.SerumMarket)
	if err != nil {
		return err
	}
	// Deserialize `SerumRequestQueue`:
	err = decoder.Decode(&obj.SerumRequestQueue)
	if err != nil {
		return err
	}
	// Deserialize `SerumEventQueue`:
	err = decoder.Decode(&obj.SerumEventQueue)
	if err != nil {
		return err
	}
	// Deserialize `SerumBids`:
	err = decoder.Decode(&obj.SerumBids)
	if err != nil {
		return err
	}
	// Deserialize `SerumAsks`:
	err = decoder.Decode(&obj.SerumAsks)
	if err != nil {
		return err
	}
	// Deserialize `SerumBaseVault`:
	err = decoder.Decode(&obj.SerumBaseVault)
	if err != nil {
		return err
	}
	// Deserialize `SerumQuoteVault`:
	err = decoder.Decode(&obj.SerumQuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `SerumOpenOrders`:
	err = decoder.Decode(&obj.SerumOpenOrders)
	if err != nil {
		return err
	}
	// Deserialize `SerumSignerNonce`:
	err = decoder.Decode(&obj.SerumSignerNonce)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `FulfillmentType`:
	err = decoder.Decode(&obj.FulfillmentType)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type InsuranceFundStake struct {
	Authority                 ag_solanago.PublicKey
	IfShares                  ag_binary.Uint128
	LastWithdrawRequestShares ag_binary.Uint128
	IfBase                    ag_binary.Uint128
	LastValidTs               int64
	LastWithdrawRequestValue  uint64
	LastWithdrawRequestTs     int64
	CostBasis                 int64
	MarketIndex               uint16
	Padding                   [14]uint8
}

var InsuranceFundStakeDiscriminator = [8]byte{110, 202, 14, 42, 95, 73, 90, 95}

func (obj InsuranceFundStake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InsuranceFundStakeDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `IfShares` param:
	err = encoder.Encode(obj.IfShares)
	if err != nil {
		return err
	}
	// Serialize `LastWithdrawRequestShares` param:
	err = encoder.Encode(obj.LastWithdrawRequestShares)
	if err != nil {
		return err
	}
	// Serialize `IfBase` param:
	err = encoder.Encode(obj.IfBase)
	if err != nil {
		return err
	}
	// Serialize `LastValidTs` param:
	err = encoder.Encode(obj.LastValidTs)
	if err != nil {
		return err
	}
	// Serialize `LastWithdrawRequestValue` param:
	err = encoder.Encode(obj.LastWithdrawRequestValue)
	if err != nil {
		return err
	}
	// Serialize `LastWithdrawRequestTs` param:
	err = encoder.Encode(obj.LastWithdrawRequestTs)
	if err != nil {
		return err
	}
	// Serialize `CostBasis` param:
	err = encoder.Encode(obj.CostBasis)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceFundStake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InsuranceFundStakeDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[110 202 14 42 95 73 90 95]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `IfShares`:
	err = decoder.Decode(&obj.IfShares)
	if err != nil {
		return err
	}
	// Deserialize `LastWithdrawRequestShares`:
	err = decoder.Decode(&obj.LastWithdrawRequestShares)
	if err != nil {
		return err
	}
	// Deserialize `IfBase`:
	err = decoder.Decode(&obj.IfBase)
	if err != nil {
		return err
	}
	// Deserialize `LastValidTs`:
	err = decoder.Decode(&obj.LastValidTs)
	if err != nil {
		return err
	}
	// Deserialize `LastWithdrawRequestValue`:
	err = decoder.Decode(&obj.LastWithdrawRequestValue)
	if err != nil {
		return err
	}
	// Deserialize `LastWithdrawRequestTs`:
	err = decoder.Decode(&obj.LastWithdrawRequestTs)
	if err != nil {
		return err
	}
	// Deserialize `CostBasis`:
	err = decoder.Decode(&obj.CostBasis)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolIfSharesTransferConfig struct {
	WhitelistedSigners   [4]ag_solanago.PublicKey
	MaxTransferPerEpoch  ag_binary.Uint128
	CurrentEpochTransfer ag_binary.Uint128
	NextEpochTs          int64
	Padding              [8]ag_binary.Uint128
}

var ProtocolIfSharesTransferConfigDiscriminator = [8]byte{188, 1, 213, 98, 23, 148, 30, 1}

func (obj ProtocolIfSharesTransferConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProtocolIfSharesTransferConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `WhitelistedSigners` param:
	err = encoder.Encode(obj.WhitelistedSigners)
	if err != nil {
		return err
	}
	// Serialize `MaxTransferPerEpoch` param:
	err = encoder.Encode(obj.MaxTransferPerEpoch)
	if err != nil {
		return err
	}
	// Serialize `CurrentEpochTransfer` param:
	err = encoder.Encode(obj.CurrentEpochTransfer)
	if err != nil {
		return err
	}
	// Serialize `NextEpochTs` param:
	err = encoder.Encode(obj.NextEpochTs)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolIfSharesTransferConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProtocolIfSharesTransferConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[188 1 213 98 23 148 30 1]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `WhitelistedSigners`:
	err = decoder.Decode(&obj.WhitelistedSigners)
	if err != nil {
		return err
	}
	// Deserialize `MaxTransferPerEpoch`:
	err = decoder.Decode(&obj.MaxTransferPerEpoch)
	if err != nil {
		return err
	}
	// Deserialize `CurrentEpochTransfer`:
	err = decoder.Decode(&obj.CurrentEpochTransfer)
	if err != nil {
		return err
	}
	// Deserialize `NextEpochTs`:
	err = decoder.Decode(&obj.NextEpochTs)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PrelaunchOracle struct {
	Price             int64
	MaxPrice          int64
	Confidence        uint64
	LastUpdateSlot    uint64
	AmmLastUpdateSlot uint64
	PerpMarketIndex   uint16
	Padding           [70]uint8
}

var PrelaunchOracleDiscriminator = [8]byte{92, 14, 139, 234, 72, 244, 68, 26}

func (obj PrelaunchOracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PrelaunchOracleDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MaxPrice` param:
	err = encoder.Encode(obj.MaxPrice)
	if err != nil {
		return err
	}
	// Serialize `Confidence` param:
	err = encoder.Encode(obj.Confidence)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateSlot` param:
	err = encoder.Encode(obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Serialize `AmmLastUpdateSlot` param:
	err = encoder.Encode(obj.AmmLastUpdateSlot)
	if err != nil {
		return err
	}
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PrelaunchOracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PrelaunchOracleDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[92 14 139 234 72 244 68 26]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MaxPrice`:
	err = decoder.Decode(&obj.MaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `Confidence`:
	err = decoder.Decode(&obj.Confidence)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateSlot`:
	err = decoder.Decode(&obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Deserialize `AmmLastUpdateSlot`:
	err = decoder.Decode(&obj.AmmLastUpdateSlot)
	if err != nil {
		return err
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PerpMarket struct {
	// The perp market's address. It is a pda of the market index
	Pubkey ag_solanago.PublicKey

	// The automated market maker
	Amm AMM

	// The market's pnl pool. When users settle negative pnl, the balance increases.
	// When users settle positive pnl, the balance decreases. Can not go negative.
	PnlPool PoolBalance

	// Encoded display name for the perp market e.g. SOL-PERP
	Name [32]uint8

	// The perp market's claim on the insurance fund
	InsuranceClaim InsuranceClaim

	// The max pnl imbalance before positive pnl asset weight is discounted
	// pnl imbalance is the difference between long and short pnl. When it's greater than 0,
	// the amm has negative pnl and the initial asset weight for positive pnl is discounted
	// precision = QUOTE_PRECISION
	UnrealizedPnlMaxImbalance uint64

	// The ts when the market will be expired. Only set if market is in reduce only mode
	ExpiryTs int64

	// The price at which positions will be settled. Only set if market is expired
	// precision = PRICE_PRECISION
	ExpiryPrice int64

	// Every trade has a fill record id. This is the next id to be used
	NextFillRecordId uint64

	// Every funding rate update has a record id. This is the next id to be used
	NextFundingRateRecordId uint64

	// Every amm k updated has a record id. This is the next id to be used
	NextCurveRecordId uint64

	// The initial margin fraction factor. Used to increase margin ratio for large positions
	// precision: MARGIN_PRECISION
	ImfFactor uint32

	// The imf factor for unrealized pnl. Used to discount asset weight for large positive pnl
	// precision: MARGIN_PRECISION
	UnrealizedPnlImfFactor uint32

	// The fee the liquidator is paid for taking over perp position
	// precision: LIQUIDATOR_FEE_PRECISION
	LiquidatorFee uint32

	// The fee the insurance fund receives from liquidation
	// precision: LIQUIDATOR_FEE_PRECISION
	IfLiquidationFee uint32

	// The margin ratio which determines how much collateral is required to open a position
	// e.g. margin ratio of .1 means a user must have $100 of total collateral to open a $1000 position
	// precision: MARGIN_PRECISION
	MarginRatioInitial uint32

	// The margin ratio which determines when a user will be liquidated
	// e.g. margin ratio of .05 means a user must have $50 of total collateral to maintain a $1000 position
	// else they will be liquidated
	// precision: MARGIN_PRECISION
	MarginRatioMaintenance uint32

	// The initial asset weight for positive pnl. Negative pnl always has an asset weight of 1
	// precision: SPOT_WEIGHT_PRECISION
	UnrealizedPnlInitialAssetWeight uint32

	// The maintenance asset weight for positive pnl. Negative pnl always has an asset weight of 1
	// precision: SPOT_WEIGHT_PRECISION
	UnrealizedPnlMaintenanceAssetWeight uint32

	// number of users in a position (base)
	NumberOfUsersWithBase uint32

	// number of users in a position (pnl) or pnl (quote)
	NumberOfUsers uint32
	MarketIndex   uint16

	// Whether a market is active, reduce only, expired, etc
	// Affects whether users can open/close positions
	Status MarketStatus

	// Currently only Perpetual markets are supported
	ContractType ContractType

	// The contract tier determines how much insurance a market can receive, with more speculative markets receiving less insurance
	// It also influences the order perp markets can be liquidated, with less speculative markets being liquidated first
	ContractTier     ContractTier
	PausedOperations uint8

	// The spot market that pnl is settled in
	QuoteSpotMarketIndex uint16

	// Between -100 and 100, represents what % to increase/decrease the fee by
	// E.g. if this is -50 and the fee is 5bps, the new fee will be 2.5bps
	// if this is 50 and the fee is 5bps, the new fee will be 7.5bps
	FeeAdjustment int16
	Padding       [46]uint8
}

var PerpMarketDiscriminator = [8]byte{10, 223, 12, 44, 107, 245, 55, 247}

func (obj PerpMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PerpMarketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `Amm` param:
	err = encoder.Encode(obj.Amm)
	if err != nil {
		return err
	}
	// Serialize `PnlPool` param:
	err = encoder.Encode(obj.PnlPool)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `InsuranceClaim` param:
	err = encoder.Encode(obj.InsuranceClaim)
	if err != nil {
		return err
	}
	// Serialize `UnrealizedPnlMaxImbalance` param:
	err = encoder.Encode(obj.UnrealizedPnlMaxImbalance)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTs` param:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Serialize `ExpiryPrice` param:
	err = encoder.Encode(obj.ExpiryPrice)
	if err != nil {
		return err
	}
	// Serialize `NextFillRecordId` param:
	err = encoder.Encode(obj.NextFillRecordId)
	if err != nil {
		return err
	}
	// Serialize `NextFundingRateRecordId` param:
	err = encoder.Encode(obj.NextFundingRateRecordId)
	if err != nil {
		return err
	}
	// Serialize `NextCurveRecordId` param:
	err = encoder.Encode(obj.NextCurveRecordId)
	if err != nil {
		return err
	}
	// Serialize `ImfFactor` param:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return err
	}
	// Serialize `UnrealizedPnlImfFactor` param:
	err = encoder.Encode(obj.UnrealizedPnlImfFactor)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorFee` param:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Serialize `IfLiquidationFee` param:
	err = encoder.Encode(obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Serialize `MarginRatioInitial` param:
	err = encoder.Encode(obj.MarginRatioInitial)
	if err != nil {
		return err
	}
	// Serialize `MarginRatioMaintenance` param:
	err = encoder.Encode(obj.MarginRatioMaintenance)
	if err != nil {
		return err
	}
	// Serialize `UnrealizedPnlInitialAssetWeight` param:
	err = encoder.Encode(obj.UnrealizedPnlInitialAssetWeight)
	if err != nil {
		return err
	}
	// Serialize `UnrealizedPnlMaintenanceAssetWeight` param:
	err = encoder.Encode(obj.UnrealizedPnlMaintenanceAssetWeight)
	if err != nil {
		return err
	}
	// Serialize `NumberOfUsersWithBase` param:
	err = encoder.Encode(obj.NumberOfUsersWithBase)
	if err != nil {
		return err
	}
	// Serialize `NumberOfUsers` param:
	err = encoder.Encode(obj.NumberOfUsers)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `ContractType` param:
	err = encoder.Encode(obj.ContractType)
	if err != nil {
		return err
	}
	// Serialize `ContractTier` param:
	err = encoder.Encode(obj.ContractTier)
	if err != nil {
		return err
	}
	// Serialize `PausedOperations` param:
	err = encoder.Encode(obj.PausedOperations)
	if err != nil {
		return err
	}
	// Serialize `QuoteSpotMarketIndex` param:
	err = encoder.Encode(obj.QuoteSpotMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `FeeAdjustment` param:
	err = encoder.Encode(obj.FeeAdjustment)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PerpMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PerpMarketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[10 223 12 44 107 245 55 247]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `Amm`:
	err = decoder.Decode(&obj.Amm)
	if err != nil {
		return err
	}
	// Deserialize `PnlPool`:
	err = decoder.Decode(&obj.PnlPool)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceClaim`:
	err = decoder.Decode(&obj.InsuranceClaim)
	if err != nil {
		return err
	}
	// Deserialize `UnrealizedPnlMaxImbalance`:
	err = decoder.Decode(&obj.UnrealizedPnlMaxImbalance)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryPrice`:
	err = decoder.Decode(&obj.ExpiryPrice)
	if err != nil {
		return err
	}
	// Deserialize `NextFillRecordId`:
	err = decoder.Decode(&obj.NextFillRecordId)
	if err != nil {
		return err
	}
	// Deserialize `NextFundingRateRecordId`:
	err = decoder.Decode(&obj.NextFundingRateRecordId)
	if err != nil {
		return err
	}
	// Deserialize `NextCurveRecordId`:
	err = decoder.Decode(&obj.NextCurveRecordId)
	if err != nil {
		return err
	}
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return err
	}
	// Deserialize `UnrealizedPnlImfFactor`:
	err = decoder.Decode(&obj.UnrealizedPnlImfFactor)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Deserialize `IfLiquidationFee`:
	err = decoder.Decode(&obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Deserialize `MarginRatioInitial`:
	err = decoder.Decode(&obj.MarginRatioInitial)
	if err != nil {
		return err
	}
	// Deserialize `MarginRatioMaintenance`:
	err = decoder.Decode(&obj.MarginRatioMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `UnrealizedPnlInitialAssetWeight`:
	err = decoder.Decode(&obj.UnrealizedPnlInitialAssetWeight)
	if err != nil {
		return err
	}
	// Deserialize `UnrealizedPnlMaintenanceAssetWeight`:
	err = decoder.Decode(&obj.UnrealizedPnlMaintenanceAssetWeight)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfUsersWithBase`:
	err = decoder.Decode(&obj.NumberOfUsersWithBase)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfUsers`:
	err = decoder.Decode(&obj.NumberOfUsers)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `ContractType`:
	err = decoder.Decode(&obj.ContractType)
	if err != nil {
		return err
	}
	// Deserialize `ContractTier`:
	err = decoder.Decode(&obj.ContractTier)
	if err != nil {
		return err
	}
	// Deserialize `PausedOperations`:
	err = decoder.Decode(&obj.PausedOperations)
	if err != nil {
		return err
	}
	// Deserialize `QuoteSpotMarketIndex`:
	err = decoder.Decode(&obj.QuoteSpotMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `FeeAdjustment`:
	err = decoder.Decode(&obj.FeeAdjustment)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type SpotMarket struct {
	// The address of the spot market. It is a pda of the market index
	Pubkey ag_solanago.PublicKey

	// The oracle used to price the markets deposits/borrows
	Oracle ag_solanago.PublicKey

	// The token mint of the market
	Mint ag_solanago.PublicKey

	// The vault used to store the market's deposits
	// The amount in the vault should be equal to or greater than deposits - borrows
	Vault ag_solanago.PublicKey

	// The encoded display name for the market e.g. SOL
	Name                 [32]uint8
	HistoricalOracleData HistoricalOracleData
	HistoricalIndexData  HistoricalIndexData

	// Revenue the protocol has collected in this markets token
	// e.g. for SOL-PERP, funds can be settled in usdc and will flow into the USDC revenue pool
	RevenuePool PoolBalance

	// The fees collected from swaps between this market and the quote market
	// Is settled to the quote markets revenue pool
	SpotFeePool PoolBalance

	// Details on the insurance fund covering bankruptcies in this markets token
	// Covers bankruptcies for borrows with this markets token and perps settling in this markets token
	InsuranceFund InsuranceFund

	// The total spot fees collected for this market
	// precision: QUOTE_PRECISION
	TotalSpotFee ag_binary.Uint128

	// The sum of the scaled balances for deposits across users and pool balances
	// To convert to the deposit token amount, multiply by the cumulative deposit interest
	// precision: SPOT_BALANCE_PRECISION
	DepositBalance ag_binary.Uint128

	// The sum of the scaled balances for borrows across users and pool balances
	// To convert to the borrow token amount, multiply by the cumulative borrow interest
	// precision: SPOT_BALANCE_PRECISION
	BorrowBalance ag_binary.Uint128

	// The cumulative interest earned by depositors
	// Used to calculate the deposit token amount from the deposit balance
	// precision: SPOT_CUMULATIVE_INTEREST_PRECISION
	CumulativeDepositInterest ag_binary.Uint128

	// The cumulative interest earned by borrowers
	// Used to calculate the borrow token amount from the borrow balance
	// precision: SPOT_CUMULATIVE_INTEREST_PRECISION
	CumulativeBorrowInterest ag_binary.Uint128

	// The total socialized loss from borrows, in the mint's token
	// precision: token mint precision
	TotalSocialLoss ag_binary.Uint128

	// The total socialized loss from borrows, in the quote market's token
	// preicision: QUOTE_PRECISION
	TotalQuoteSocialLoss ag_binary.Uint128

	// no withdraw limits/guards when deposits below this threshold
	// precision: token mint precision
	WithdrawGuardThreshold uint64

	// The max amount of token deposits in this market
	// 0 if there is no limit
	// precision: token mint precision
	MaxTokenDeposits uint64

	// 24hr average of deposit token amount
	// precision: token mint precision
	DepositTokenTwap uint64

	// 24hr average of borrow token amount
	// precision: token mint precision
	BorrowTokenTwap uint64

	// 24hr average of utilization
	// which is borrow amount over token amount
	// precision: SPOT_UTILIZATION_PRECISION
	UtilizationTwap uint64

	// Last time the cumulative deposit and borrow interest was updated
	LastInterestTs uint64

	// Last time the deposit/borrow/utilization averages were updated
	LastTwapTs uint64

	// The time the market is set to expire. Only set if market is in reduce only mode
	ExpiryTs int64

	// Spot orders must be a multiple of the step size
	// precision: token mint precision
	OrderStepSize uint64

	// Spot orders must be a multiple of the tick size
	// precision: PRICE_PRECISION
	OrderTickSize uint64

	// The minimum order size
	// precision: token mint precision
	MinOrderSize uint64

	// The maximum spot position size
	// if the limit is 0, there is no limit
	// precision: token mint precision
	MaxPositionSize uint64

	// Every spot trade has a fill record id. This is the next id to use
	NextFillRecordId uint64

	// Every deposit has a deposit record id. This is the next id to use
	NextDepositRecordId uint64

	// The initial asset weight used to calculate a deposits contribution to a users initial total collateral
	// e.g. if the asset weight is .8, $100 of deposits contributes $80 to the users initial total collateral
	// precision: SPOT_WEIGHT_PRECISION
	InitialAssetWeight uint32

	// The maintenance asset weight used to calculate a deposits contribution to a users maintenance total collateral
	// e.g. if the asset weight is .9, $100 of deposits contributes $90 to the users maintenance total collateral
	// precision: SPOT_WEIGHT_PRECISION
	MaintenanceAssetWeight uint32

	// The initial liability weight used to calculate a borrows contribution to a users initial margin requirement
	// e.g. if the liability weight is .9, $100 of borrows contributes $90 to the users initial margin requirement
	// precision: SPOT_WEIGHT_PRECISION
	InitialLiabilityWeight uint32

	// The maintenance liability weight used to calculate a borrows contribution to a users maintenance margin requirement
	// e.g. if the liability weight is .8, $100 of borrows contributes $80 to the users maintenance margin requirement
	// precision: SPOT_WEIGHT_PRECISION
	MaintenanceLiabilityWeight uint32

	// The initial margin fraction factor. Used to increase liability weight/decrease asset weight for large positions
	// precision: MARGIN_PRECISION
	ImfFactor uint32

	// The fee the liquidator is paid for taking over borrow/deposit
	// precision: LIQUIDATOR_FEE_PRECISION
	LiquidatorFee uint32

	// The fee the insurance fund receives from liquidation
	// precision: LIQUIDATOR_FEE_PRECISION
	IfLiquidationFee uint32

	// The optimal utilization rate for this market.
	// Used to determine the markets borrow rate
	// precision: SPOT_UTILIZATION_PRECISION
	OptimalUtilization uint32

	// The borrow rate for this market when the market has optimal utilization
	// precision: SPOT_RATE_PRECISION
	OptimalBorrowRate uint32

	// The borrow rate for this market when the market has 1000 utilization
	// precision: SPOT_RATE_PRECISION
	MaxBorrowRate uint32

	// The market's token mint's decimals. To from decimals to a precision, 10^decimals
	Decimals    uint32
	MarketIndex uint16

	// Whether or not spot trading is enabled
	OrdersEnabled bool
	OracleSource  OracleSource
	Status        MarketStatus

	// The asset tier affects how a deposit can be used as collateral and the priority for a borrow being liquidated
	AssetTier        AssetTier
	PausedOperations uint8
	Padding2         uint8
	FeeAdjustment    int16
	Padding1         [2]uint8

	// For swaps, the amount of token loaned out in the begin_swap ix
	// precision: token mint precision
	FlashLoanAmount uint64

	// For swaps, the amount in the users token account in the begin_swap ix
	// Used to calculate how much of the token left the system in end_swap ix
	// precision: token mint precision
	FlashLoanInitialTokenAmount uint64

	// The total fees received from swaps
	// precision: token mint precision
	TotalSwapFee uint64

	// When to begin scaling down the initial asset weight
	// disabled when 0
	// precision: QUOTE_PRECISION
	ScaleInitialAssetWeightStart uint64
	Padding                      [48]uint8
}

var SpotMarketDiscriminator = [8]byte{100, 177, 8, 107, 168, 65, 65, 39}

func (obj SpotMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SpotMarketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `HistoricalOracleData` param:
	err = encoder.Encode(obj.HistoricalOracleData)
	if err != nil {
		return err
	}
	// Serialize `HistoricalIndexData` param:
	err = encoder.Encode(obj.HistoricalIndexData)
	if err != nil {
		return err
	}
	// Serialize `RevenuePool` param:
	err = encoder.Encode(obj.RevenuePool)
	if err != nil {
		return err
	}
	// Serialize `SpotFeePool` param:
	err = encoder.Encode(obj.SpotFeePool)
	if err != nil {
		return err
	}
	// Serialize `InsuranceFund` param:
	err = encoder.Encode(obj.InsuranceFund)
	if err != nil {
		return err
	}
	// Serialize `TotalSpotFee` param:
	err = encoder.Encode(obj.TotalSpotFee)
	if err != nil {
		return err
	}
	// Serialize `DepositBalance` param:
	err = encoder.Encode(obj.DepositBalance)
	if err != nil {
		return err
	}
	// Serialize `BorrowBalance` param:
	err = encoder.Encode(obj.BorrowBalance)
	if err != nil {
		return err
	}
	// Serialize `CumulativeDepositInterest` param:
	err = encoder.Encode(obj.CumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Serialize `CumulativeBorrowInterest` param:
	err = encoder.Encode(obj.CumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Serialize `TotalSocialLoss` param:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteSocialLoss` param:
	err = encoder.Encode(obj.TotalQuoteSocialLoss)
	if err != nil {
		return err
	}
	// Serialize `WithdrawGuardThreshold` param:
	err = encoder.Encode(obj.WithdrawGuardThreshold)
	if err != nil {
		return err
	}
	// Serialize `MaxTokenDeposits` param:
	err = encoder.Encode(obj.MaxTokenDeposits)
	if err != nil {
		return err
	}
	// Serialize `DepositTokenTwap` param:
	err = encoder.Encode(obj.DepositTokenTwap)
	if err != nil {
		return err
	}
	// Serialize `BorrowTokenTwap` param:
	err = encoder.Encode(obj.BorrowTokenTwap)
	if err != nil {
		return err
	}
	// Serialize `UtilizationTwap` param:
	err = encoder.Encode(obj.UtilizationTwap)
	if err != nil {
		return err
	}
	// Serialize `LastInterestTs` param:
	err = encoder.Encode(obj.LastInterestTs)
	if err != nil {
		return err
	}
	// Serialize `LastTwapTs` param:
	err = encoder.Encode(obj.LastTwapTs)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTs` param:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Serialize `OrderStepSize` param:
	err = encoder.Encode(obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Serialize `OrderTickSize` param:
	err = encoder.Encode(obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Serialize `MinOrderSize` param:
	err = encoder.Encode(obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Serialize `MaxPositionSize` param:
	err = encoder.Encode(obj.MaxPositionSize)
	if err != nil {
		return err
	}
	// Serialize `NextFillRecordId` param:
	err = encoder.Encode(obj.NextFillRecordId)
	if err != nil {
		return err
	}
	// Serialize `NextDepositRecordId` param:
	err = encoder.Encode(obj.NextDepositRecordId)
	if err != nil {
		return err
	}
	// Serialize `InitialAssetWeight` param:
	err = encoder.Encode(obj.InitialAssetWeight)
	if err != nil {
		return err
	}
	// Serialize `MaintenanceAssetWeight` param:
	err = encoder.Encode(obj.MaintenanceAssetWeight)
	if err != nil {
		return err
	}
	// Serialize `InitialLiabilityWeight` param:
	err = encoder.Encode(obj.InitialLiabilityWeight)
	if err != nil {
		return err
	}
	// Serialize `MaintenanceLiabilityWeight` param:
	err = encoder.Encode(obj.MaintenanceLiabilityWeight)
	if err != nil {
		return err
	}
	// Serialize `ImfFactor` param:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorFee` param:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Serialize `IfLiquidationFee` param:
	err = encoder.Encode(obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Serialize `OptimalUtilization` param:
	err = encoder.Encode(obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Serialize `OptimalBorrowRate` param:
	err = encoder.Encode(obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Serialize `MaxBorrowRate` param:
	err = encoder.Encode(obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OrdersEnabled` param:
	err = encoder.Encode(obj.OrdersEnabled)
	if err != nil {
		return err
	}
	// Serialize `OracleSource` param:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `AssetTier` param:
	err = encoder.Encode(obj.AssetTier)
	if err != nil {
		return err
	}
	// Serialize `PausedOperations` param:
	err = encoder.Encode(obj.PausedOperations)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `FeeAdjustment` param:
	err = encoder.Encode(obj.FeeAdjustment)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `FlashLoanAmount` param:
	err = encoder.Encode(obj.FlashLoanAmount)
	if err != nil {
		return err
	}
	// Serialize `FlashLoanInitialTokenAmount` param:
	err = encoder.Encode(obj.FlashLoanInitialTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalSwapFee` param:
	err = encoder.Encode(obj.TotalSwapFee)
	if err != nil {
		return err
	}
	// Serialize `ScaleInitialAssetWeightStart` param:
	err = encoder.Encode(obj.ScaleInitialAssetWeightStart)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SpotMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SpotMarketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[100 177 8 107 168 65 65 39]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `HistoricalOracleData`:
	err = decoder.Decode(&obj.HistoricalOracleData)
	if err != nil {
		return err
	}
	// Deserialize `HistoricalIndexData`:
	err = decoder.Decode(&obj.HistoricalIndexData)
	if err != nil {
		return err
	}
	// Deserialize `RevenuePool`:
	err = decoder.Decode(&obj.RevenuePool)
	if err != nil {
		return err
	}
	// Deserialize `SpotFeePool`:
	err = decoder.Decode(&obj.SpotFeePool)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceFund`:
	err = decoder.Decode(&obj.InsuranceFund)
	if err != nil {
		return err
	}
	// Deserialize `TotalSpotFee`:
	err = decoder.Decode(&obj.TotalSpotFee)
	if err != nil {
		return err
	}
	// Deserialize `DepositBalance`:
	err = decoder.Decode(&obj.DepositBalance)
	if err != nil {
		return err
	}
	// Deserialize `BorrowBalance`:
	err = decoder.Decode(&obj.BorrowBalance)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeDepositInterest`:
	err = decoder.Decode(&obj.CumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeBorrowInterest`:
	err = decoder.Decode(&obj.CumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteSocialLoss`:
	err = decoder.Decode(&obj.TotalQuoteSocialLoss)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawGuardThreshold`:
	err = decoder.Decode(&obj.WithdrawGuardThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MaxTokenDeposits`:
	err = decoder.Decode(&obj.MaxTokenDeposits)
	if err != nil {
		return err
	}
	// Deserialize `DepositTokenTwap`:
	err = decoder.Decode(&obj.DepositTokenTwap)
	if err != nil {
		return err
	}
	// Deserialize `BorrowTokenTwap`:
	err = decoder.Decode(&obj.BorrowTokenTwap)
	if err != nil {
		return err
	}
	// Deserialize `UtilizationTwap`:
	err = decoder.Decode(&obj.UtilizationTwap)
	if err != nil {
		return err
	}
	// Deserialize `LastInterestTs`:
	err = decoder.Decode(&obj.LastInterestTs)
	if err != nil {
		return err
	}
	// Deserialize `LastTwapTs`:
	err = decoder.Decode(&obj.LastTwapTs)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Deserialize `OrderStepSize`:
	err = decoder.Decode(&obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Deserialize `OrderTickSize`:
	err = decoder.Decode(&obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Deserialize `MinOrderSize`:
	err = decoder.Decode(&obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Deserialize `MaxPositionSize`:
	err = decoder.Decode(&obj.MaxPositionSize)
	if err != nil {
		return err
	}
	// Deserialize `NextFillRecordId`:
	err = decoder.Decode(&obj.NextFillRecordId)
	if err != nil {
		return err
	}
	// Deserialize `NextDepositRecordId`:
	err = decoder.Decode(&obj.NextDepositRecordId)
	if err != nil {
		return err
	}
	// Deserialize `InitialAssetWeight`:
	err = decoder.Decode(&obj.InitialAssetWeight)
	if err != nil {
		return err
	}
	// Deserialize `MaintenanceAssetWeight`:
	err = decoder.Decode(&obj.MaintenanceAssetWeight)
	if err != nil {
		return err
	}
	// Deserialize `InitialLiabilityWeight`:
	err = decoder.Decode(&obj.InitialLiabilityWeight)
	if err != nil {
		return err
	}
	// Deserialize `MaintenanceLiabilityWeight`:
	err = decoder.Decode(&obj.MaintenanceLiabilityWeight)
	if err != nil {
		return err
	}
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Deserialize `IfLiquidationFee`:
	err = decoder.Decode(&obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Deserialize `OptimalUtilization`:
	err = decoder.Decode(&obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Deserialize `OptimalBorrowRate`:
	err = decoder.Decode(&obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxBorrowRate`:
	err = decoder.Decode(&obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OrdersEnabled`:
	err = decoder.Decode(&obj.OrdersEnabled)
	if err != nil {
		return err
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `AssetTier`:
	err = decoder.Decode(&obj.AssetTier)
	if err != nil {
		return err
	}
	// Deserialize `PausedOperations`:
	err = decoder.Decode(&obj.PausedOperations)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `FeeAdjustment`:
	err = decoder.Decode(&obj.FeeAdjustment)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `FlashLoanAmount`:
	err = decoder.Decode(&obj.FlashLoanAmount)
	if err != nil {
		return err
	}
	// Deserialize `FlashLoanInitialTokenAmount`:
	err = decoder.Decode(&obj.FlashLoanInitialTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalSwapFee`:
	err = decoder.Decode(&obj.TotalSwapFee)
	if err != nil {
		return err
	}
	// Deserialize `ScaleInitialAssetWeightStart`:
	err = decoder.Decode(&obj.ScaleInitialAssetWeightStart)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	Admin                         ag_solanago.PublicKey
	WhitelistMint                 ag_solanago.PublicKey
	DiscountMint                  ag_solanago.PublicKey
	Signer                        ag_solanago.PublicKey
	SrmVault                      ag_solanago.PublicKey
	PerpFeeStructure              FeeStructure
	SpotFeeStructure              FeeStructure
	OracleGuardRails              OracleGuardRails
	NumberOfAuthorities           uint64
	NumberOfSubAccounts           uint64
	LpCooldownTime                uint64
	LiquidationMarginBufferRatio  uint32
	SettlementDuration            uint16
	NumberOfMarkets               uint16
	NumberOfSpotMarkets           uint16
	SignerNonce                   uint8
	MinPerpAuctionDuration        uint8
	DefaultMarketOrderTimeInForce uint8
	DefaultSpotAuctionDuration    uint8
	ExchangeStatus                uint8
	LiquidationDuration           uint8
	InitialPctToLiquidate         uint16
	MaxNumberOfSubAccounts        uint16
	MaxInitializeUserFee          uint16
	Padding                       [10]uint8
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMint` param:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Serialize `DiscountMint` param:
	err = encoder.Encode(obj.DiscountMint)
	if err != nil {
		return err
	}
	// Serialize `Signer` param:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return err
	}
	// Serialize `SrmVault` param:
	err = encoder.Encode(obj.SrmVault)
	if err != nil {
		return err
	}
	// Serialize `PerpFeeStructure` param:
	err = encoder.Encode(obj.PerpFeeStructure)
	if err != nil {
		return err
	}
	// Serialize `SpotFeeStructure` param:
	err = encoder.Encode(obj.SpotFeeStructure)
	if err != nil {
		return err
	}
	// Serialize `OracleGuardRails` param:
	err = encoder.Encode(obj.OracleGuardRails)
	if err != nil {
		return err
	}
	// Serialize `NumberOfAuthorities` param:
	err = encoder.Encode(obj.NumberOfAuthorities)
	if err != nil {
		return err
	}
	// Serialize `NumberOfSubAccounts` param:
	err = encoder.Encode(obj.NumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Serialize `LpCooldownTime` param:
	err = encoder.Encode(obj.LpCooldownTime)
	if err != nil {
		return err
	}
	// Serialize `LiquidationMarginBufferRatio` param:
	err = encoder.Encode(obj.LiquidationMarginBufferRatio)
	if err != nil {
		return err
	}
	// Serialize `SettlementDuration` param:
	err = encoder.Encode(obj.SettlementDuration)
	if err != nil {
		return err
	}
	// Serialize `NumberOfMarkets` param:
	err = encoder.Encode(obj.NumberOfMarkets)
	if err != nil {
		return err
	}
	// Serialize `NumberOfSpotMarkets` param:
	err = encoder.Encode(obj.NumberOfSpotMarkets)
	if err != nil {
		return err
	}
	// Serialize `SignerNonce` param:
	err = encoder.Encode(obj.SignerNonce)
	if err != nil {
		return err
	}
	// Serialize `MinPerpAuctionDuration` param:
	err = encoder.Encode(obj.MinPerpAuctionDuration)
	if err != nil {
		return err
	}
	// Serialize `DefaultMarketOrderTimeInForce` param:
	err = encoder.Encode(obj.DefaultMarketOrderTimeInForce)
	if err != nil {
		return err
	}
	// Serialize `DefaultSpotAuctionDuration` param:
	err = encoder.Encode(obj.DefaultSpotAuctionDuration)
	if err != nil {
		return err
	}
	// Serialize `ExchangeStatus` param:
	err = encoder.Encode(obj.ExchangeStatus)
	if err != nil {
		return err
	}
	// Serialize `LiquidationDuration` param:
	err = encoder.Encode(obj.LiquidationDuration)
	if err != nil {
		return err
	}
	// Serialize `InitialPctToLiquidate` param:
	err = encoder.Encode(obj.InitialPctToLiquidate)
	if err != nil {
		return err
	}
	// Serialize `MaxNumberOfSubAccounts` param:
	err = encoder.Encode(obj.MaxNumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Serialize `MaxInitializeUserFee` param:
	err = encoder.Encode(obj.MaxInitializeUserFee)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Deserialize `DiscountMint`:
	err = decoder.Decode(&obj.DiscountMint)
	if err != nil {
		return err
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return err
	}
	// Deserialize `SrmVault`:
	err = decoder.Decode(&obj.SrmVault)
	if err != nil {
		return err
	}
	// Deserialize `PerpFeeStructure`:
	err = decoder.Decode(&obj.PerpFeeStructure)
	if err != nil {
		return err
	}
	// Deserialize `SpotFeeStructure`:
	err = decoder.Decode(&obj.SpotFeeStructure)
	if err != nil {
		return err
	}
	// Deserialize `OracleGuardRails`:
	err = decoder.Decode(&obj.OracleGuardRails)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfAuthorities`:
	err = decoder.Decode(&obj.NumberOfAuthorities)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfSubAccounts`:
	err = decoder.Decode(&obj.NumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Deserialize `LpCooldownTime`:
	err = decoder.Decode(&obj.LpCooldownTime)
	if err != nil {
		return err
	}
	// Deserialize `LiquidationMarginBufferRatio`:
	err = decoder.Decode(&obj.LiquidationMarginBufferRatio)
	if err != nil {
		return err
	}
	// Deserialize `SettlementDuration`:
	err = decoder.Decode(&obj.SettlementDuration)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfMarkets`:
	err = decoder.Decode(&obj.NumberOfMarkets)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfSpotMarkets`:
	err = decoder.Decode(&obj.NumberOfSpotMarkets)
	if err != nil {
		return err
	}
	// Deserialize `SignerNonce`:
	err = decoder.Decode(&obj.SignerNonce)
	if err != nil {
		return err
	}
	// Deserialize `MinPerpAuctionDuration`:
	err = decoder.Decode(&obj.MinPerpAuctionDuration)
	if err != nil {
		return err
	}
	// Deserialize `DefaultMarketOrderTimeInForce`:
	err = decoder.Decode(&obj.DefaultMarketOrderTimeInForce)
	if err != nil {
		return err
	}
	// Deserialize `DefaultSpotAuctionDuration`:
	err = decoder.Decode(&obj.DefaultSpotAuctionDuration)
	if err != nil {
		return err
	}
	// Deserialize `ExchangeStatus`:
	err = decoder.Decode(&obj.ExchangeStatus)
	if err != nil {
		return err
	}
	// Deserialize `LiquidationDuration`:
	err = decoder.Decode(&obj.LiquidationDuration)
	if err != nil {
		return err
	}
	// Deserialize `InitialPctToLiquidate`:
	err = decoder.Decode(&obj.InitialPctToLiquidate)
	if err != nil {
		return err
	}
	// Deserialize `MaxNumberOfSubAccounts`:
	err = decoder.Decode(&obj.MaxNumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Deserialize `MaxInitializeUserFee`:
	err = decoder.Decode(&obj.MaxInitializeUserFee)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type User struct {
	// The owner/authority of the account
	Authority ag_solanago.PublicKey

	// An addresses that can control the account on the authority's behalf. Has limited power, cant withdraw
	Delegate ag_solanago.PublicKey

	// Encoded display name e.g. "toly"
	Name [32]uint8

	// The user's spot positions
	SpotPositions [8]SpotPosition

	// The user's perp positions
	PerpPositions [8]PerpPosition

	// The user's orders
	Orders [32]Order

	// The last time the user added perp lp positions
	LastAddPerpLpSharesTs int64

	// The total values of deposits the user has made
	// precision: QUOTE_PRECISION
	TotalDeposits uint64

	// The total values of withdrawals the user has made
	// precision: QUOTE_PRECISION
	TotalWithdraws uint64

	// The total socialized loss the users has incurred upon the protocol
	// precision: QUOTE_PRECISION
	TotalSocialLoss uint64

	// Fees (taker fees, maker rebate, referrer reward, filler reward) and pnl for perps
	// precision: QUOTE_PRECISION
	SettledPerpPnl int64

	// Fees (taker fees, maker rebate, filler reward) for spot
	// precision: QUOTE_PRECISION
	CumulativeSpotFees int64

	// Cumulative funding paid/received for perps
	// precision: QUOTE_PRECISION
	CumulativePerpFunding int64

	// The amount of margin freed during liquidation. Used to force the liquidation to occur over a period of time
	// Defaults to zero when not being liquidated
	// precision: QUOTE_PRECISION
	LiquidationMarginFreed uint64

	// The last slot a user was active. Used to determine if a user is idle
	LastActiveSlot uint64

	// Every user order has an order id. This is the next order id to be used
	NextOrderId uint32

	// Custom max initial margin ratio for the user
	MaxMarginRatio uint32

	// The next liquidation id to be used for user
	NextLiquidationId uint16

	// The sub account id for this user
	SubAccountId uint16

	// Whether the user is active, being liquidated or bankrupt
	Status uint8

	// Whether the user has enabled margin trading
	IsMarginTradingEnabled bool

	// User is idle if they haven't interacted with the protocol in 1 week and they have no orders, perp positions or borrows
	// Off-chain keeper bots can ignore users that are idle
	Idle bool

	// number of open orders
	OpenOrders uint8

	// Whether or not user has open order
	HasOpenOrder bool

	// number of open orders with auction
	OpenAuctions uint8

	// Whether or not user has open order with auction
	HasOpenAuction bool
	Padding        [21]uint8
}

var UserDiscriminator = [8]byte{159, 117, 95, 227, 239, 151, 58, 236}

func (obj User) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Delegate` param:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `SpotPositions` param:
	err = encoder.Encode(obj.SpotPositions)
	if err != nil {
		return err
	}
	// Serialize `PerpPositions` param:
	err = encoder.Encode(obj.PerpPositions)
	if err != nil {
		return err
	}
	// Serialize `Orders` param:
	err = encoder.Encode(obj.Orders)
	if err != nil {
		return err
	}
	// Serialize `LastAddPerpLpSharesTs` param:
	err = encoder.Encode(obj.LastAddPerpLpSharesTs)
	if err != nil {
		return err
	}
	// Serialize `TotalDeposits` param:
	err = encoder.Encode(obj.TotalDeposits)
	if err != nil {
		return err
	}
	// Serialize `TotalWithdraws` param:
	err = encoder.Encode(obj.TotalWithdraws)
	if err != nil {
		return err
	}
	// Serialize `TotalSocialLoss` param:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Serialize `SettledPerpPnl` param:
	err = encoder.Encode(obj.SettledPerpPnl)
	if err != nil {
		return err
	}
	// Serialize `CumulativeSpotFees` param:
	err = encoder.Encode(obj.CumulativeSpotFees)
	if err != nil {
		return err
	}
	// Serialize `CumulativePerpFunding` param:
	err = encoder.Encode(obj.CumulativePerpFunding)
	if err != nil {
		return err
	}
	// Serialize `LiquidationMarginFreed` param:
	err = encoder.Encode(obj.LiquidationMarginFreed)
	if err != nil {
		return err
	}
	// Serialize `LastActiveSlot` param:
	err = encoder.Encode(obj.LastActiveSlot)
	if err != nil {
		return err
	}
	// Serialize `NextOrderId` param:
	err = encoder.Encode(obj.NextOrderId)
	if err != nil {
		return err
	}
	// Serialize `MaxMarginRatio` param:
	err = encoder.Encode(obj.MaxMarginRatio)
	if err != nil {
		return err
	}
	// Serialize `NextLiquidationId` param:
	err = encoder.Encode(obj.NextLiquidationId)
	if err != nil {
		return err
	}
	// Serialize `SubAccountId` param:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `IsMarginTradingEnabled` param:
	err = encoder.Encode(obj.IsMarginTradingEnabled)
	if err != nil {
		return err
	}
	// Serialize `Idle` param:
	err = encoder.Encode(obj.Idle)
	if err != nil {
		return err
	}
	// Serialize `OpenOrders` param:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return err
	}
	// Serialize `HasOpenOrder` param:
	err = encoder.Encode(obj.HasOpenOrder)
	if err != nil {
		return err
	}
	// Serialize `OpenAuctions` param:
	err = encoder.Encode(obj.OpenAuctions)
	if err != nil {
		return err
	}
	// Serialize `HasOpenAuction` param:
	err = encoder.Encode(obj.HasOpenAuction)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *User) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[159 117 95 227 239 151 58 236]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `SpotPositions`:
	err = decoder.Decode(&obj.SpotPositions)
	if err != nil {
		return err
	}
	// Deserialize `PerpPositions`:
	err = decoder.Decode(&obj.PerpPositions)
	if err != nil {
		return err
	}
	// Deserialize `Orders`:
	err = decoder.Decode(&obj.Orders)
	if err != nil {
		return err
	}
	// Deserialize `LastAddPerpLpSharesTs`:
	err = decoder.Decode(&obj.LastAddPerpLpSharesTs)
	if err != nil {
		return err
	}
	// Deserialize `TotalDeposits`:
	err = decoder.Decode(&obj.TotalDeposits)
	if err != nil {
		return err
	}
	// Deserialize `TotalWithdraws`:
	err = decoder.Decode(&obj.TotalWithdraws)
	if err != nil {
		return err
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return err
	}
	// Deserialize `SettledPerpPnl`:
	err = decoder.Decode(&obj.SettledPerpPnl)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeSpotFees`:
	err = decoder.Decode(&obj.CumulativeSpotFees)
	if err != nil {
		return err
	}
	// Deserialize `CumulativePerpFunding`:
	err = decoder.Decode(&obj.CumulativePerpFunding)
	if err != nil {
		return err
	}
	// Deserialize `LiquidationMarginFreed`:
	err = decoder.Decode(&obj.LiquidationMarginFreed)
	if err != nil {
		return err
	}
	// Deserialize `LastActiveSlot`:
	err = decoder.Decode(&obj.LastActiveSlot)
	if err != nil {
		return err
	}
	// Deserialize `NextOrderId`:
	err = decoder.Decode(&obj.NextOrderId)
	if err != nil {
		return err
	}
	// Deserialize `MaxMarginRatio`:
	err = decoder.Decode(&obj.MaxMarginRatio)
	if err != nil {
		return err
	}
	// Deserialize `NextLiquidationId`:
	err = decoder.Decode(&obj.NextLiquidationId)
	if err != nil {
		return err
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `IsMarginTradingEnabled`:
	err = decoder.Decode(&obj.IsMarginTradingEnabled)
	if err != nil {
		return err
	}
	// Deserialize `Idle`:
	err = decoder.Decode(&obj.Idle)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return err
	}
	// Deserialize `HasOpenOrder`:
	err = decoder.Decode(&obj.HasOpenOrder)
	if err != nil {
		return err
	}
	// Deserialize `OpenAuctions`:
	err = decoder.Decode(&obj.OpenAuctions)
	if err != nil {
		return err
	}
	// Deserialize `HasOpenAuction`:
	err = decoder.Decode(&obj.HasOpenAuction)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type UserStats struct {
	// The authority for all of a users sub accounts
	Authority ag_solanago.PublicKey

	// The address that referred this user
	Referrer ag_solanago.PublicKey

	// Stats on the fees paid by the user
	Fees UserFees

	// The timestamp of the next epoch
	// Epoch is used to limit referrer rewards earned in single epoch
	NextEpochTs int64

	// Rolling 30day maker volume for user
	// precision: QUOTE_PRECISION
	MakerVolume30D uint64

	// Rolling 30day taker volume for user
	// precision: QUOTE_PRECISION
	TakerVolume30D uint64

	// Rolling 30day filler volume for user
	// precision: QUOTE_PRECISION
	FillerVolume30D uint64

	// last time the maker volume was updated
	LastMakerVolume30DTs int64

	// last time the taker volume was updated
	LastTakerVolume30DTs int64

	// last time the filler volume was updated
	LastFillerVolume30DTs int64

	// The amount of tokens staked in the quote spot markets if
	IfStakedQuoteAssetAmount uint64

	// The current number of sub accounts
	NumberOfSubAccounts uint16

	// The number of sub accounts created. Can be greater than the number of sub accounts if user
	// has deleted sub accounts
	NumberOfSubAccountsCreated uint16

	// Whether the user is a referrer. Sub account 0 can not be deleted if user is a referrer
	IsReferrer                  bool
	DisableUpdatePerpBidAskTwap bool
	Padding                     [50]uint8
}

var UserStatsDiscriminator = [8]byte{176, 223, 136, 27, 122, 79, 32, 227}

func (obj UserStats) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserStatsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Referrer` param:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `NextEpochTs` param:
	err = encoder.Encode(obj.NextEpochTs)
	if err != nil {
		return err
	}
	// Serialize `MakerVolume30D` param:
	err = encoder.Encode(obj.MakerVolume30D)
	if err != nil {
		return err
	}
	// Serialize `TakerVolume30D` param:
	err = encoder.Encode(obj.TakerVolume30D)
	if err != nil {
		return err
	}
	// Serialize `FillerVolume30D` param:
	err = encoder.Encode(obj.FillerVolume30D)
	if err != nil {
		return err
	}
	// Serialize `LastMakerVolume30DTs` param:
	err = encoder.Encode(obj.LastMakerVolume30DTs)
	if err != nil {
		return err
	}
	// Serialize `LastTakerVolume30DTs` param:
	err = encoder.Encode(obj.LastTakerVolume30DTs)
	if err != nil {
		return err
	}
	// Serialize `LastFillerVolume30DTs` param:
	err = encoder.Encode(obj.LastFillerVolume30DTs)
	if err != nil {
		return err
	}
	// Serialize `IfStakedQuoteAssetAmount` param:
	err = encoder.Encode(obj.IfStakedQuoteAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `NumberOfSubAccounts` param:
	err = encoder.Encode(obj.NumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Serialize `NumberOfSubAccountsCreated` param:
	err = encoder.Encode(obj.NumberOfSubAccountsCreated)
	if err != nil {
		return err
	}
	// Serialize `IsReferrer` param:
	err = encoder.Encode(obj.IsReferrer)
	if err != nil {
		return err
	}
	// Serialize `DisableUpdatePerpBidAskTwap` param:
	err = encoder.Encode(obj.DisableUpdatePerpBidAskTwap)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserStats) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserStatsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[176 223 136 27 122 79 32 227]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `NextEpochTs`:
	err = decoder.Decode(&obj.NextEpochTs)
	if err != nil {
		return err
	}
	// Deserialize `MakerVolume30D`:
	err = decoder.Decode(&obj.MakerVolume30D)
	if err != nil {
		return err
	}
	// Deserialize `TakerVolume30D`:
	err = decoder.Decode(&obj.TakerVolume30D)
	if err != nil {
		return err
	}
	// Deserialize `FillerVolume30D`:
	err = decoder.Decode(&obj.FillerVolume30D)
	if err != nil {
		return err
	}
	// Deserialize `LastMakerVolume30DTs`:
	err = decoder.Decode(&obj.LastMakerVolume30DTs)
	if err != nil {
		return err
	}
	// Deserialize `LastTakerVolume30DTs`:
	err = decoder.Decode(&obj.LastTakerVolume30DTs)
	if err != nil {
		return err
	}
	// Deserialize `LastFillerVolume30DTs`:
	err = decoder.Decode(&obj.LastFillerVolume30DTs)
	if err != nil {
		return err
	}
	// Deserialize `IfStakedQuoteAssetAmount`:
	err = decoder.Decode(&obj.IfStakedQuoteAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfSubAccounts`:
	err = decoder.Decode(&obj.NumberOfSubAccounts)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfSubAccountsCreated`:
	err = decoder.Decode(&obj.NumberOfSubAccountsCreated)
	if err != nil {
		return err
	}
	// Deserialize `IsReferrer`:
	err = decoder.Decode(&obj.IsReferrer)
	if err != nil {
		return err
	}
	// Deserialize `DisableUpdatePerpBidAskTwap`:
	err = decoder.Decode(&obj.DisableUpdatePerpBidAskTwap)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type ReferrerName struct {
	Authority ag_solanago.PublicKey
	User      ag_solanago.PublicKey
	UserStats ag_solanago.PublicKey
	Name      [32]uint8
}

var ReferrerNameDiscriminator = [8]byte{105, 133, 170, 110, 52, 42, 28, 182}

func (obj ReferrerName) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReferrerNameDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserStats` param:
	err = encoder.Encode(obj.UserStats)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReferrerName) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReferrerNameDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[105 133 170 110 52 42 28 182]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserStats`:
	err = decoder.Decode(&obj.UserStats)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}
