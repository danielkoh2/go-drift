// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferDeposit is the `transferDeposit` instruction.
type TransferDeposit struct {
	MarketIndex *uint16
	Amount      *uint64

	// [0] = [WRITE] fromUser
	//
	// [1] = [WRITE] toUser
	//
	// [2] = [WRITE] userStats
	//
	// [3] = [SIGNER] authority
	//
	// [4] = [] state
	//
	// [5] = [] spotMarketVault
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferDepositInstructionBuilder creates a new `TransferDeposit` instruction builder.
func NewTransferDepositInstructionBuilder() *TransferDeposit {
	nd := &TransferDeposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMarketIndex sets the "marketIndex" parameter.
func (inst *TransferDeposit) SetMarketIndex(marketIndex uint16) *TransferDeposit {
	inst.MarketIndex = &marketIndex
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *TransferDeposit) SetAmount(amount uint64) *TransferDeposit {
	inst.Amount = &amount
	return inst
}

// SetFromUserAccount sets the "fromUser" account.
func (inst *TransferDeposit) SetFromUserAccount(fromUser ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(fromUser).WRITE()
	return inst
}

// GetFromUserAccount gets the "fromUser" account.
func (inst *TransferDeposit) GetFromUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetToUserAccount sets the "toUser" account.
func (inst *TransferDeposit) SetToUserAccount(toUser ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(toUser).WRITE()
	return inst
}

// GetToUserAccount gets the "toUser" account.
func (inst *TransferDeposit) GetToUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *TransferDeposit) SetUserStatsAccount(userStats ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *TransferDeposit) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TransferDeposit) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TransferDeposit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStateAccount sets the "state" account.
func (inst *TransferDeposit) SetStateAccount(state ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *TransferDeposit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSpotMarketVaultAccount sets the "spotMarketVault" account.
func (inst *TransferDeposit) SetSpotMarketVaultAccount(spotMarketVault ag_solanago.PublicKey) *TransferDeposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(spotMarketVault)
	return inst
}

// GetSpotMarketVaultAccount gets the "spotMarketVault" account.
func (inst *TransferDeposit) GetSpotMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst TransferDeposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferDeposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferDeposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferDeposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketIndex == nil {
			return errors.New("MarketIndex parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FromUser is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ToUser is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SpotMarketVault is not set")
		}
	}
	return nil
}

func (inst *TransferDeposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferDeposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MarketIndex", *inst.MarketIndex))
						paramsBranch.Child(ag_format.Param("     Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       fromUser", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         toUser", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      userStats", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          state", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("spotMarketVault", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj TransferDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferDepositInstruction declares a new TransferDeposit instruction with the provided parameters and accounts.
func NewTransferDepositInstruction(
	// Parameters:
	marketIndex uint16,
	amount uint64,
	// Accounts:
	fromUser ag_solanago.PublicKey,
	toUser ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarketVault ag_solanago.PublicKey) *TransferDeposit {
	return NewTransferDepositInstructionBuilder().
		SetMarketIndex(marketIndex).
		SetAmount(amount).
		SetFromUserAccount(fromUser).
		SetToUserAccount(toUser).
		SetUserStatsAccount(userStats).
		SetAuthorityAccount(authority).
		SetStateAccount(state).
		SetSpotMarketVaultAccount(spotMarketVault)
}
