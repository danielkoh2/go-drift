// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeSerumFulfillmentConfig is the `initializeSerumFulfillmentConfig` instruction.
type InitializeSerumFulfillmentConfig struct {
	MarketIndex *uint16

	// [0] = [] baseSpotMarket
	//
	// [1] = [] quoteSpotMarket
	//
	// [2] = [WRITE] state
	//
	// [3] = [] serumProgram
	//
	// [4] = [] serumMarket
	//
	// [5] = [WRITE] serumOpenOrders
	//
	// [6] = [] driftSigner
	//
	// [7] = [WRITE] serumFulfillmentConfig
	//
	// [8] = [WRITE, SIGNER] admin
	//
	// [9] = [] rent
	//
	// [10] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeSerumFulfillmentConfigInstructionBuilder creates a new `InitializeSerumFulfillmentConfig` instruction builder.
func NewInitializeSerumFulfillmentConfigInstructionBuilder() *InitializeSerumFulfillmentConfig {
	nd := &InitializeSerumFulfillmentConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetMarketIndex sets the "marketIndex" parameter.
func (inst *InitializeSerumFulfillmentConfig) SetMarketIndex(marketIndex uint16) *InitializeSerumFulfillmentConfig {
	inst.MarketIndex = &marketIndex
	return inst
}

// SetBaseSpotMarketAccount sets the "baseSpotMarket" account.
func (inst *InitializeSerumFulfillmentConfig) SetBaseSpotMarketAccount(baseSpotMarket ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(baseSpotMarket)
	return inst
}

// GetBaseSpotMarketAccount gets the "baseSpotMarket" account.
func (inst *InitializeSerumFulfillmentConfig) GetBaseSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQuoteSpotMarketAccount sets the "quoteSpotMarket" account.
func (inst *InitializeSerumFulfillmentConfig) SetQuoteSpotMarketAccount(quoteSpotMarket ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(quoteSpotMarket)
	return inst
}

// GetQuoteSpotMarketAccount gets the "quoteSpotMarket" account.
func (inst *InitializeSerumFulfillmentConfig) GetQuoteSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStateAccount sets the "state" account.
func (inst *InitializeSerumFulfillmentConfig) SetStateAccount(state ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializeSerumFulfillmentConfig) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSerumProgramAccount sets the "serumProgram" account.
func (inst *InitializeSerumFulfillmentConfig) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serumProgram" account.
func (inst *InitializeSerumFulfillmentConfig) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *InitializeSerumFulfillmentConfig) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(serumMarket)
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *InitializeSerumFulfillmentConfig) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSerumOpenOrdersAccount sets the "serumOpenOrders" account.
func (inst *InitializeSerumFulfillmentConfig) SetSerumOpenOrdersAccount(serumOpenOrders ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(serumOpenOrders).WRITE()
	return inst
}

// GetSerumOpenOrdersAccount gets the "serumOpenOrders" account.
func (inst *InitializeSerumFulfillmentConfig) GetSerumOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDriftSignerAccount sets the "driftSigner" account.
func (inst *InitializeSerumFulfillmentConfig) SetDriftSignerAccount(driftSigner ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(driftSigner)
	return inst
}

// GetDriftSignerAccount gets the "driftSigner" account.
func (inst *InitializeSerumFulfillmentConfig) GetDriftSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSerumFulfillmentConfigAccount sets the "serumFulfillmentConfig" account.
func (inst *InitializeSerumFulfillmentConfig) SetSerumFulfillmentConfigAccount(serumFulfillmentConfig ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(serumFulfillmentConfig).WRITE()
	return inst
}

// GetSerumFulfillmentConfigAccount gets the "serumFulfillmentConfig" account.
func (inst *InitializeSerumFulfillmentConfig) GetSerumFulfillmentConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializeSerumFulfillmentConfig) SetAdminAccount(admin ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializeSerumFulfillmentConfig) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeSerumFulfillmentConfig) SetRentAccount(rent ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeSerumFulfillmentConfig) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeSerumFulfillmentConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeSerumFulfillmentConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst InitializeSerumFulfillmentConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeSerumFulfillmentConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeSerumFulfillmentConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeSerumFulfillmentConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketIndex == nil {
			return errors.New("MarketIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BaseSpotMarket is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.QuoteSpotMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SerumOpenOrders is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DriftSigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SerumFulfillmentConfig is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeSerumFulfillmentConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeSerumFulfillmentConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MarketIndex", *inst.MarketIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        baseSpotMarket", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       quoteSpotMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          serumProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           serumMarket", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       serumOpenOrders", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           driftSigner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("serumFulfillmentConfig", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 admin", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj InitializeSerumFulfillmentConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeSerumFulfillmentConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeSerumFulfillmentConfigInstruction declares a new InitializeSerumFulfillmentConfig instruction with the provided parameters and accounts.
func NewInitializeSerumFulfillmentConfigInstruction(
	// Parameters:
	marketIndex uint16,
	// Accounts:
	baseSpotMarket ag_solanago.PublicKey,
	quoteSpotMarket ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumOpenOrders ag_solanago.PublicKey,
	driftSigner ag_solanago.PublicKey,
	serumFulfillmentConfig ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeSerumFulfillmentConfig {
	return NewInitializeSerumFulfillmentConfigInstructionBuilder().
		SetMarketIndex(marketIndex).
		SetBaseSpotMarketAccount(baseSpotMarket).
		SetQuoteSpotMarketAccount(quoteSpotMarket).
		SetStateAccount(state).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumOpenOrdersAccount(serumOpenOrders).
		SetDriftSignerAccount(driftSigner).
		SetSerumFulfillmentConfigAccount(serumFulfillmentConfig).
		SetAdminAccount(admin).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
