// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ResolvePerpPnlDeficit is the `resolvePerpPnlDeficit` instruction.
type ResolvePerpPnlDeficit struct {
	SpotMarketIndex *uint16
	PerpMarketIndex *uint16

	// [0] = [] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] spotMarketVault
	//
	// [3] = [WRITE] insuranceFundVault
	//
	// [4] = [] driftSigner
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewResolvePerpPnlDeficitInstructionBuilder creates a new `ResolvePerpPnlDeficit` instruction builder.
func NewResolvePerpPnlDeficitInstructionBuilder() *ResolvePerpPnlDeficit {
	nd := &ResolvePerpPnlDeficit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetSpotMarketIndex sets the "spotMarketIndex" parameter.
func (inst *ResolvePerpPnlDeficit) SetSpotMarketIndex(spotMarketIndex uint16) *ResolvePerpPnlDeficit {
	inst.SpotMarketIndex = &spotMarketIndex
	return inst
}

// SetPerpMarketIndex sets the "perpMarketIndex" parameter.
func (inst *ResolvePerpPnlDeficit) SetPerpMarketIndex(perpMarketIndex uint16) *ResolvePerpPnlDeficit {
	inst.PerpMarketIndex = &perpMarketIndex
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ResolvePerpPnlDeficit) SetStateAccount(state ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ResolvePerpPnlDeficit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ResolvePerpPnlDeficit) SetAuthorityAccount(authority ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ResolvePerpPnlDeficit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketVaultAccount sets the "spotMarketVault" account.
func (inst *ResolvePerpPnlDeficit) SetSpotMarketVaultAccount(spotMarketVault ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarketVault).WRITE()
	return inst
}

// GetSpotMarketVaultAccount gets the "spotMarketVault" account.
func (inst *ResolvePerpPnlDeficit) GetSpotMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetInsuranceFundVaultAccount sets the "insuranceFundVault" account.
func (inst *ResolvePerpPnlDeficit) SetInsuranceFundVaultAccount(insuranceFundVault ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(insuranceFundVault).WRITE()
	return inst
}

// GetInsuranceFundVaultAccount gets the "insuranceFundVault" account.
func (inst *ResolvePerpPnlDeficit) GetInsuranceFundVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDriftSignerAccount sets the "driftSigner" account.
func (inst *ResolvePerpPnlDeficit) SetDriftSignerAccount(driftSigner ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(driftSigner)
	return inst
}

// GetDriftSignerAccount gets the "driftSigner" account.
func (inst *ResolvePerpPnlDeficit) GetDriftSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ResolvePerpPnlDeficit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ResolvePerpPnlDeficit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst ResolvePerpPnlDeficit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ResolvePerpPnlDeficit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ResolvePerpPnlDeficit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ResolvePerpPnlDeficit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SpotMarketIndex == nil {
			return errors.New("SpotMarketIndex parameter is not set")
		}
		if inst.PerpMarketIndex == nil {
			return errors.New("PerpMarketIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarketVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InsuranceFundVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DriftSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *ResolvePerpPnlDeficit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ResolvePerpPnlDeficit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SpotMarketIndex", *inst.SpotMarketIndex))
						paramsBranch.Child(ag_format.Param("PerpMarketIndex", *inst.PerpMarketIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   spotMarketVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("insuranceFundVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       driftSigner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj ResolvePerpPnlDeficit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SpotMarketIndex` param:
	err = encoder.Encode(obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ResolvePerpPnlDeficit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SpotMarketIndex`:
	err = decoder.Decode(&obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewResolvePerpPnlDeficitInstruction declares a new ResolvePerpPnlDeficit instruction with the provided parameters and accounts.
func NewResolvePerpPnlDeficitInstruction(
	// Parameters:
	spotMarketIndex uint16,
	perpMarketIndex uint16,
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	spotMarketVault ag_solanago.PublicKey,
	insuranceFundVault ag_solanago.PublicKey,
	driftSigner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *ResolvePerpPnlDeficit {
	return NewResolvePerpPnlDeficitInstructionBuilder().
		SetSpotMarketIndex(spotMarketIndex).
		SetPerpMarketIndex(perpMarketIndex).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetSpotMarketVaultAccount(spotMarketVault).
		SetInsuranceFundVaultAccount(insuranceFundVault).
		SetDriftSignerAccount(driftSigner).
		SetTokenProgramAccount(tokenProgram)
}
