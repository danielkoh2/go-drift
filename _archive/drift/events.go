// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type NewUserRecord struct {
	Ts            int64
	UserAuthority ag_solanago.PublicKey
	User          ag_solanago.PublicKey
	SubAccountId  uint16
	Name          [32]uint8
	Referrer      ag_solanago.PublicKey
}

var NewUserRecordDiscriminator = [8]byte{236, 186, 113, 219, 42, 51, 149, 249}

func (obj NewUserRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(NewUserRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `UserAuthority` param:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `SubAccountId` param:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Referrer` param:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewUserRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(NewUserRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[236 186 113 219 42 51 149 249]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return err
	}
	return nil
}

type DepositRecord struct {
	Ts                              int64
	UserAuthority                   ag_solanago.PublicKey
	User                            ag_solanago.PublicKey
	Direction                       DepositDirection
	DepositRecordId                 uint64
	Amount                          uint64
	MarketIndex                     uint16
	OraclePrice                     int64
	MarketDepositBalance            ag_binary.Uint128
	MarketWithdrawBalance           ag_binary.Uint128
	MarketCumulativeDepositInterest ag_binary.Uint128
	MarketCumulativeBorrowInterest  ag_binary.Uint128
	TotalDepositsAfter              uint64
	TotalWithdrawsAfter             uint64
	Explanation                     DepositExplanation
	TransferUser                    *ag_solanago.PublicKey `bin:"optional"`
}

var DepositRecordDiscriminator = [8]byte{180, 241, 218, 207, 102, 135, 44, 134}

func (obj DepositRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DepositRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `UserAuthority` param:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Direction` param:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return err
	}
	// Serialize `DepositRecordId` param:
	err = encoder.Encode(obj.DepositRecordId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OraclePrice` param:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return err
	}
	// Serialize `MarketDepositBalance` param:
	err = encoder.Encode(obj.MarketDepositBalance)
	if err != nil {
		return err
	}
	// Serialize `MarketWithdrawBalance` param:
	err = encoder.Encode(obj.MarketWithdrawBalance)
	if err != nil {
		return err
	}
	// Serialize `MarketCumulativeDepositInterest` param:
	err = encoder.Encode(obj.MarketCumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Serialize `MarketCumulativeBorrowInterest` param:
	err = encoder.Encode(obj.MarketCumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Serialize `TotalDepositsAfter` param:
	err = encoder.Encode(obj.TotalDepositsAfter)
	if err != nil {
		return err
	}
	// Serialize `TotalWithdrawsAfter` param:
	err = encoder.Encode(obj.TotalWithdrawsAfter)
	if err != nil {
		return err
	}
	// Serialize `Explanation` param:
	err = encoder.Encode(obj.Explanation)
	if err != nil {
		return err
	}
	// Serialize `TransferUser` param (optional):
	{
		if obj.TransferUser == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TransferUser)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *DepositRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DepositRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[180 241 218 207 102 135 44 134]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return err
	}
	// Deserialize `DepositRecordId`:
	err = decoder.Decode(&obj.DepositRecordId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `MarketDepositBalance`:
	err = decoder.Decode(&obj.MarketDepositBalance)
	if err != nil {
		return err
	}
	// Deserialize `MarketWithdrawBalance`:
	err = decoder.Decode(&obj.MarketWithdrawBalance)
	if err != nil {
		return err
	}
	// Deserialize `MarketCumulativeDepositInterest`:
	err = decoder.Decode(&obj.MarketCumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Deserialize `MarketCumulativeBorrowInterest`:
	err = decoder.Decode(&obj.MarketCumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Deserialize `TotalDepositsAfter`:
	err = decoder.Decode(&obj.TotalDepositsAfter)
	if err != nil {
		return err
	}
	// Deserialize `TotalWithdrawsAfter`:
	err = decoder.Decode(&obj.TotalWithdrawsAfter)
	if err != nil {
		return err
	}
	// Deserialize `Explanation`:
	err = decoder.Decode(&obj.Explanation)
	if err != nil {
		return err
	}
	// Deserialize `TransferUser` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TransferUser)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type SpotInterestRecord struct {
	Ts                        int64
	MarketIndex               uint16
	DepositBalance            ag_binary.Uint128
	CumulativeDepositInterest ag_binary.Uint128
	BorrowBalance             ag_binary.Uint128
	CumulativeBorrowInterest  ag_binary.Uint128
	OptimalUtilization        uint32
	OptimalBorrowRate         uint32
	MaxBorrowRate             uint32
}

var SpotInterestRecordDiscriminator = [8]byte{183, 186, 203, 186, 225, 187, 95, 130}

func (obj SpotInterestRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SpotInterestRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `DepositBalance` param:
	err = encoder.Encode(obj.DepositBalance)
	if err != nil {
		return err
	}
	// Serialize `CumulativeDepositInterest` param:
	err = encoder.Encode(obj.CumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Serialize `BorrowBalance` param:
	err = encoder.Encode(obj.BorrowBalance)
	if err != nil {
		return err
	}
	// Serialize `CumulativeBorrowInterest` param:
	err = encoder.Encode(obj.CumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Serialize `OptimalUtilization` param:
	err = encoder.Encode(obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Serialize `OptimalBorrowRate` param:
	err = encoder.Encode(obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Serialize `MaxBorrowRate` param:
	err = encoder.Encode(obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SpotInterestRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SpotInterestRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[183 186 203 186 225 187 95 130]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `DepositBalance`:
	err = decoder.Decode(&obj.DepositBalance)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeDepositInterest`:
	err = decoder.Decode(&obj.CumulativeDepositInterest)
	if err != nil {
		return err
	}
	// Deserialize `BorrowBalance`:
	err = decoder.Decode(&obj.BorrowBalance)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeBorrowInterest`:
	err = decoder.Decode(&obj.CumulativeBorrowInterest)
	if err != nil {
		return err
	}
	// Deserialize `OptimalUtilization`:
	err = decoder.Decode(&obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Deserialize `OptimalBorrowRate`:
	err = decoder.Decode(&obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxBorrowRate`:
	err = decoder.Decode(&obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	return nil
}

type FundingPaymentRecord struct {
	Ts                        int64
	UserAuthority             ag_solanago.PublicKey
	User                      ag_solanago.PublicKey
	MarketIndex               uint16
	FundingPayment            int64
	BaseAssetAmount           int64
	UserLastCumulativeFunding int64
	AmmCumulativeFundingLong  ag_binary.Int128
	AmmCumulativeFundingShort ag_binary.Int128
}

var FundingPaymentRecordDiscriminator = [8]byte{8, 59, 96, 20, 137, 201, 56, 95}

func (obj FundingPaymentRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundingPaymentRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `UserAuthority` param:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `FundingPayment` param:
	err = encoder.Encode(obj.FundingPayment)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `UserLastCumulativeFunding` param:
	err = encoder.Encode(obj.UserLastCumulativeFunding)
	if err != nil {
		return err
	}
	// Serialize `AmmCumulativeFundingLong` param:
	err = encoder.Encode(obj.AmmCumulativeFundingLong)
	if err != nil {
		return err
	}
	// Serialize `AmmCumulativeFundingShort` param:
	err = encoder.Encode(obj.AmmCumulativeFundingShort)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundingPaymentRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundingPaymentRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[8 59 96 20 137 201 56 95]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `FundingPayment`:
	err = decoder.Decode(&obj.FundingPayment)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `UserLastCumulativeFunding`:
	err = decoder.Decode(&obj.UserLastCumulativeFunding)
	if err != nil {
		return err
	}
	// Deserialize `AmmCumulativeFundingLong`:
	err = decoder.Decode(&obj.AmmCumulativeFundingLong)
	if err != nil {
		return err
	}
	// Deserialize `AmmCumulativeFundingShort`:
	err = decoder.Decode(&obj.AmmCumulativeFundingShort)
	if err != nil {
		return err
	}
	return nil
}

type FundingRateRecord struct {
	Ts                             int64
	RecordId                       uint64
	MarketIndex                    uint16
	FundingRate                    int64
	FundingRateLong                ag_binary.Int128
	FundingRateShort               ag_binary.Int128
	CumulativeFundingRateLong      ag_binary.Int128
	CumulativeFundingRateShort     ag_binary.Int128
	OraclePriceTwap                int64
	MarkPriceTwap                  uint64
	PeriodRevenue                  int64
	BaseAssetAmountWithAmm         ag_binary.Int128
	BaseAssetAmountWithUnsettledLp ag_binary.Int128
}

var FundingRateRecordDiscriminator = [8]byte{68, 3, 255, 26, 133, 91, 147, 254}

func (obj FundingRateRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundingRateRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `RecordId` param:
	err = encoder.Encode(obj.RecordId)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `FundingRate` param:
	err = encoder.Encode(obj.FundingRate)
	if err != nil {
		return err
	}
	// Serialize `FundingRateLong` param:
	err = encoder.Encode(obj.FundingRateLong)
	if err != nil {
		return err
	}
	// Serialize `FundingRateShort` param:
	err = encoder.Encode(obj.FundingRateShort)
	if err != nil {
		return err
	}
	// Serialize `CumulativeFundingRateLong` param:
	err = encoder.Encode(obj.CumulativeFundingRateLong)
	if err != nil {
		return err
	}
	// Serialize `CumulativeFundingRateShort` param:
	err = encoder.Encode(obj.CumulativeFundingRateShort)
	if err != nil {
		return err
	}
	// Serialize `OraclePriceTwap` param:
	err = encoder.Encode(obj.OraclePriceTwap)
	if err != nil {
		return err
	}
	// Serialize `MarkPriceTwap` param:
	err = encoder.Encode(obj.MarkPriceTwap)
	if err != nil {
		return err
	}
	// Serialize `PeriodRevenue` param:
	err = encoder.Encode(obj.PeriodRevenue)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountWithAmm` param:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountWithUnsettledLp` param:
	err = encoder.Encode(obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundingRateRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundingRateRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[68 3 255 26 133 91 147 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `RecordId`:
	err = decoder.Decode(&obj.RecordId)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `FundingRate`:
	err = decoder.Decode(&obj.FundingRate)
	if err != nil {
		return err
	}
	// Deserialize `FundingRateLong`:
	err = decoder.Decode(&obj.FundingRateLong)
	if err != nil {
		return err
	}
	// Deserialize `FundingRateShort`:
	err = decoder.Decode(&obj.FundingRateShort)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeFundingRateLong`:
	err = decoder.Decode(&obj.CumulativeFundingRateLong)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeFundingRateShort`:
	err = decoder.Decode(&obj.CumulativeFundingRateShort)
	if err != nil {
		return err
	}
	// Deserialize `OraclePriceTwap`:
	err = decoder.Decode(&obj.OraclePriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `MarkPriceTwap`:
	err = decoder.Decode(&obj.MarkPriceTwap)
	if err != nil {
		return err
	}
	// Deserialize `PeriodRevenue`:
	err = decoder.Decode(&obj.PeriodRevenue)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return err
	}
	return nil
}

type CurveRecord struct {
	Ts                         int64
	RecordId                   uint64
	PegMultiplierBefore        ag_binary.Uint128
	BaseAssetReserveBefore     ag_binary.Uint128
	QuoteAssetReserveBefore    ag_binary.Uint128
	SqrtKBefore                ag_binary.Uint128
	PegMultiplierAfter         ag_binary.Uint128
	BaseAssetReserveAfter      ag_binary.Uint128
	QuoteAssetReserveAfter     ag_binary.Uint128
	SqrtKAfter                 ag_binary.Uint128
	BaseAssetAmountLong        ag_binary.Uint128
	BaseAssetAmountShort       ag_binary.Uint128
	BaseAssetAmountWithAmm     ag_binary.Int128
	TotalFee                   ag_binary.Int128
	TotalFeeMinusDistributions ag_binary.Int128
	AdjustmentCost             ag_binary.Int128
	OraclePrice                int64
	FillRecord                 ag_binary.Uint128
	NumberOfUsers              uint32
	MarketIndex                uint16
}

var CurveRecordDiscriminator = [8]byte{101, 238, 40, 228, 70, 46, 61, 117}

func (obj CurveRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CurveRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `RecordId` param:
	err = encoder.Encode(obj.RecordId)
	if err != nil {
		return err
	}
	// Serialize `PegMultiplierBefore` param:
	err = encoder.Encode(obj.PegMultiplierBefore)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetReserveBefore` param:
	err = encoder.Encode(obj.BaseAssetReserveBefore)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetReserveBefore` param:
	err = encoder.Encode(obj.QuoteAssetReserveBefore)
	if err != nil {
		return err
	}
	// Serialize `SqrtKBefore` param:
	err = encoder.Encode(obj.SqrtKBefore)
	if err != nil {
		return err
	}
	// Serialize `PegMultiplierAfter` param:
	err = encoder.Encode(obj.PegMultiplierAfter)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetReserveAfter` param:
	err = encoder.Encode(obj.BaseAssetReserveAfter)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetReserveAfter` param:
	err = encoder.Encode(obj.QuoteAssetReserveAfter)
	if err != nil {
		return err
	}
	// Serialize `SqrtKAfter` param:
	err = encoder.Encode(obj.SqrtKAfter)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountLong` param:
	err = encoder.Encode(obj.BaseAssetAmountLong)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountShort` param:
	err = encoder.Encode(obj.BaseAssetAmountShort)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmountWithAmm` param:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Serialize `TotalFee` param:
	err = encoder.Encode(obj.TotalFee)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeMinusDistributions` param:
	err = encoder.Encode(obj.TotalFeeMinusDistributions)
	if err != nil {
		return err
	}
	// Serialize `AdjustmentCost` param:
	err = encoder.Encode(obj.AdjustmentCost)
	if err != nil {
		return err
	}
	// Serialize `OraclePrice` param:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return err
	}
	// Serialize `FillRecord` param:
	err = encoder.Encode(obj.FillRecord)
	if err != nil {
		return err
	}
	// Serialize `NumberOfUsers` param:
	err = encoder.Encode(obj.NumberOfUsers)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CurveRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[101 238 40 228 70 46 61 117]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `RecordId`:
	err = decoder.Decode(&obj.RecordId)
	if err != nil {
		return err
	}
	// Deserialize `PegMultiplierBefore`:
	err = decoder.Decode(&obj.PegMultiplierBefore)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetReserveBefore`:
	err = decoder.Decode(&obj.BaseAssetReserveBefore)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetReserveBefore`:
	err = decoder.Decode(&obj.QuoteAssetReserveBefore)
	if err != nil {
		return err
	}
	// Deserialize `SqrtKBefore`:
	err = decoder.Decode(&obj.SqrtKBefore)
	if err != nil {
		return err
	}
	// Deserialize `PegMultiplierAfter`:
	err = decoder.Decode(&obj.PegMultiplierAfter)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetReserveAfter`:
	err = decoder.Decode(&obj.BaseAssetReserveAfter)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetReserveAfter`:
	err = decoder.Decode(&obj.QuoteAssetReserveAfter)
	if err != nil {
		return err
	}
	// Deserialize `SqrtKAfter`:
	err = decoder.Decode(&obj.SqrtKAfter)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountLong`:
	err = decoder.Decode(&obj.BaseAssetAmountLong)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountShort`:
	err = decoder.Decode(&obj.BaseAssetAmountShort)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return err
	}
	// Deserialize `TotalFee`:
	err = decoder.Decode(&obj.TotalFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeMinusDistributions`:
	err = decoder.Decode(&obj.TotalFeeMinusDistributions)
	if err != nil {
		return err
	}
	// Deserialize `AdjustmentCost`:
	err = decoder.Decode(&obj.AdjustmentCost)
	if err != nil {
		return err
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `FillRecord`:
	err = decoder.Decode(&obj.FillRecord)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfUsers`:
	err = decoder.Decode(&obj.NumberOfUsers)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	return nil
}

type OrderRecord struct {
	Ts    int64
	User  ag_solanago.PublicKey
	Order Order
}

var OrderRecordDiscriminator = [8]byte{104, 19, 64, 56, 89, 21, 2, 90}

func (obj OrderRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Order` param:
	err = encoder.Encode(obj.Order)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[104 19 64 56 89 21 2 90]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Order`:
	err = decoder.Decode(&obj.Order)
	if err != nil {
		return err
	}
	return nil
}

type OrderActionRecord struct {
	Ts                                         int64
	Action                                     OrderAction
	ActionExplanation                          OrderActionExplanation
	MarketIndex                                uint16
	MarketType                                 MarketType
	Filler                                     *ag_solanago.PublicKey `bin:"optional"`
	FillerReward                               *uint64                `bin:"optional"`
	FillRecordId                               *uint64                `bin:"optional"`
	BaseAssetAmountFilled                      *uint64                `bin:"optional"`
	QuoteAssetAmountFilled                     *uint64                `bin:"optional"`
	TakerFee                                   *uint64                `bin:"optional"`
	MakerFee                                   *int64                 `bin:"optional"`
	ReferrerReward                             *uint32                `bin:"optional"`
	QuoteAssetAmountSurplus                    *int64                 `bin:"optional"`
	SpotFulfillmentMethodFee                   *uint64                `bin:"optional"`
	Taker                                      *ag_solanago.PublicKey `bin:"optional"`
	TakerOrderId                               *uint32                `bin:"optional"`
	TakerOrderDirection                        *PositionDirection     `bin:"optional"`
	TakerOrderBaseAssetAmount                  *uint64                `bin:"optional"`
	TakerOrderCumulativeBaseAssetAmountFilled  *uint64                `bin:"optional"`
	TakerOrderCumulativeQuoteAssetAmountFilled *uint64                `bin:"optional"`
	Maker                                      *ag_solanago.PublicKey `bin:"optional"`
	MakerOrderId                               *uint32                `bin:"optional"`
	MakerOrderDirection                        *PositionDirection     `bin:"optional"`
	MakerOrderBaseAssetAmount                  *uint64                `bin:"optional"`
	MakerOrderCumulativeBaseAssetAmountFilled  *uint64                `bin:"optional"`
	MakerOrderCumulativeQuoteAssetAmountFilled *uint64                `bin:"optional"`
	OraclePrice                                int64
}

var OrderActionRecordDiscriminator = [8]byte{224, 52, 67, 71, 194, 237, 109, 1}

func (obj OrderActionRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderActionRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `Action` param:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return err
	}
	// Serialize `ActionExplanation` param:
	err = encoder.Encode(obj.ActionExplanation)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `MarketType` param:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return err
	}
	// Serialize `Filler` param (optional):
	{
		if obj.Filler == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Filler)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FillerReward` param (optional):
	{
		if obj.FillerReward == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FillerReward)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FillRecordId` param (optional):
	{
		if obj.FillRecordId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FillRecordId)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BaseAssetAmountFilled` param (optional):
	{
		if obj.BaseAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `QuoteAssetAmountFilled` param (optional):
	{
		if obj.QuoteAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.QuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerFee` param (optional):
	{
		if obj.TakerFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerFee` param (optional):
	{
		if obj.MakerFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ReferrerReward` param (optional):
	{
		if obj.ReferrerReward == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ReferrerReward)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `QuoteAssetAmountSurplus` param (optional):
	{
		if obj.QuoteAssetAmountSurplus == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.QuoteAssetAmountSurplus)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SpotFulfillmentMethodFee` param (optional):
	{
		if obj.SpotFulfillmentMethodFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SpotFulfillmentMethodFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Taker` param (optional):
	{
		if obj.Taker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Taker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerOrderId` param (optional):
	{
		if obj.TakerOrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerOrderDirection` param (optional):
	{
		if obj.TakerOrderDirection == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerOrderDirection)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerOrderBaseAssetAmount` param (optional):
	{
		if obj.TakerOrderBaseAssetAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerOrderBaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerOrderCumulativeBaseAssetAmountFilled` param (optional):
	{
		if obj.TakerOrderCumulativeBaseAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TakerOrderCumulativeQuoteAssetAmountFilled` param (optional):
	{
		if obj.TakerOrderCumulativeQuoteAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Maker` param (optional):
	{
		if obj.Maker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Maker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderId` param (optional):
	{
		if obj.MakerOrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderDirection` param (optional):
	{
		if obj.MakerOrderDirection == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderDirection)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderBaseAssetAmount` param (optional):
	{
		if obj.MakerOrderBaseAssetAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderBaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderCumulativeBaseAssetAmountFilled` param (optional):
	{
		if obj.MakerOrderCumulativeBaseAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderCumulativeQuoteAssetAmountFilled` param (optional):
	{
		if obj.MakerOrderCumulativeQuoteAssetAmountFilled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `OraclePrice` param:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderActionRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderActionRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[224 52 67 71 194 237 109 1]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return err
	}
	// Deserialize `ActionExplanation`:
	err = decoder.Decode(&obj.ActionExplanation)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return err
	}
	// Deserialize `Filler` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Filler)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FillerReward` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FillerReward)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FillRecordId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FillRecordId)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `QuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.QuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ReferrerReward` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ReferrerReward)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `QuoteAssetAmountSurplus` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.QuoteAssetAmountSurplus)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SpotFulfillmentMethodFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SpotFulfillmentMethodFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Taker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Taker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerOrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerOrderDirection` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderDirection)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerOrderBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderBaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Maker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Maker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderDirection` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderDirection)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderBaseAssetAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return err
	}
	return nil
}

type LPRecord struct {
	Ts                    int64
	User                  ag_solanago.PublicKey
	Action                LPAction
	NShares               uint64
	MarketIndex           uint16
	DeltaBaseAssetAmount  int64
	DeltaQuoteAssetAmount int64
	Pnl                   int64
}

var LPRecordDiscriminator = [8]byte{101, 22, 54, 38, 178, 13, 142, 111}

func (obj LPRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LPRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Action` param:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return err
	}
	// Serialize `NShares` param:
	err = encoder.Encode(obj.NShares)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `DeltaBaseAssetAmount` param:
	err = encoder.Encode(obj.DeltaBaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `DeltaQuoteAssetAmount` param:
	err = encoder.Encode(obj.DeltaQuoteAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `Pnl` param:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LPRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LPRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[101 22 54 38 178 13 142 111]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return err
	}
	// Deserialize `NShares`:
	err = decoder.Decode(&obj.NShares)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `DeltaBaseAssetAmount`:
	err = decoder.Decode(&obj.DeltaBaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeltaQuoteAssetAmount`:
	err = decoder.Decode(&obj.DeltaQuoteAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return err
	}
	return nil
}

type LiquidationRecord struct {
	Ts                         int64
	LiquidationType            LiquidationType
	User                       ag_solanago.PublicKey
	Liquidator                 ag_solanago.PublicKey
	MarginRequirement          ag_binary.Uint128
	TotalCollateral            ag_binary.Int128
	MarginFreed                uint64
	LiquidationId              uint16
	Bankrupt                   bool
	CanceledOrderIds           []uint32
	LiquidatePerp              LiquidatePerpRecord
	LiquidateSpot              LiquidateSpotRecord
	LiquidateBorrowForPerpPnl  LiquidateBorrowForPerpPnlRecord
	LiquidatePerpPnlForDeposit LiquidatePerpPnlForDepositRecord
	PerpBankruptcy             PerpBankruptcyRecord
	SpotBankruptcy             SpotBankruptcyRecord
}

var LiquidationRecordDiscriminator = [8]byte{127, 17, 0, 108, 182, 13, 231, 53}

func (obj LiquidationRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LiquidationRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `LiquidationType` param:
	err = encoder.Encode(obj.LiquidationType)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Liquidator` param:
	err = encoder.Encode(obj.Liquidator)
	if err != nil {
		return err
	}
	// Serialize `MarginRequirement` param:
	err = encoder.Encode(obj.MarginRequirement)
	if err != nil {
		return err
	}
	// Serialize `TotalCollateral` param:
	err = encoder.Encode(obj.TotalCollateral)
	if err != nil {
		return err
	}
	// Serialize `MarginFreed` param:
	err = encoder.Encode(obj.MarginFreed)
	if err != nil {
		return err
	}
	// Serialize `LiquidationId` param:
	err = encoder.Encode(obj.LiquidationId)
	if err != nil {
		return err
	}
	// Serialize `Bankrupt` param:
	err = encoder.Encode(obj.Bankrupt)
	if err != nil {
		return err
	}
	// Serialize `CanceledOrderIds` param:
	err = encoder.Encode(obj.CanceledOrderIds)
	if err != nil {
		return err
	}
	// Serialize `LiquidatePerp` param:
	err = encoder.Encode(obj.LiquidatePerp)
	if err != nil {
		return err
	}
	// Serialize `LiquidateSpot` param:
	err = encoder.Encode(obj.LiquidateSpot)
	if err != nil {
		return err
	}
	// Serialize `LiquidateBorrowForPerpPnl` param:
	err = encoder.Encode(obj.LiquidateBorrowForPerpPnl)
	if err != nil {
		return err
	}
	// Serialize `LiquidatePerpPnlForDeposit` param:
	err = encoder.Encode(obj.LiquidatePerpPnlForDeposit)
	if err != nil {
		return err
	}
	// Serialize `PerpBankruptcy` param:
	err = encoder.Encode(obj.PerpBankruptcy)
	if err != nil {
		return err
	}
	// Serialize `SpotBankruptcy` param:
	err = encoder.Encode(obj.SpotBankruptcy)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidationRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LiquidationRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[127 17 0 108 182 13 231 53]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `LiquidationType`:
	err = decoder.Decode(&obj.LiquidationType)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Liquidator`:
	err = decoder.Decode(&obj.Liquidator)
	if err != nil {
		return err
	}
	// Deserialize `MarginRequirement`:
	err = decoder.Decode(&obj.MarginRequirement)
	if err != nil {
		return err
	}
	// Deserialize `TotalCollateral`:
	err = decoder.Decode(&obj.TotalCollateral)
	if err != nil {
		return err
	}
	// Deserialize `MarginFreed`:
	err = decoder.Decode(&obj.MarginFreed)
	if err != nil {
		return err
	}
	// Deserialize `LiquidationId`:
	err = decoder.Decode(&obj.LiquidationId)
	if err != nil {
		return err
	}
	// Deserialize `Bankrupt`:
	err = decoder.Decode(&obj.Bankrupt)
	if err != nil {
		return err
	}
	// Deserialize `CanceledOrderIds`:
	err = decoder.Decode(&obj.CanceledOrderIds)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatePerp`:
	err = decoder.Decode(&obj.LiquidatePerp)
	if err != nil {
		return err
	}
	// Deserialize `LiquidateSpot`:
	err = decoder.Decode(&obj.LiquidateSpot)
	if err != nil {
		return err
	}
	// Deserialize `LiquidateBorrowForPerpPnl`:
	err = decoder.Decode(&obj.LiquidateBorrowForPerpPnl)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatePerpPnlForDeposit`:
	err = decoder.Decode(&obj.LiquidatePerpPnlForDeposit)
	if err != nil {
		return err
	}
	// Deserialize `PerpBankruptcy`:
	err = decoder.Decode(&obj.PerpBankruptcy)
	if err != nil {
		return err
	}
	// Deserialize `SpotBankruptcy`:
	err = decoder.Decode(&obj.SpotBankruptcy)
	if err != nil {
		return err
	}
	return nil
}

type SettlePnlRecord struct {
	Ts                    int64
	User                  ag_solanago.PublicKey
	MarketIndex           uint16
	Pnl                   ag_binary.Int128
	BaseAssetAmount       int64
	QuoteAssetAmountAfter int64
	QuoteEntryAmount      int64
	SettlePrice           int64
	Explanation           SettlePnlExplanation
}

var SettlePnlRecordDiscriminator = [8]byte{57, 68, 105, 26, 119, 198, 213, 89}

func (obj SettlePnlRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SettlePnlRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `Pnl` param:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return err
	}
	// Serialize `BaseAssetAmount` param:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetAmountAfter` param:
	err = encoder.Encode(obj.QuoteAssetAmountAfter)
	if err != nil {
		return err
	}
	// Serialize `QuoteEntryAmount` param:
	err = encoder.Encode(obj.QuoteEntryAmount)
	if err != nil {
		return err
	}
	// Serialize `SettlePrice` param:
	err = encoder.Encode(obj.SettlePrice)
	if err != nil {
		return err
	}
	// Serialize `Explanation` param:
	err = encoder.Encode(obj.Explanation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SettlePnlRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SettlePnlRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[57 68 105 26 119 198 213 89]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return err
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetAmountAfter`:
	err = decoder.Decode(&obj.QuoteAssetAmountAfter)
	if err != nil {
		return err
	}
	// Deserialize `QuoteEntryAmount`:
	err = decoder.Decode(&obj.QuoteEntryAmount)
	if err != nil {
		return err
	}
	// Deserialize `SettlePrice`:
	err = decoder.Decode(&obj.SettlePrice)
	if err != nil {
		return err
	}
	// Deserialize `Explanation`:
	err = decoder.Decode(&obj.Explanation)
	if err != nil {
		return err
	}
	return nil
}

type InsuranceFundRecord struct {
	Ts                         int64
	SpotMarketIndex            uint16
	PerpMarketIndex            uint16
	UserIfFactor               uint32
	TotalIfFactor              uint32
	VaultAmountBefore          uint64
	InsuranceVaultAmountBefore uint64
	TotalIfSharesBefore        ag_binary.Uint128
	TotalIfSharesAfter         ag_binary.Uint128
	Amount                     int64
}

var InsuranceFundRecordDiscriminator = [8]byte{56, 222, 215, 235, 78, 197, 99, 146}

func (obj InsuranceFundRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InsuranceFundRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `SpotMarketIndex` param:
	err = encoder.Encode(obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `PerpMarketIndex` param:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `UserIfFactor` param:
	err = encoder.Encode(obj.UserIfFactor)
	if err != nil {
		return err
	}
	// Serialize `TotalIfFactor` param:
	err = encoder.Encode(obj.TotalIfFactor)
	if err != nil {
		return err
	}
	// Serialize `VaultAmountBefore` param:
	err = encoder.Encode(obj.VaultAmountBefore)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultAmountBefore` param:
	err = encoder.Encode(obj.InsuranceVaultAmountBefore)
	if err != nil {
		return err
	}
	// Serialize `TotalIfSharesBefore` param:
	err = encoder.Encode(obj.TotalIfSharesBefore)
	if err != nil {
		return err
	}
	// Serialize `TotalIfSharesAfter` param:
	err = encoder.Encode(obj.TotalIfSharesAfter)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceFundRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InsuranceFundRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[56 222 215 235 78 197 99 146]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `SpotMarketIndex`:
	err = decoder.Decode(&obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `UserIfFactor`:
	err = decoder.Decode(&obj.UserIfFactor)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfFactor`:
	err = decoder.Decode(&obj.TotalIfFactor)
	if err != nil {
		return err
	}
	// Deserialize `VaultAmountBefore`:
	err = decoder.Decode(&obj.VaultAmountBefore)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultAmountBefore`:
	err = decoder.Decode(&obj.InsuranceVaultAmountBefore)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfSharesBefore`:
	err = decoder.Decode(&obj.TotalIfSharesBefore)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfSharesAfter`:
	err = decoder.Decode(&obj.TotalIfSharesAfter)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type InsuranceFundStakeRecord struct {
	Ts                         int64
	UserAuthority              ag_solanago.PublicKey
	Action                     StakeAction
	Amount                     uint64
	MarketIndex                uint16
	InsuranceVaultAmountBefore uint64
	IfSharesBefore             ag_binary.Uint128
	UserIfSharesBefore         ag_binary.Uint128
	TotalIfSharesBefore        ag_binary.Uint128
	IfSharesAfter              ag_binary.Uint128
	UserIfSharesAfter          ag_binary.Uint128
	TotalIfSharesAfter         ag_binary.Uint128
}

var InsuranceFundStakeRecordDiscriminator = [8]byte{68, 66, 156, 7, 216, 148, 250, 114}

func (obj InsuranceFundStakeRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InsuranceFundStakeRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `UserAuthority` param:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return err
	}
	// Serialize `Action` param:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultAmountBefore` param:
	err = encoder.Encode(obj.InsuranceVaultAmountBefore)
	if err != nil {
		return err
	}
	// Serialize `IfSharesBefore` param:
	err = encoder.Encode(obj.IfSharesBefore)
	if err != nil {
		return err
	}
	// Serialize `UserIfSharesBefore` param:
	err = encoder.Encode(obj.UserIfSharesBefore)
	if err != nil {
		return err
	}
	// Serialize `TotalIfSharesBefore` param:
	err = encoder.Encode(obj.TotalIfSharesBefore)
	if err != nil {
		return err
	}
	// Serialize `IfSharesAfter` param:
	err = encoder.Encode(obj.IfSharesAfter)
	if err != nil {
		return err
	}
	// Serialize `UserIfSharesAfter` param:
	err = encoder.Encode(obj.UserIfSharesAfter)
	if err != nil {
		return err
	}
	// Serialize `TotalIfSharesAfter` param:
	err = encoder.Encode(obj.TotalIfSharesAfter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceFundStakeRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InsuranceFundStakeRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[68 66 156 7 216 148 250 114]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultAmountBefore`:
	err = decoder.Decode(&obj.InsuranceVaultAmountBefore)
	if err != nil {
		return err
	}
	// Deserialize `IfSharesBefore`:
	err = decoder.Decode(&obj.IfSharesBefore)
	if err != nil {
		return err
	}
	// Deserialize `UserIfSharesBefore`:
	err = decoder.Decode(&obj.UserIfSharesBefore)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfSharesBefore`:
	err = decoder.Decode(&obj.TotalIfSharesBefore)
	if err != nil {
		return err
	}
	// Deserialize `IfSharesAfter`:
	err = decoder.Decode(&obj.IfSharesAfter)
	if err != nil {
		return err
	}
	// Deserialize `UserIfSharesAfter`:
	err = decoder.Decode(&obj.UserIfSharesAfter)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfSharesAfter`:
	err = decoder.Decode(&obj.TotalIfSharesAfter)
	if err != nil {
		return err
	}
	return nil
}

type SwapRecord struct {
	Ts             int64
	User           ag_solanago.PublicKey
	AmountOut      uint64
	AmountIn       uint64
	OutMarketIndex uint16
	InMarketIndex  uint16
	OutOraclePrice int64
	InOraclePrice  int64
	Fee            uint64
}

var SwapRecordDiscriminator = [8]byte{162, 187, 123, 194, 138, 56, 250, 241}

func (obj SwapRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SwapRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ts` param:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `AmountOut` param:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `OutMarketIndex` param:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `InMarketIndex` param:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OutOraclePrice` param:
	err = encoder.Encode(obj.OutOraclePrice)
	if err != nil {
		return err
	}
	// Serialize `InOraclePrice` param:
	err = encoder.Encode(obj.InOraclePrice)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SwapRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[162 187 123 194 138 56 250 241]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OutOraclePrice`:
	err = decoder.Decode(&obj.OutOraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `InOraclePrice`:
	err = decoder.Decode(&obj.InOraclePrice)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	return nil
}
