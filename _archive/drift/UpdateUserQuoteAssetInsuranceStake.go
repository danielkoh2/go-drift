// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateUserQuoteAssetInsuranceStake is the `updateUserQuoteAssetInsuranceStake` instruction.
type UpdateUserQuoteAssetInsuranceStake struct {

	// [0] = [] state
	//
	// [1] = [] spotMarket
	//
	// [2] = [WRITE] insuranceFundStake
	//
	// [3] = [WRITE] userStats
	//
	// [4] = [SIGNER] authority
	//
	// [5] = [WRITE] insuranceFundVault
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateUserQuoteAssetInsuranceStakeInstructionBuilder creates a new `UpdateUserQuoteAssetInsuranceStake` instruction builder.
func NewUpdateUserQuoteAssetInsuranceStakeInstructionBuilder() *UpdateUserQuoteAssetInsuranceStake {
	nd := &UpdateUserQuoteAssetInsuranceStake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetStateAccount(state ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(spotMarket)
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInsuranceFundStakeAccount sets the "insuranceFundStake" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetInsuranceFundStakeAccount(insuranceFundStake ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(insuranceFundStake).WRITE()
	return inst
}

// GetInsuranceFundStakeAccount gets the "insuranceFundStake" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetInsuranceFundStakeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetUserStatsAccount(userStats ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInsuranceFundVaultAccount sets the "insuranceFundVault" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) SetInsuranceFundVaultAccount(insuranceFundVault ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(insuranceFundVault).WRITE()
	return inst
}

// GetInsuranceFundVaultAccount gets the "insuranceFundVault" account.
func (inst *UpdateUserQuoteAssetInsuranceStake) GetInsuranceFundVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst UpdateUserQuoteAssetInsuranceStake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateUserQuoteAssetInsuranceStake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateUserQuoteAssetInsuranceStake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateUserQuoteAssetInsuranceStake) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InsuranceFundStake is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InsuranceFundVault is not set")
		}
	}
	return nil
}

func (inst *UpdateUserQuoteAssetInsuranceStake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateUserQuoteAssetInsuranceStake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        spotMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("insuranceFundStake", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         userStats", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("insuranceFundVault", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj UpdateUserQuoteAssetInsuranceStake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UpdateUserQuoteAssetInsuranceStake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUpdateUserQuoteAssetInsuranceStakeInstruction declares a new UpdateUserQuoteAssetInsuranceStake instruction with the provided parameters and accounts.
func NewUpdateUserQuoteAssetInsuranceStakeInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey,
	insuranceFundStake ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	insuranceFundVault ag_solanago.PublicKey) *UpdateUserQuoteAssetInsuranceStake {
	return NewUpdateUserQuoteAssetInsuranceStakeInstructionBuilder().
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket).
		SetInsuranceFundStakeAccount(insuranceFundStake).
		SetUserStatsAccount(userStats).
		SetAuthorityAccount(authority).
		SetInsuranceFundVaultAccount(insuranceFundVault)
}
