// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FillPerpOrder is the `fillPerpOrder` instruction.
type FillPerpOrder struct {
	OrderId      *uint32 `bin:"optional"`
	MakerOrderId *uint32 `bin:"optional"`

	// [0] = [] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] filler
	//
	// [3] = [WRITE] fillerStats
	//
	// [4] = [WRITE] user
	//
	// [5] = [WRITE] userStats
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFillPerpOrderInstructionBuilder creates a new `FillPerpOrder` instruction builder.
func NewFillPerpOrderInstructionBuilder() *FillPerpOrder {
	nd := &FillPerpOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetOrderId sets the "orderId" parameter.
func (inst *FillPerpOrder) SetOrderId(orderId uint32) *FillPerpOrder {
	inst.OrderId = &orderId
	return inst
}

// SetMakerOrderId sets the "makerOrderId" parameter.
func (inst *FillPerpOrder) SetMakerOrderId(makerOrderId uint32) *FillPerpOrder {
	inst.MakerOrderId = &makerOrderId
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *FillPerpOrder) SetStateAccount(state ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *FillPerpOrder) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *FillPerpOrder) SetAuthorityAccount(authority ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *FillPerpOrder) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFillerAccount sets the "filler" account.
func (inst *FillPerpOrder) SetFillerAccount(filler ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(filler).WRITE()
	return inst
}

// GetFillerAccount gets the "filler" account.
func (inst *FillPerpOrder) GetFillerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFillerStatsAccount sets the "fillerStats" account.
func (inst *FillPerpOrder) SetFillerStatsAccount(fillerStats ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fillerStats).WRITE()
	return inst
}

// GetFillerStatsAccount gets the "fillerStats" account.
func (inst *FillPerpOrder) GetFillerStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserAccount sets the "user" account.
func (inst *FillPerpOrder) SetUserAccount(user ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *FillPerpOrder) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *FillPerpOrder) SetUserStatsAccount(userStats ag_solanago.PublicKey) *FillPerpOrder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *FillPerpOrder) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst FillPerpOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FillPerpOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FillPerpOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FillPerpOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Filler is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FillerStats is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserStats is not set")
		}
	}
	return nil
}

func (inst *FillPerpOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FillPerpOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     OrderId (OPT)", inst.OrderId))
						paramsBranch.Child(ag_format.Param("MakerOrderId (OPT)", inst.MakerOrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     filler", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("fillerStats", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       user", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  userStats", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj FillPerpOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param (optional):
	{
		if obj.OrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.OrderId)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MakerOrderId` param (optional):
	{
		if obj.MakerOrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *FillPerpOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.OrderId)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MakerOrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderId)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewFillPerpOrderInstruction declares a new FillPerpOrder instruction with the provided parameters and accounts.
func NewFillPerpOrderInstruction(
	// Parameters:
	orderId uint32,
	makerOrderId uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	filler ag_solanago.PublicKey,
	fillerStats ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey) *FillPerpOrder {
	return NewFillPerpOrderInstructionBuilder().
		SetOrderId(orderId).
		SetMakerOrderId(makerOrderId).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetFillerAccount(filler).
		SetFillerStatsAccount(fillerStats).
		SetUserAccount(user).
		SetUserStatsAccount(userStats)
}
