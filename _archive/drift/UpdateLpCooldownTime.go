// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateLpCooldownTime is the `updateLpCooldownTime` instruction.
type UpdateLpCooldownTime struct {
	LpCooldownTime *uint64

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE] state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateLpCooldownTimeInstructionBuilder creates a new `UpdateLpCooldownTime` instruction builder.
func NewUpdateLpCooldownTimeInstructionBuilder() *UpdateLpCooldownTime {
	nd := &UpdateLpCooldownTime{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetLpCooldownTime sets the "lpCooldownTime" parameter.
func (inst *UpdateLpCooldownTime) SetLpCooldownTime(lpCooldownTime uint64) *UpdateLpCooldownTime {
	inst.LpCooldownTime = &lpCooldownTime
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateLpCooldownTime) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateLpCooldownTime {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateLpCooldownTime) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateLpCooldownTime) SetStateAccount(state ag_solanago.PublicKey) *UpdateLpCooldownTime {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateLpCooldownTime) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateLpCooldownTime) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateLpCooldownTime,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateLpCooldownTime) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateLpCooldownTime) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LpCooldownTime == nil {
			return errors.New("LpCooldownTime parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
	}
	return nil
}

func (inst *UpdateLpCooldownTime) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateLpCooldownTime")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LpCooldownTime", *inst.LpCooldownTime))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("state", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateLpCooldownTime) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpCooldownTime` param:
	err = encoder.Encode(obj.LpCooldownTime)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateLpCooldownTime) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpCooldownTime`:
	err = decoder.Decode(&obj.LpCooldownTime)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateLpCooldownTimeInstruction declares a new UpdateLpCooldownTime instruction with the provided parameters and accounts.
func NewUpdateLpCooldownTimeInstruction(
	// Parameters:
	lpCooldownTime uint64,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey) *UpdateLpCooldownTime {
	return NewUpdateLpCooldownTimeInstructionBuilder().
		SetLpCooldownTime(lpCooldownTime).
		SetAdminAccount(admin).
		SetStateAccount(state)
}
