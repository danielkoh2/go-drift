// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeleteUser is the `deleteUser` instruction.
type DeleteUser struct {

	// [0] = [WRITE] user
	//
	// [1] = [WRITE] userStats
	//
	// [2] = [WRITE] state
	//
	// [3] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeleteUserInstructionBuilder creates a new `DeleteUser` instruction builder.
func NewDeleteUserInstructionBuilder() *DeleteUser {
	nd := &DeleteUser{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetUserAccount sets the "user" account.
func (inst *DeleteUser) SetUserAccount(user ag_solanago.PublicKey) *DeleteUser {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *DeleteUser) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *DeleteUser) SetUserStatsAccount(userStats ag_solanago.PublicKey) *DeleteUser {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *DeleteUser) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStateAccount sets the "state" account.
func (inst *DeleteUser) SetStateAccount(state ag_solanago.PublicKey) *DeleteUser {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *DeleteUser) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *DeleteUser) SetAuthorityAccount(authority ag_solanago.PublicKey) *DeleteUser {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *DeleteUser) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst DeleteUser) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeleteUser,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeleteUser) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeleteUser) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *DeleteUser) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeleteUser")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("userStats", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj DeleteUser) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeleteUser) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeleteUserInstruction declares a new DeleteUser instruction with the provided parameters and accounts.
func NewDeleteUserInstruction(
	// Accounts:
	user ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *DeleteUser {
	return NewDeleteUserInstructionBuilder().
		SetUserAccount(user).
		SetUserStatsAccount(userStats).
		SetStateAccount(state).
		SetAuthorityAccount(authority)
}
