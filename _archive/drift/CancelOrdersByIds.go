// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CancelOrdersByIds is the `cancelOrdersByIds` instruction.
type CancelOrdersByIds struct {
	OrderIds *[]uint32

	// [0] = [] state
	//
	// [1] = [WRITE] user
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelOrdersByIdsInstructionBuilder creates a new `CancelOrdersByIds` instruction builder.
func NewCancelOrdersByIdsInstructionBuilder() *CancelOrdersByIds {
	nd := &CancelOrdersByIds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetOrderIds sets the "orderIds" parameter.
func (inst *CancelOrdersByIds) SetOrderIds(orderIds []uint32) *CancelOrdersByIds {
	inst.OrderIds = &orderIds
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *CancelOrdersByIds) SetStateAccount(state ag_solanago.PublicKey) *CancelOrdersByIds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *CancelOrdersByIds) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *CancelOrdersByIds) SetUserAccount(user ag_solanago.PublicKey) *CancelOrdersByIds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CancelOrdersByIds) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CancelOrdersByIds) SetAuthorityAccount(authority ag_solanago.PublicKey) *CancelOrdersByIds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CancelOrdersByIds) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst CancelOrdersByIds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CancelOrdersByIds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelOrdersByIds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelOrdersByIds) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OrderIds == nil {
			return errors.New("OrderIds parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *CancelOrdersByIds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelOrdersByIds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OrderIds", *inst.OrderIds))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CancelOrdersByIds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderIds` param:
	err = encoder.Encode(obj.OrderIds)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelOrdersByIds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderIds`:
	err = decoder.Decode(&obj.OrderIds)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelOrdersByIdsInstruction declares a new CancelOrdersByIds instruction with the provided parameters and accounts.
func NewCancelOrdersByIdsInstruction(
	// Parameters:
	orderIds []uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *CancelOrdersByIds {
	return NewCancelOrdersByIdsInstructionBuilder().
		SetOrderIds(orderIds).
		SetStateAccount(state).
		SetUserAccount(user).
		SetAuthorityAccount(authority)
}
