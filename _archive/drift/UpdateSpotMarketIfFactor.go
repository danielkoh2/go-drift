// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSpotMarketIfFactor is the `updateSpotMarketIfFactor` instruction.
type UpdateSpotMarketIfFactor struct {
	SpotMarketIndex *uint16
	UserIfFactor    *uint32
	TotalIfFactor   *uint32

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] spotMarket
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSpotMarketIfFactorInstructionBuilder creates a new `UpdateSpotMarketIfFactor` instruction builder.
func NewUpdateSpotMarketIfFactorInstructionBuilder() *UpdateSpotMarketIfFactor {
	nd := &UpdateSpotMarketIfFactor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetSpotMarketIndex sets the "spotMarketIndex" parameter.
func (inst *UpdateSpotMarketIfFactor) SetSpotMarketIndex(spotMarketIndex uint16) *UpdateSpotMarketIfFactor {
	inst.SpotMarketIndex = &spotMarketIndex
	return inst
}

// SetUserIfFactor sets the "userIfFactor" parameter.
func (inst *UpdateSpotMarketIfFactor) SetUserIfFactor(userIfFactor uint32) *UpdateSpotMarketIfFactor {
	inst.UserIfFactor = &userIfFactor
	return inst
}

// SetTotalIfFactor sets the "totalIfFactor" parameter.
func (inst *UpdateSpotMarketIfFactor) SetTotalIfFactor(totalIfFactor uint32) *UpdateSpotMarketIfFactor {
	inst.TotalIfFactor = &totalIfFactor
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSpotMarketIfFactor) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSpotMarketIfFactor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSpotMarketIfFactor) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSpotMarketIfFactor) SetStateAccount(state ag_solanago.PublicKey) *UpdateSpotMarketIfFactor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSpotMarketIfFactor) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateSpotMarketIfFactor) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateSpotMarketIfFactor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateSpotMarketIfFactor) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateSpotMarketIfFactor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSpotMarketIfFactor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSpotMarketIfFactor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSpotMarketIfFactor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SpotMarketIndex == nil {
			return errors.New("SpotMarketIndex parameter is not set")
		}
		if inst.UserIfFactor == nil {
			return errors.New("UserIfFactor parameter is not set")
		}
		if inst.TotalIfFactor == nil {
			return errors.New("TotalIfFactor parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
	}
	return nil
}

func (inst *UpdateSpotMarketIfFactor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSpotMarketIfFactor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SpotMarketIndex", *inst.SpotMarketIndex))
						paramsBranch.Child(ag_format.Param("   UserIfFactor", *inst.UserIfFactor))
						paramsBranch.Child(ag_format.Param("  TotalIfFactor", *inst.TotalIfFactor))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("spotMarket", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateSpotMarketIfFactor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SpotMarketIndex` param:
	err = encoder.Encode(obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `UserIfFactor` param:
	err = encoder.Encode(obj.UserIfFactor)
	if err != nil {
		return err
	}
	// Serialize `TotalIfFactor` param:
	err = encoder.Encode(obj.TotalIfFactor)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSpotMarketIfFactor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SpotMarketIndex`:
	err = decoder.Decode(&obj.SpotMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `UserIfFactor`:
	err = decoder.Decode(&obj.UserIfFactor)
	if err != nil {
		return err
	}
	// Deserialize `TotalIfFactor`:
	err = decoder.Decode(&obj.TotalIfFactor)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSpotMarketIfFactorInstruction declares a new UpdateSpotMarketIfFactor instruction with the provided parameters and accounts.
func NewUpdateSpotMarketIfFactorInstruction(
	// Parameters:
	spotMarketIndex uint16,
	userIfFactor uint32,
	totalIfFactor uint32,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey) *UpdateSpotMarketIfFactor {
	return NewUpdateSpotMarketIfFactorInstructionBuilder().
		SetSpotMarketIndex(spotMarketIndex).
		SetUserIfFactor(userIfFactor).
		SetTotalIfFactor(totalIfFactor).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket)
}
