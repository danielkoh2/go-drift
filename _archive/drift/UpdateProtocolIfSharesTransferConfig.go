// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateProtocolIfSharesTransferConfig is the `updateProtocolIfSharesTransferConfig` instruction.
type UpdateProtocolIfSharesTransferConfig struct {
	WhitelistedSigners  *[4]ag_solanago.PublicKey `bin:"optional"`
	MaxTransferPerEpoch *ag_binary.Uint128        `bin:"optional"`

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] protocolIfSharesTransferConfig
	//
	// [2] = [] state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateProtocolIfSharesTransferConfigInstructionBuilder creates a new `UpdateProtocolIfSharesTransferConfig` instruction builder.
func NewUpdateProtocolIfSharesTransferConfigInstructionBuilder() *UpdateProtocolIfSharesTransferConfig {
	nd := &UpdateProtocolIfSharesTransferConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetWhitelistedSigners sets the "whitelistedSigners" parameter.
func (inst *UpdateProtocolIfSharesTransferConfig) SetWhitelistedSigners(whitelistedSigners [4]ag_solanago.PublicKey) *UpdateProtocolIfSharesTransferConfig {
	inst.WhitelistedSigners = &whitelistedSigners
	return inst
}

// SetMaxTransferPerEpoch sets the "maxTransferPerEpoch" parameter.
func (inst *UpdateProtocolIfSharesTransferConfig) SetMaxTransferPerEpoch(maxTransferPerEpoch ag_binary.Uint128) *UpdateProtocolIfSharesTransferConfig {
	inst.MaxTransferPerEpoch = &maxTransferPerEpoch
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateProtocolIfSharesTransferConfig) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateProtocolIfSharesTransferConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateProtocolIfSharesTransferConfig) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolIfSharesTransferConfigAccount sets the "protocolIfSharesTransferConfig" account.
func (inst *UpdateProtocolIfSharesTransferConfig) SetProtocolIfSharesTransferConfigAccount(protocolIfSharesTransferConfig ag_solanago.PublicKey) *UpdateProtocolIfSharesTransferConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocolIfSharesTransferConfig).WRITE()
	return inst
}

// GetProtocolIfSharesTransferConfigAccount gets the "protocolIfSharesTransferConfig" account.
func (inst *UpdateProtocolIfSharesTransferConfig) GetProtocolIfSharesTransferConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateProtocolIfSharesTransferConfig) SetStateAccount(state ag_solanago.PublicKey) *UpdateProtocolIfSharesTransferConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateProtocolIfSharesTransferConfig) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateProtocolIfSharesTransferConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateProtocolIfSharesTransferConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateProtocolIfSharesTransferConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateProtocolIfSharesTransferConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProtocolIfSharesTransferConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.State is not set")
		}
	}
	return nil
}

func (inst *UpdateProtocolIfSharesTransferConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateProtocolIfSharesTransferConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" WhitelistedSigners (OPT)", inst.WhitelistedSigners))
						paramsBranch.Child(ag_format.Param("MaxTransferPerEpoch (OPT)", inst.MaxTransferPerEpoch))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("protocolIfSharesTransferConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                         state", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateProtocolIfSharesTransferConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhitelistedSigners` param (optional):
	{
		if obj.WhitelistedSigners == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WhitelistedSigners)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxTransferPerEpoch` param (optional):
	{
		if obj.MaxTransferPerEpoch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxTransferPerEpoch)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateProtocolIfSharesTransferConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhitelistedSigners` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WhitelistedSigners)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxTransferPerEpoch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxTransferPerEpoch)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateProtocolIfSharesTransferConfigInstruction declares a new UpdateProtocolIfSharesTransferConfig instruction with the provided parameters and accounts.
func NewUpdateProtocolIfSharesTransferConfigInstruction(
	// Parameters:
	whitelistedSigners [4]ag_solanago.PublicKey,
	maxTransferPerEpoch ag_binary.Uint128,
	// Accounts:
	admin ag_solanago.PublicKey,
	protocolIfSharesTransferConfig ag_solanago.PublicKey,
	state ag_solanago.PublicKey) *UpdateProtocolIfSharesTransferConfig {
	return NewUpdateProtocolIfSharesTransferConfigInstructionBuilder().
		SetWhitelistedSigners(whitelistedSigners).
		SetMaxTransferPerEpoch(maxTransferPerEpoch).
		SetAdminAccount(admin).
		SetProtocolIfSharesTransferConfigAccount(protocolIfSharesTransferConfig).
		SetStateAccount(state)
}
