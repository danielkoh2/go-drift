// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BeginSwap is the `beginSwap` instruction.
type BeginSwap struct {
	InMarketIndex  *uint16
	OutMarketIndex *uint16
	AmountIn       *uint64

	// [0] = [] state
	//
	// [1] = [WRITE] user
	//
	// [2] = [WRITE] userStats
	//
	// [3] = [SIGNER] authority
	//
	// [4] = [WRITE] outSpotMarketVault
	//
	// [5] = [WRITE] inSpotMarketVault
	//
	// [6] = [WRITE] outTokenAccount
	//
	// [7] = [WRITE] inTokenAccount
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] driftSigner
	//
	// [10] = [] instructions
	// ··········· Instructions Sysvar for instruction introspection
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBeginSwapInstructionBuilder creates a new `BeginSwap` instruction builder.
func NewBeginSwapInstructionBuilder() *BeginSwap {
	nd := &BeginSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetInMarketIndex sets the "inMarketIndex" parameter.
func (inst *BeginSwap) SetInMarketIndex(inMarketIndex uint16) *BeginSwap {
	inst.InMarketIndex = &inMarketIndex
	return inst
}

// SetOutMarketIndex sets the "outMarketIndex" parameter.
func (inst *BeginSwap) SetOutMarketIndex(outMarketIndex uint16) *BeginSwap {
	inst.OutMarketIndex = &outMarketIndex
	return inst
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *BeginSwap) SetAmountIn(amountIn uint64) *BeginSwap {
	inst.AmountIn = &amountIn
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *BeginSwap) SetStateAccount(state ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *BeginSwap) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *BeginSwap) SetUserAccount(user ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *BeginSwap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *BeginSwap) SetUserStatsAccount(userStats ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *BeginSwap) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *BeginSwap) SetAuthorityAccount(authority ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *BeginSwap) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOutSpotMarketVaultAccount sets the "outSpotMarketVault" account.
func (inst *BeginSwap) SetOutSpotMarketVaultAccount(outSpotMarketVault ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(outSpotMarketVault).WRITE()
	return inst
}

// GetOutSpotMarketVaultAccount gets the "outSpotMarketVault" account.
func (inst *BeginSwap) GetOutSpotMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInSpotMarketVaultAccount sets the "inSpotMarketVault" account.
func (inst *BeginSwap) SetInSpotMarketVaultAccount(inSpotMarketVault ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(inSpotMarketVault).WRITE()
	return inst
}

// GetInSpotMarketVaultAccount gets the "inSpotMarketVault" account.
func (inst *BeginSwap) GetInSpotMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOutTokenAccountAccount sets the "outTokenAccount" account.
func (inst *BeginSwap) SetOutTokenAccountAccount(outTokenAccount ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(outTokenAccount).WRITE()
	return inst
}

// GetOutTokenAccountAccount gets the "outTokenAccount" account.
func (inst *BeginSwap) GetOutTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetInTokenAccountAccount sets the "inTokenAccount" account.
func (inst *BeginSwap) SetInTokenAccountAccount(inTokenAccount ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(inTokenAccount).WRITE()
	return inst
}

// GetInTokenAccountAccount gets the "inTokenAccount" account.
func (inst *BeginSwap) GetInTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *BeginSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *BeginSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDriftSignerAccount sets the "driftSigner" account.
func (inst *BeginSwap) SetDriftSignerAccount(driftSigner ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(driftSigner)
	return inst
}

// GetDriftSignerAccount gets the "driftSigner" account.
func (inst *BeginSwap) GetDriftSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetInstructionsAccount sets the "instructions" account.
// Instructions Sysvar for instruction introspection
func (inst *BeginSwap) SetInstructionsAccount(instructions ag_solanago.PublicKey) *BeginSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(instructions)
	return inst
}

// GetInstructionsAccount gets the "instructions" account.
// Instructions Sysvar for instruction introspection
func (inst *BeginSwap) GetInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst BeginSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BeginSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BeginSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BeginSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.InMarketIndex == nil {
			return errors.New("InMarketIndex parameter is not set")
		}
		if inst.OutMarketIndex == nil {
			return errors.New("OutMarketIndex parameter is not set")
		}
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OutSpotMarketVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InSpotMarketVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OutTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.InTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.DriftSigner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Instructions is not set")
		}
	}
	return nil
}

func (inst *BeginSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BeginSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" InMarketIndex", *inst.InMarketIndex))
						paramsBranch.Child(ag_format.Param("OutMarketIndex", *inst.OutMarketIndex))
						paramsBranch.Child(ag_format.Param("      AmountIn", *inst.AmountIn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         userStats", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("outSpotMarketVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" inSpotMarketVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          outToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           inToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       driftSigner", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      instructions", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj BeginSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InMarketIndex` param:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `OutMarketIndex` param:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BeginSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	return nil
}

// NewBeginSwapInstruction declares a new BeginSwap instruction with the provided parameters and accounts.
func NewBeginSwapInstruction(
	// Parameters:
	inMarketIndex uint16,
	outMarketIndex uint16,
	amountIn uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	outSpotMarketVault ag_solanago.PublicKey,
	inSpotMarketVault ag_solanago.PublicKey,
	outTokenAccount ag_solanago.PublicKey,
	inTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	driftSigner ag_solanago.PublicKey,
	instructions ag_solanago.PublicKey) *BeginSwap {
	return NewBeginSwapInstructionBuilder().
		SetInMarketIndex(inMarketIndex).
		SetOutMarketIndex(outMarketIndex).
		SetAmountIn(amountIn).
		SetStateAccount(state).
		SetUserAccount(user).
		SetUserStatsAccount(userStats).
		SetAuthorityAccount(authority).
		SetOutSpotMarketVaultAccount(outSpotMarketVault).
		SetInSpotMarketVaultAccount(inSpotMarketVault).
		SetOutTokenAccountAccount(outTokenAccount).
		SetInTokenAccountAccount(inTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetDriftSignerAccount(driftSigner).
		SetInstructionsAccount(instructions)
}
