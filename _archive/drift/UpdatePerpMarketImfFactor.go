// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdatePerpMarketImfFactor is the `updatePerpMarketImfFactor` instruction.
type UpdatePerpMarketImfFactor struct {
	ImfFactor              *uint32
	UnrealizedPnlImfFactor *uint32

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] perpMarket
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePerpMarketImfFactorInstructionBuilder creates a new `UpdatePerpMarketImfFactor` instruction builder.
func NewUpdatePerpMarketImfFactorInstructionBuilder() *UpdatePerpMarketImfFactor {
	nd := &UpdatePerpMarketImfFactor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetImfFactor sets the "imfFactor" parameter.
func (inst *UpdatePerpMarketImfFactor) SetImfFactor(imfFactor uint32) *UpdatePerpMarketImfFactor {
	inst.ImfFactor = &imfFactor
	return inst
}

// SetUnrealizedPnlImfFactor sets the "unrealizedPnlImfFactor" parameter.
func (inst *UpdatePerpMarketImfFactor) SetUnrealizedPnlImfFactor(unrealizedPnlImfFactor uint32) *UpdatePerpMarketImfFactor {
	inst.UnrealizedPnlImfFactor = &unrealizedPnlImfFactor
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdatePerpMarketImfFactor) SetAdminAccount(admin ag_solanago.PublicKey) *UpdatePerpMarketImfFactor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdatePerpMarketImfFactor) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdatePerpMarketImfFactor) SetStateAccount(state ag_solanago.PublicKey) *UpdatePerpMarketImfFactor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdatePerpMarketImfFactor) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPerpMarketAccount sets the "perpMarket" account.
func (inst *UpdatePerpMarketImfFactor) SetPerpMarketAccount(perpMarket ag_solanago.PublicKey) *UpdatePerpMarketImfFactor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(perpMarket).WRITE()
	return inst
}

// GetPerpMarketAccount gets the "perpMarket" account.
func (inst *UpdatePerpMarketImfFactor) GetPerpMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdatePerpMarketImfFactor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePerpMarketImfFactor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePerpMarketImfFactor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePerpMarketImfFactor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ImfFactor == nil {
			return errors.New("ImfFactor parameter is not set")
		}
		if inst.UnrealizedPnlImfFactor == nil {
			return errors.New("UnrealizedPnlImfFactor parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PerpMarket is not set")
		}
	}
	return nil
}

func (inst *UpdatePerpMarketImfFactor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePerpMarketImfFactor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("             ImfFactor", *inst.ImfFactor))
						paramsBranch.Child(ag_format.Param("UnrealizedPnlImfFactor", *inst.UnrealizedPnlImfFactor))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("perpMarket", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdatePerpMarketImfFactor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ImfFactor` param:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return err
	}
	// Serialize `UnrealizedPnlImfFactor` param:
	err = encoder.Encode(obj.UnrealizedPnlImfFactor)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdatePerpMarketImfFactor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return err
	}
	// Deserialize `UnrealizedPnlImfFactor`:
	err = decoder.Decode(&obj.UnrealizedPnlImfFactor)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdatePerpMarketImfFactorInstruction declares a new UpdatePerpMarketImfFactor instruction with the provided parameters and accounts.
func NewUpdatePerpMarketImfFactorInstruction(
	// Parameters:
	imfFactor uint32,
	unrealizedPnlImfFactor uint32,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	perpMarket ag_solanago.PublicKey) *UpdatePerpMarketImfFactor {
	return NewUpdatePerpMarketImfFactorInstructionBuilder().
		SetImfFactor(imfFactor).
		SetUnrealizedPnlImfFactor(unrealizedPnlImfFactor).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetPerpMarketAccount(perpMarket)
}
