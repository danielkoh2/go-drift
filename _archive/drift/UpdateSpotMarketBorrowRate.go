// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSpotMarketBorrowRate is the `updateSpotMarketBorrowRate` instruction.
type UpdateSpotMarketBorrowRate struct {
	OptimalUtilization *uint32
	OptimalBorrowRate  *uint32
	MaxBorrowRate      *uint32

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] spotMarket
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSpotMarketBorrowRateInstructionBuilder creates a new `UpdateSpotMarketBorrowRate` instruction builder.
func NewUpdateSpotMarketBorrowRateInstructionBuilder() *UpdateSpotMarketBorrowRate {
	nd := &UpdateSpotMarketBorrowRate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetOptimalUtilization sets the "optimalUtilization" parameter.
func (inst *UpdateSpotMarketBorrowRate) SetOptimalUtilization(optimalUtilization uint32) *UpdateSpotMarketBorrowRate {
	inst.OptimalUtilization = &optimalUtilization
	return inst
}

// SetOptimalBorrowRate sets the "optimalBorrowRate" parameter.
func (inst *UpdateSpotMarketBorrowRate) SetOptimalBorrowRate(optimalBorrowRate uint32) *UpdateSpotMarketBorrowRate {
	inst.OptimalBorrowRate = &optimalBorrowRate
	return inst
}

// SetMaxBorrowRate sets the "maxBorrowRate" parameter.
func (inst *UpdateSpotMarketBorrowRate) SetMaxBorrowRate(maxBorrowRate uint32) *UpdateSpotMarketBorrowRate {
	inst.MaxBorrowRate = &maxBorrowRate
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSpotMarketBorrowRate) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSpotMarketBorrowRate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSpotMarketBorrowRate) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSpotMarketBorrowRate) SetStateAccount(state ag_solanago.PublicKey) *UpdateSpotMarketBorrowRate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSpotMarketBorrowRate) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateSpotMarketBorrowRate) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateSpotMarketBorrowRate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateSpotMarketBorrowRate) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateSpotMarketBorrowRate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSpotMarketBorrowRate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSpotMarketBorrowRate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSpotMarketBorrowRate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OptimalUtilization == nil {
			return errors.New("OptimalUtilization parameter is not set")
		}
		if inst.OptimalBorrowRate == nil {
			return errors.New("OptimalBorrowRate parameter is not set")
		}
		if inst.MaxBorrowRate == nil {
			return errors.New("MaxBorrowRate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
	}
	return nil
}

func (inst *UpdateSpotMarketBorrowRate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSpotMarketBorrowRate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OptimalUtilization", *inst.OptimalUtilization))
						paramsBranch.Child(ag_format.Param(" OptimalBorrowRate", *inst.OptimalBorrowRate))
						paramsBranch.Child(ag_format.Param("     MaxBorrowRate", *inst.MaxBorrowRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("spotMarket", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateSpotMarketBorrowRate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OptimalUtilization` param:
	err = encoder.Encode(obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Serialize `OptimalBorrowRate` param:
	err = encoder.Encode(obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Serialize `MaxBorrowRate` param:
	err = encoder.Encode(obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSpotMarketBorrowRate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OptimalUtilization`:
	err = decoder.Decode(&obj.OptimalUtilization)
	if err != nil {
		return err
	}
	// Deserialize `OptimalBorrowRate`:
	err = decoder.Decode(&obj.OptimalBorrowRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxBorrowRate`:
	err = decoder.Decode(&obj.MaxBorrowRate)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSpotMarketBorrowRateInstruction declares a new UpdateSpotMarketBorrowRate instruction with the provided parameters and accounts.
func NewUpdateSpotMarketBorrowRateInstruction(
	// Parameters:
	optimalUtilization uint32,
	optimalBorrowRate uint32,
	maxBorrowRate uint32,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey) *UpdateSpotMarketBorrowRate {
	return NewUpdateSpotMarketBorrowRateInstructionBuilder().
		SetOptimalUtilization(optimalUtilization).
		SetOptimalBorrowRate(optimalBorrowRate).
		SetMaxBorrowRate(maxBorrowRate).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket)
}
