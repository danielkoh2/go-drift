// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateUserName is the `updateUserName` instruction.
type UpdateUserName struct {
	SubAccountId *uint16
	Name         *[32]uint8

	// [0] = [WRITE] user
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateUserNameInstructionBuilder creates a new `UpdateUserName` instruction builder.
func NewUpdateUserNameInstructionBuilder() *UpdateUserName {
	nd := &UpdateUserName{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetSubAccountId sets the "subAccountId" parameter.
func (inst *UpdateUserName) SetSubAccountId(subAccountId uint16) *UpdateUserName {
	inst.SubAccountId = &subAccountId
	return inst
}

// SetName sets the "name" parameter.
func (inst *UpdateUserName) SetName(name [32]uint8) *UpdateUserName {
	inst.Name = &name
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *UpdateUserName) SetUserAccount(user ag_solanago.PublicKey) *UpdateUserName {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *UpdateUserName) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateUserName) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateUserName {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateUserName) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateUserName) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateUserName,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateUserName) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateUserName) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SubAccountId == nil {
			return errors.New("SubAccountId parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *UpdateUserName) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateUserName")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SubAccountId", *inst.SubAccountId))
						paramsBranch.Child(ag_format.Param("        Name", *inst.Name))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateUserName) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SubAccountId` param:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateUserName) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateUserNameInstruction declares a new UpdateUserName instruction with the provided parameters and accounts.
func NewUpdateUserNameInstruction(
	// Parameters:
	subAccountId uint16,
	name [32]uint8,
	// Accounts:
	user ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *UpdateUserName {
	return NewUpdateUserNameInstructionBuilder().
		SetSubAccountId(subAccountId).
		SetName(name).
		SetUserAccount(user).
		SetAuthorityAccount(authority)
}
