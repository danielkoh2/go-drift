// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSpotMarketRevenueSettlePeriod is the `updateSpotMarketRevenueSettlePeriod` instruction.
type UpdateSpotMarketRevenueSettlePeriod struct {
	RevenueSettlePeriod *int64

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] spotMarket
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSpotMarketRevenueSettlePeriodInstructionBuilder creates a new `UpdateSpotMarketRevenueSettlePeriod` instruction builder.
func NewUpdateSpotMarketRevenueSettlePeriodInstructionBuilder() *UpdateSpotMarketRevenueSettlePeriod {
	nd := &UpdateSpotMarketRevenueSettlePeriod{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetRevenueSettlePeriod sets the "revenueSettlePeriod" parameter.
func (inst *UpdateSpotMarketRevenueSettlePeriod) SetRevenueSettlePeriod(revenueSettlePeriod int64) *UpdateSpotMarketRevenueSettlePeriod {
	inst.RevenueSettlePeriod = &revenueSettlePeriod
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSpotMarketRevenueSettlePeriod {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) SetStateAccount(state ag_solanago.PublicKey) *UpdateSpotMarketRevenueSettlePeriod {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateSpotMarketRevenueSettlePeriod {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateSpotMarketRevenueSettlePeriod) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateSpotMarketRevenueSettlePeriod) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSpotMarketRevenueSettlePeriod,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSpotMarketRevenueSettlePeriod) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSpotMarketRevenueSettlePeriod) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RevenueSettlePeriod == nil {
			return errors.New("RevenueSettlePeriod parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
	}
	return nil
}

func (inst *UpdateSpotMarketRevenueSettlePeriod) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSpotMarketRevenueSettlePeriod")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RevenueSettlePeriod", *inst.RevenueSettlePeriod))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("spotMarket", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateSpotMarketRevenueSettlePeriod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RevenueSettlePeriod` param:
	err = encoder.Encode(obj.RevenueSettlePeriod)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSpotMarketRevenueSettlePeriod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RevenueSettlePeriod`:
	err = decoder.Decode(&obj.RevenueSettlePeriod)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSpotMarketRevenueSettlePeriodInstruction declares a new UpdateSpotMarketRevenueSettlePeriod instruction with the provided parameters and accounts.
func NewUpdateSpotMarketRevenueSettlePeriodInstruction(
	// Parameters:
	revenueSettlePeriod int64,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey) *UpdateSpotMarketRevenueSettlePeriod {
	return NewUpdateSpotMarketRevenueSettlePeriodInstructionBuilder().
		SetRevenueSettlePeriod(revenueSettlePeriod).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket)
}
