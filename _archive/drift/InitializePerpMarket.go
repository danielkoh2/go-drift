// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePerpMarket is the `initializePerpMarket` instruction.
type InitializePerpMarket struct {
	MarketIndex                 *uint16
	AmmBaseAssetReserve         *ag_binary.Uint128
	AmmQuoteAssetReserve        *ag_binary.Uint128
	AmmPeriodicity              *int64
	AmmPegMultiplier            *ag_binary.Uint128
	OracleSource                *OracleSource
	ContractTier                *ContractTier
	MarginRatioInitial          *uint32
	MarginRatioMaintenance      *uint32
	LiquidatorFee               *uint32
	IfLiquidationFee            *uint32
	ImfFactor                   *uint32
	ActiveStatus                *bool
	BaseSpread                  *uint32
	MaxSpread                   *uint32
	MaxOpenInterest             *ag_binary.Uint128
	MaxRevenueWithdrawPerPeriod *uint64
	QuoteMaxInsurance           *uint64
	OrderStepSize               *uint64
	OrderTickSize               *uint64
	MinOrderSize                *uint64
	ConcentrationCoefScale      *ag_binary.Uint128
	CurveUpdateIntensity        *uint8
	AmmJitIntensity             *uint8
	Name                        *[32]uint8

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] state
	//
	// [2] = [WRITE] perpMarket
	//
	// [3] = [] oracle
	//
	// [4] = [] rent
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePerpMarketInstructionBuilder creates a new `InitializePerpMarket` instruction builder.
func NewInitializePerpMarketInstructionBuilder() *InitializePerpMarket {
	nd := &InitializePerpMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMarketIndex sets the "marketIndex" parameter.
func (inst *InitializePerpMarket) SetMarketIndex(marketIndex uint16) *InitializePerpMarket {
	inst.MarketIndex = &marketIndex
	return inst
}

// SetAmmBaseAssetReserve sets the "ammBaseAssetReserve" parameter.
func (inst *InitializePerpMarket) SetAmmBaseAssetReserve(ammBaseAssetReserve ag_binary.Uint128) *InitializePerpMarket {
	inst.AmmBaseAssetReserve = &ammBaseAssetReserve
	return inst
}

// SetAmmQuoteAssetReserve sets the "ammQuoteAssetReserve" parameter.
func (inst *InitializePerpMarket) SetAmmQuoteAssetReserve(ammQuoteAssetReserve ag_binary.Uint128) *InitializePerpMarket {
	inst.AmmQuoteAssetReserve = &ammQuoteAssetReserve
	return inst
}

// SetAmmPeriodicity sets the "ammPeriodicity" parameter.
func (inst *InitializePerpMarket) SetAmmPeriodicity(ammPeriodicity int64) *InitializePerpMarket {
	inst.AmmPeriodicity = &ammPeriodicity
	return inst
}

// SetAmmPegMultiplier sets the "ammPegMultiplier" parameter.
func (inst *InitializePerpMarket) SetAmmPegMultiplier(ammPegMultiplier ag_binary.Uint128) *InitializePerpMarket {
	inst.AmmPegMultiplier = &ammPegMultiplier
	return inst
}

// SetOracleSource sets the "oracleSource" parameter.
func (inst *InitializePerpMarket) SetOracleSource(oracleSource OracleSource) *InitializePerpMarket {
	inst.OracleSource = &oracleSource
	return inst
}

// SetContractTier sets the "contractTier" parameter.
func (inst *InitializePerpMarket) SetContractTier(contractTier ContractTier) *InitializePerpMarket {
	inst.ContractTier = &contractTier
	return inst
}

// SetMarginRatioInitial sets the "marginRatioInitial" parameter.
func (inst *InitializePerpMarket) SetMarginRatioInitial(marginRatioInitial uint32) *InitializePerpMarket {
	inst.MarginRatioInitial = &marginRatioInitial
	return inst
}

// SetMarginRatioMaintenance sets the "marginRatioMaintenance" parameter.
func (inst *InitializePerpMarket) SetMarginRatioMaintenance(marginRatioMaintenance uint32) *InitializePerpMarket {
	inst.MarginRatioMaintenance = &marginRatioMaintenance
	return inst
}

// SetLiquidatorFee sets the "liquidatorFee" parameter.
func (inst *InitializePerpMarket) SetLiquidatorFee(liquidatorFee uint32) *InitializePerpMarket {
	inst.LiquidatorFee = &liquidatorFee
	return inst
}

// SetIfLiquidationFee sets the "ifLiquidationFee" parameter.
func (inst *InitializePerpMarket) SetIfLiquidationFee(ifLiquidationFee uint32) *InitializePerpMarket {
	inst.IfLiquidationFee = &ifLiquidationFee
	return inst
}

// SetImfFactor sets the "imfFactor" parameter.
func (inst *InitializePerpMarket) SetImfFactor(imfFactor uint32) *InitializePerpMarket {
	inst.ImfFactor = &imfFactor
	return inst
}

// SetActiveStatus sets the "activeStatus" parameter.
func (inst *InitializePerpMarket) SetActiveStatus(activeStatus bool) *InitializePerpMarket {
	inst.ActiveStatus = &activeStatus
	return inst
}

// SetBaseSpread sets the "baseSpread" parameter.
func (inst *InitializePerpMarket) SetBaseSpread(baseSpread uint32) *InitializePerpMarket {
	inst.BaseSpread = &baseSpread
	return inst
}

// SetMaxSpread sets the "maxSpread" parameter.
func (inst *InitializePerpMarket) SetMaxSpread(maxSpread uint32) *InitializePerpMarket {
	inst.MaxSpread = &maxSpread
	return inst
}

// SetMaxOpenInterest sets the "maxOpenInterest" parameter.
func (inst *InitializePerpMarket) SetMaxOpenInterest(maxOpenInterest ag_binary.Uint128) *InitializePerpMarket {
	inst.MaxOpenInterest = &maxOpenInterest
	return inst
}

// SetMaxRevenueWithdrawPerPeriod sets the "maxRevenueWithdrawPerPeriod" parameter.
func (inst *InitializePerpMarket) SetMaxRevenueWithdrawPerPeriod(maxRevenueWithdrawPerPeriod uint64) *InitializePerpMarket {
	inst.MaxRevenueWithdrawPerPeriod = &maxRevenueWithdrawPerPeriod
	return inst
}

// SetQuoteMaxInsurance sets the "quoteMaxInsurance" parameter.
func (inst *InitializePerpMarket) SetQuoteMaxInsurance(quoteMaxInsurance uint64) *InitializePerpMarket {
	inst.QuoteMaxInsurance = &quoteMaxInsurance
	return inst
}

// SetOrderStepSize sets the "orderStepSize" parameter.
func (inst *InitializePerpMarket) SetOrderStepSize(orderStepSize uint64) *InitializePerpMarket {
	inst.OrderStepSize = &orderStepSize
	return inst
}

// SetOrderTickSize sets the "orderTickSize" parameter.
func (inst *InitializePerpMarket) SetOrderTickSize(orderTickSize uint64) *InitializePerpMarket {
	inst.OrderTickSize = &orderTickSize
	return inst
}

// SetMinOrderSize sets the "minOrderSize" parameter.
func (inst *InitializePerpMarket) SetMinOrderSize(minOrderSize uint64) *InitializePerpMarket {
	inst.MinOrderSize = &minOrderSize
	return inst
}

// SetConcentrationCoefScale sets the "concentrationCoefScale" parameter.
func (inst *InitializePerpMarket) SetConcentrationCoefScale(concentrationCoefScale ag_binary.Uint128) *InitializePerpMarket {
	inst.ConcentrationCoefScale = &concentrationCoefScale
	return inst
}

// SetCurveUpdateIntensity sets the "curveUpdateIntensity" parameter.
func (inst *InitializePerpMarket) SetCurveUpdateIntensity(curveUpdateIntensity uint8) *InitializePerpMarket {
	inst.CurveUpdateIntensity = &curveUpdateIntensity
	return inst
}

// SetAmmJitIntensity sets the "ammJitIntensity" parameter.
func (inst *InitializePerpMarket) SetAmmJitIntensity(ammJitIntensity uint8) *InitializePerpMarket {
	inst.AmmJitIntensity = &ammJitIntensity
	return inst
}

// SetName sets the "name" parameter.
func (inst *InitializePerpMarket) SetName(name [32]uint8) *InitializePerpMarket {
	inst.Name = &name
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializePerpMarket) SetAdminAccount(admin ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializePerpMarket) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *InitializePerpMarket) SetStateAccount(state ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializePerpMarket) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPerpMarketAccount sets the "perpMarket" account.
func (inst *InitializePerpMarket) SetPerpMarketAccount(perpMarket ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(perpMarket).WRITE()
	return inst
}

// GetPerpMarketAccount gets the "perpMarket" account.
func (inst *InitializePerpMarket) GetPerpMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializePerpMarket) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializePerpMarket) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePerpMarket) SetRentAccount(rent ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePerpMarket) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializePerpMarket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePerpMarket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializePerpMarket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst InitializePerpMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePerpMarket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePerpMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePerpMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketIndex == nil {
			return errors.New("MarketIndex parameter is not set")
		}
		if inst.AmmBaseAssetReserve == nil {
			return errors.New("AmmBaseAssetReserve parameter is not set")
		}
		if inst.AmmQuoteAssetReserve == nil {
			return errors.New("AmmQuoteAssetReserve parameter is not set")
		}
		if inst.AmmPeriodicity == nil {
			return errors.New("AmmPeriodicity parameter is not set")
		}
		if inst.AmmPegMultiplier == nil {
			return errors.New("AmmPegMultiplier parameter is not set")
		}
		if inst.OracleSource == nil {
			return errors.New("OracleSource parameter is not set")
		}
		if inst.ContractTier == nil {
			return errors.New("ContractTier parameter is not set")
		}
		if inst.MarginRatioInitial == nil {
			return errors.New("MarginRatioInitial parameter is not set")
		}
		if inst.MarginRatioMaintenance == nil {
			return errors.New("MarginRatioMaintenance parameter is not set")
		}
		if inst.LiquidatorFee == nil {
			return errors.New("LiquidatorFee parameter is not set")
		}
		if inst.IfLiquidationFee == nil {
			return errors.New("IfLiquidationFee parameter is not set")
		}
		if inst.ImfFactor == nil {
			return errors.New("ImfFactor parameter is not set")
		}
		if inst.ActiveStatus == nil {
			return errors.New("ActiveStatus parameter is not set")
		}
		if inst.BaseSpread == nil {
			return errors.New("BaseSpread parameter is not set")
		}
		if inst.MaxSpread == nil {
			return errors.New("MaxSpread parameter is not set")
		}
		if inst.MaxOpenInterest == nil {
			return errors.New("MaxOpenInterest parameter is not set")
		}
		if inst.MaxRevenueWithdrawPerPeriod == nil {
			return errors.New("MaxRevenueWithdrawPerPeriod parameter is not set")
		}
		if inst.QuoteMaxInsurance == nil {
			return errors.New("QuoteMaxInsurance parameter is not set")
		}
		if inst.OrderStepSize == nil {
			return errors.New("OrderStepSize parameter is not set")
		}
		if inst.OrderTickSize == nil {
			return errors.New("OrderTickSize parameter is not set")
		}
		if inst.MinOrderSize == nil {
			return errors.New("MinOrderSize parameter is not set")
		}
		if inst.ConcentrationCoefScale == nil {
			return errors.New("ConcentrationCoefScale parameter is not set")
		}
		if inst.CurveUpdateIntensity == nil {
			return errors.New("CurveUpdateIntensity parameter is not set")
		}
		if inst.AmmJitIntensity == nil {
			return errors.New("AmmJitIntensity parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PerpMarket is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializePerpMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePerpMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=25]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                MarketIndex", *inst.MarketIndex))
						paramsBranch.Child(ag_format.Param("        AmmBaseAssetReserve", *inst.AmmBaseAssetReserve))
						paramsBranch.Child(ag_format.Param("       AmmQuoteAssetReserve", *inst.AmmQuoteAssetReserve))
						paramsBranch.Child(ag_format.Param("             AmmPeriodicity", *inst.AmmPeriodicity))
						paramsBranch.Child(ag_format.Param("           AmmPegMultiplier", *inst.AmmPegMultiplier))
						paramsBranch.Child(ag_format.Param("               OracleSource", *inst.OracleSource))
						paramsBranch.Child(ag_format.Param("               ContractTier", *inst.ContractTier))
						paramsBranch.Child(ag_format.Param("         MarginRatioInitial", *inst.MarginRatioInitial))
						paramsBranch.Child(ag_format.Param("     MarginRatioMaintenance", *inst.MarginRatioMaintenance))
						paramsBranch.Child(ag_format.Param("              LiquidatorFee", *inst.LiquidatorFee))
						paramsBranch.Child(ag_format.Param("           IfLiquidationFee", *inst.IfLiquidationFee))
						paramsBranch.Child(ag_format.Param("                  ImfFactor", *inst.ImfFactor))
						paramsBranch.Child(ag_format.Param("               ActiveStatus", *inst.ActiveStatus))
						paramsBranch.Child(ag_format.Param("                 BaseSpread", *inst.BaseSpread))
						paramsBranch.Child(ag_format.Param("                  MaxSpread", *inst.MaxSpread))
						paramsBranch.Child(ag_format.Param("            MaxOpenInterest", *inst.MaxOpenInterest))
						paramsBranch.Child(ag_format.Param("MaxRevenueWithdrawPerPeriod", *inst.MaxRevenueWithdrawPerPeriod))
						paramsBranch.Child(ag_format.Param("          QuoteMaxInsurance", *inst.QuoteMaxInsurance))
						paramsBranch.Child(ag_format.Param("              OrderStepSize", *inst.OrderStepSize))
						paramsBranch.Child(ag_format.Param("              OrderTickSize", *inst.OrderTickSize))
						paramsBranch.Child(ag_format.Param("               MinOrderSize", *inst.MinOrderSize))
						paramsBranch.Child(ag_format.Param("     ConcentrationCoefScale", *inst.ConcentrationCoefScale))
						paramsBranch.Child(ag_format.Param("       CurveUpdateIntensity", *inst.CurveUpdateIntensity))
						paramsBranch.Child(ag_format.Param("            AmmJitIntensity", *inst.AmmJitIntensity))
						paramsBranch.Child(ag_format.Param("                       Name", *inst.Name))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   perpMarket", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj InitializePerpMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `AmmBaseAssetReserve` param:
	err = encoder.Encode(obj.AmmBaseAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `AmmQuoteAssetReserve` param:
	err = encoder.Encode(obj.AmmQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Serialize `AmmPeriodicity` param:
	err = encoder.Encode(obj.AmmPeriodicity)
	if err != nil {
		return err
	}
	// Serialize `AmmPegMultiplier` param:
	err = encoder.Encode(obj.AmmPegMultiplier)
	if err != nil {
		return err
	}
	// Serialize `OracleSource` param:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return err
	}
	// Serialize `ContractTier` param:
	err = encoder.Encode(obj.ContractTier)
	if err != nil {
		return err
	}
	// Serialize `MarginRatioInitial` param:
	err = encoder.Encode(obj.MarginRatioInitial)
	if err != nil {
		return err
	}
	// Serialize `MarginRatioMaintenance` param:
	err = encoder.Encode(obj.MarginRatioMaintenance)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorFee` param:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Serialize `IfLiquidationFee` param:
	err = encoder.Encode(obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Serialize `ImfFactor` param:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return err
	}
	// Serialize `ActiveStatus` param:
	err = encoder.Encode(obj.ActiveStatus)
	if err != nil {
		return err
	}
	// Serialize `BaseSpread` param:
	err = encoder.Encode(obj.BaseSpread)
	if err != nil {
		return err
	}
	// Serialize `MaxSpread` param:
	err = encoder.Encode(obj.MaxSpread)
	if err != nil {
		return err
	}
	// Serialize `MaxOpenInterest` param:
	err = encoder.Encode(obj.MaxOpenInterest)
	if err != nil {
		return err
	}
	// Serialize `MaxRevenueWithdrawPerPeriod` param:
	err = encoder.Encode(obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `QuoteMaxInsurance` param:
	err = encoder.Encode(obj.QuoteMaxInsurance)
	if err != nil {
		return err
	}
	// Serialize `OrderStepSize` param:
	err = encoder.Encode(obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Serialize `OrderTickSize` param:
	err = encoder.Encode(obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Serialize `MinOrderSize` param:
	err = encoder.Encode(obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Serialize `ConcentrationCoefScale` param:
	err = encoder.Encode(obj.ConcentrationCoefScale)
	if err != nil {
		return err
	}
	// Serialize `CurveUpdateIntensity` param:
	err = encoder.Encode(obj.CurveUpdateIntensity)
	if err != nil {
		return err
	}
	// Serialize `AmmJitIntensity` param:
	err = encoder.Encode(obj.AmmJitIntensity)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePerpMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `AmmBaseAssetReserve`:
	err = decoder.Decode(&obj.AmmBaseAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `AmmQuoteAssetReserve`:
	err = decoder.Decode(&obj.AmmQuoteAssetReserve)
	if err != nil {
		return err
	}
	// Deserialize `AmmPeriodicity`:
	err = decoder.Decode(&obj.AmmPeriodicity)
	if err != nil {
		return err
	}
	// Deserialize `AmmPegMultiplier`:
	err = decoder.Decode(&obj.AmmPegMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return err
	}
	// Deserialize `ContractTier`:
	err = decoder.Decode(&obj.ContractTier)
	if err != nil {
		return err
	}
	// Deserialize `MarginRatioInitial`:
	err = decoder.Decode(&obj.MarginRatioInitial)
	if err != nil {
		return err
	}
	// Deserialize `MarginRatioMaintenance`:
	err = decoder.Decode(&obj.MarginRatioMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return err
	}
	// Deserialize `IfLiquidationFee`:
	err = decoder.Decode(&obj.IfLiquidationFee)
	if err != nil {
		return err
	}
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return err
	}
	// Deserialize `ActiveStatus`:
	err = decoder.Decode(&obj.ActiveStatus)
	if err != nil {
		return err
	}
	// Deserialize `BaseSpread`:
	err = decoder.Decode(&obj.BaseSpread)
	if err != nil {
		return err
	}
	// Deserialize `MaxSpread`:
	err = decoder.Decode(&obj.MaxSpread)
	if err != nil {
		return err
	}
	// Deserialize `MaxOpenInterest`:
	err = decoder.Decode(&obj.MaxOpenInterest)
	if err != nil {
		return err
	}
	// Deserialize `MaxRevenueWithdrawPerPeriod`:
	err = decoder.Decode(&obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMaxInsurance`:
	err = decoder.Decode(&obj.QuoteMaxInsurance)
	if err != nil {
		return err
	}
	// Deserialize `OrderStepSize`:
	err = decoder.Decode(&obj.OrderStepSize)
	if err != nil {
		return err
	}
	// Deserialize `OrderTickSize`:
	err = decoder.Decode(&obj.OrderTickSize)
	if err != nil {
		return err
	}
	// Deserialize `MinOrderSize`:
	err = decoder.Decode(&obj.MinOrderSize)
	if err != nil {
		return err
	}
	// Deserialize `ConcentrationCoefScale`:
	err = decoder.Decode(&obj.ConcentrationCoefScale)
	if err != nil {
		return err
	}
	// Deserialize `CurveUpdateIntensity`:
	err = decoder.Decode(&obj.CurveUpdateIntensity)
	if err != nil {
		return err
	}
	// Deserialize `AmmJitIntensity`:
	err = decoder.Decode(&obj.AmmJitIntensity)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePerpMarketInstruction declares a new InitializePerpMarket instruction with the provided parameters and accounts.
func NewInitializePerpMarketInstruction(
	// Parameters:
	marketIndex uint16,
	ammBaseAssetReserve ag_binary.Uint128,
	ammQuoteAssetReserve ag_binary.Uint128,
	ammPeriodicity int64,
	ammPegMultiplier ag_binary.Uint128,
	oracleSource OracleSource,
	contractTier ContractTier,
	marginRatioInitial uint32,
	marginRatioMaintenance uint32,
	liquidatorFee uint32,
	ifLiquidationFee uint32,
	imfFactor uint32,
	activeStatus bool,
	baseSpread uint32,
	maxSpread uint32,
	maxOpenInterest ag_binary.Uint128,
	maxRevenueWithdrawPerPeriod uint64,
	quoteMaxInsurance uint64,
	orderStepSize uint64,
	orderTickSize uint64,
	minOrderSize uint64,
	concentrationCoefScale ag_binary.Uint128,
	curveUpdateIntensity uint8,
	ammJitIntensity uint8,
	name [32]uint8,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	perpMarket ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializePerpMarket {
	return NewInitializePerpMarketInstructionBuilder().
		SetMarketIndex(marketIndex).
		SetAmmBaseAssetReserve(ammBaseAssetReserve).
		SetAmmQuoteAssetReserve(ammQuoteAssetReserve).
		SetAmmPeriodicity(ammPeriodicity).
		SetAmmPegMultiplier(ammPegMultiplier).
		SetOracleSource(oracleSource).
		SetContractTier(contractTier).
		SetMarginRatioInitial(marginRatioInitial).
		SetMarginRatioMaintenance(marginRatioMaintenance).
		SetLiquidatorFee(liquidatorFee).
		SetIfLiquidationFee(ifLiquidationFee).
		SetImfFactor(imfFactor).
		SetActiveStatus(activeStatus).
		SetBaseSpread(baseSpread).
		SetMaxSpread(maxSpread).
		SetMaxOpenInterest(maxOpenInterest).
		SetMaxRevenueWithdrawPerPeriod(maxRevenueWithdrawPerPeriod).
		SetQuoteMaxInsurance(quoteMaxInsurance).
		SetOrderStepSize(orderStepSize).
		SetOrderTickSize(orderTickSize).
		SetMinOrderSize(minOrderSize).
		SetConcentrationCoefScale(concentrationCoefScale).
		SetCurveUpdateIntensity(curveUpdateIntensity).
		SetAmmJitIntensity(ammJitIntensity).
		SetName(name).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetPerpMarketAccount(perpMarket).
		SetOracleAccount(oracle).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
