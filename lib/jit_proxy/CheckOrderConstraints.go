// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jit_proxy

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CheckOrderConstraints is the `checkOrderConstraints` instruction.
type CheckOrderConstraints struct {
	Constraints *[]OrderConstraint

	// [0] = [] user
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCheckOrderConstraintsInstructionBuilder creates a new `CheckOrderConstraints` instruction builder.
func NewCheckOrderConstraintsInstructionBuilder() *CheckOrderConstraints {
	nd := &CheckOrderConstraints{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetConstraints sets the "constraints" parameter.
func (inst *CheckOrderConstraints) SetConstraints(constraints []OrderConstraint) *CheckOrderConstraints {
	inst.Constraints = &constraints
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *CheckOrderConstraints) SetUserAccount(user ag_solanago.PublicKey) *CheckOrderConstraints {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user)
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CheckOrderConstraints) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst CheckOrderConstraints) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CheckOrderConstraints,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CheckOrderConstraints) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CheckOrderConstraints) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Constraints == nil {
			return errors.New("Constraints parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
	}
	return nil
}

func (inst *CheckOrderConstraints) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CheckOrderConstraints")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Constraints", *inst.Constraints))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("user", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj CheckOrderConstraints) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Constraints` param:
	err = encoder.Encode(obj.Constraints)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CheckOrderConstraints) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Constraints`:
	err = decoder.Decode(&obj.Constraints)
	if err != nil {
		return err
	}
	return nil
}

// NewCheckOrderConstraintsInstruction declares a new CheckOrderConstraints instruction with the provided parameters and accounts.
func NewCheckOrderConstraintsInstruction(
	// Parameters:
	constraints []OrderConstraint,
	// Accounts:
	user ag_solanago.PublicKey) *CheckOrderConstraints {
	return NewCheckOrderConstraintsInstructionBuilder().
		SetConstraints(constraints).
		SetUserAccount(user)
}
