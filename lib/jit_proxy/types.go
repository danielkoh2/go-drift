// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jit_proxy

import ag_binary "github.com/gagliardetto/binary"

type OrderConstraint struct {
	MaxPosition int64
	MinPosition int64
	MarketIndex uint16
	MarketType  MarketType
}

func (obj OrderConstraint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxPosition` param:
	err = encoder.Encode(obj.MaxPosition)
	if err != nil {
		return err
	}
	// Serialize `MinPosition` param:
	err = encoder.Encode(obj.MinPosition)
	if err != nil {
		return err
	}
	// Serialize `MarketIndex` param:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return err
	}
	// Serialize `MarketType` param:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderConstraint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxPosition`:
	err = decoder.Decode(&obj.MaxPosition)
	if err != nil {
		return err
	}
	// Deserialize `MinPosition`:
	err = decoder.Decode(&obj.MinPosition)
	if err != nil {
		return err
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return err
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return err
	}
	return nil
}

type JitParams struct {
	TakerOrderId uint32
	MaxPosition  int64
	MinPosition  int64
	Bid          int64
	Ask          int64
	PriceType    PriceType
	PostOnly     *PostOnlyParam `bin:"optional"`
}

func (obj JitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TakerOrderId` param:
	err = encoder.Encode(obj.TakerOrderId)
	if err != nil {
		return err
	}
	// Serialize `MaxPosition` param:
	err = encoder.Encode(obj.MaxPosition)
	if err != nil {
		return err
	}
	// Serialize `MinPosition` param:
	err = encoder.Encode(obj.MinPosition)
	if err != nil {
		return err
	}
	// Serialize `Bid` param:
	err = encoder.Encode(obj.Bid)
	if err != nil {
		return err
	}
	// Serialize `Ask` param:
	err = encoder.Encode(obj.Ask)
	if err != nil {
		return err
	}
	// Serialize `PriceType` param:
	err = encoder.Encode(obj.PriceType)
	if err != nil {
		return err
	}
	// Serialize `PostOnly` param (optional):
	{
		if obj.PostOnly == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PostOnly)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *JitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TakerOrderId`:
	err = decoder.Decode(&obj.TakerOrderId)
	if err != nil {
		return err
	}
	// Deserialize `MaxPosition`:
	err = decoder.Decode(&obj.MaxPosition)
	if err != nil {
		return err
	}
	// Deserialize `MinPosition`:
	err = decoder.Decode(&obj.MinPosition)
	if err != nil {
		return err
	}
	// Deserialize `Bid`:
	err = decoder.Decode(&obj.Bid)
	if err != nil {
		return err
	}
	// Deserialize `Ask`:
	err = decoder.Decode(&obj.Ask)
	if err != nil {
		return err
	}
	// Deserialize `PriceType`:
	err = decoder.Decode(&obj.PriceType)
	if err != nil {
		return err
	}
	// Deserialize `PostOnly` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PostOnly)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PostOnlyParam ag_binary.BorshEnum

const (
	PostOnlyParamNone PostOnlyParam = iota
	PostOnlyParamMustPostOnly
	PostOnlyParamTryPostOnly
	PostOnlyParamSlide
)

func (value PostOnlyParam) String() string {
	switch value {
	case PostOnlyParamNone:
		return "None"
	case PostOnlyParamMustPostOnly:
		return "MustPostOnly"
	case PostOnlyParamTryPostOnly:
		return "TryPostOnly"
	case PostOnlyParamSlide:
		return "Slide"
	default:
		return ""
	}
}

type PriceType ag_binary.BorshEnum

const (
	PriceTypeLimit PriceType = iota
	PriceTypeOracle
)

func (value PriceType) String() string {
	switch value {
	case PriceTypeLimit:
		return "Limit"
	case PriceTypeOracle:
		return "Oracle"
	default:
		return ""
	}
}

type MarketType ag_binary.BorshEnum

const (
	MarketTypePerp MarketType = iota
	MarketTypeSpot
)

func (value MarketType) String() string {
	switch value {
	case MarketTypePerp:
		return "Perp"
	case MarketTypeSpot:
		return "Spot"
	default:
		return ""
	}
}
