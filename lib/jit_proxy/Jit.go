// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jit_proxy

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Jit is the `jit` instruction.
type Jit struct {
	Params *JitParams

	// [0] = [] state
	//
	// [1] = [WRITE] user
	//
	// [2] = [WRITE] userStats
	//
	// [3] = [WRITE] taker
	//
	// [4] = [WRITE] takerStats
	//
	// [5] = [SIGNER] authority
	//
	// [6] = [] driftProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewJitInstructionBuilder creates a new `Jit` instruction builder.
func NewJitInstructionBuilder() *Jit {
	nd := &Jit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Jit) SetParams(params JitParams) *Jit {
	inst.Params = &params
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *Jit) SetStateAccount(state ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Jit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *Jit) SetUserAccount(user ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Jit) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *Jit) SetUserStatsAccount(userStats ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *Jit) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTakerAccount sets the "taker" account.
func (inst *Jit) SetTakerAccount(taker ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(taker).WRITE()
	return inst
}

// GetTakerAccount gets the "taker" account.
func (inst *Jit) GetTakerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTakerStatsAccount sets the "takerStats" account.
func (inst *Jit) SetTakerStatsAccount(takerStats ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(takerStats).WRITE()
	return inst
}

// GetTakerStatsAccount gets the "takerStats" account.
func (inst *Jit) GetTakerStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Jit) SetAuthorityAccount(authority ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Jit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDriftProgramAccount sets the "driftProgram" account.
func (inst *Jit) SetDriftProgramAccount(driftProgram ag_solanago.PublicKey) *Jit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(driftProgram)
	return inst
}

// GetDriftProgramAccount gets the "driftProgram" account.
func (inst *Jit) GetDriftProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst Jit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Jit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Jit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Jit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserStats is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Taker is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TakerStats is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DriftProgram is not set")
		}
	}
	return nil
}

func (inst *Jit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Jit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   userStats", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       taker", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  takerStats", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("driftProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Jit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Jit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewJitInstruction declares a new Jit instruction with the provided parameters and accounts.
func NewJitInstruction(
	// Parameters:
	params JitParams,
	// Accounts:
	state ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey,
	taker ag_solanago.PublicKey,
	takerStats ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	driftProgram ag_solanago.PublicKey) *Jit {
	return NewJitInstructionBuilder().
		SetParams(params).
		SetStateAccount(state).
		SetUserAccount(user).
		SetUserStatsAccount(userStats).
		SetTakerAccount(taker).
		SetTakerStatsAccount(takerStats).
		SetAuthorityAccount(authority).
		SetDriftProgramAccount(driftProgram)
}
