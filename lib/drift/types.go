// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package drift

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type UpdatePerpMarketSummaryStatsParams struct {
	QuoteAssetAmountWithUnsettledLp *int64 `bin:"optional" json:"quoteAssetAmountWithUnsettledLp,omitempty"`
	NetUnsettledFundingPnl          *int64 `bin:"optional" json:"netUnsettledFundingPnl,omitempty"`
	UpdateAmmSummaryStats           *bool  `bin:"optional" json:"updateAmmSummaryStats,omitempty"`
	ExcludeTotalLiqFee              *bool  `bin:"optional" json:"excludeTotalLiqFee,omitempty"`
}

func (obj UpdatePerpMarketSummaryStatsParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `QuoteAssetAmountWithUnsettledLp` (optional):
	{
		if obj.QuoteAssetAmountWithUnsettledLp == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountWithUnsettledLp", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountWithUnsettledLp", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.QuoteAssetAmountWithUnsettledLp)
			if err != nil {
				return errors.NewField("QuoteAssetAmountWithUnsettledLp", err)
			}
		}
	}
	// Serialize `NetUnsettledFundingPnl` (optional):
	{
		if obj.NetUnsettledFundingPnl == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("NetUnsettledFundingPnl", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("NetUnsettledFundingPnl", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.NetUnsettledFundingPnl)
			if err != nil {
				return errors.NewField("NetUnsettledFundingPnl", err)
			}
		}
	}
	// Serialize `UpdateAmmSummaryStats` (optional):
	{
		if obj.UpdateAmmSummaryStats == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("UpdateAmmSummaryStats", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("UpdateAmmSummaryStats", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.UpdateAmmSummaryStats)
			if err != nil {
				return errors.NewField("UpdateAmmSummaryStats", err)
			}
		}
	}
	// Serialize `ExcludeTotalLiqFee` (optional):
	{
		if obj.ExcludeTotalLiqFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ExcludeTotalLiqFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ExcludeTotalLiqFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ExcludeTotalLiqFee)
			if err != nil {
				return errors.NewField("ExcludeTotalLiqFee", err)
			}
		}
	}
	return nil
}

func (obj UpdatePerpMarketSummaryStatsParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdatePerpMarketSummaryStatsParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdatePerpMarketSummaryStatsParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `QuoteAssetAmountWithUnsettledLp` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("QuoteAssetAmountWithUnsettledLp", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.QuoteAssetAmountWithUnsettledLp)
			if err != nil {
				return errors.NewField("QuoteAssetAmountWithUnsettledLp", err)
			}
		}
	}
	// Deserialize `NetUnsettledFundingPnl` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("NetUnsettledFundingPnl", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.NetUnsettledFundingPnl)
			if err != nil {
				return errors.NewField("NetUnsettledFundingPnl", err)
			}
		}
	}
	// Deserialize `UpdateAmmSummaryStats` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("UpdateAmmSummaryStats", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAmmSummaryStats)
			if err != nil {
				return errors.NewField("UpdateAmmSummaryStats", err)
			}
		}
	}
	// Deserialize `ExcludeTotalLiqFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ExcludeTotalLiqFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ExcludeTotalLiqFee)
			if err != nil {
				return errors.NewField("ExcludeTotalLiqFee", err)
			}
		}
	}
	return nil
}

func (obj *UpdatePerpMarketSummaryStatsParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdatePerpMarketSummaryStatsParams: %w", err)
	}
	return nil
}

func UnmarshalUpdatePerpMarketSummaryStatsParams(buf []byte) (*UpdatePerpMarketSummaryStatsParams, error) {
	obj := new(UpdatePerpMarketSummaryStatsParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidatePerpRecord struct {
	MarketIndex      uint16 `json:"marketIndex"`
	OraclePrice      int64  `json:"oraclePrice"`
	BaseAssetAmount  int64  `json:"baseAssetAmount"`
	QuoteAssetAmount int64  `json:"quoteAssetAmount"`

	// precision: AMM_RESERVE_PRECISION
	LpShares          uint64 `json:"lpShares"`
	FillRecordId      uint64 `json:"fillRecordId"`
	UserOrderId       uint32 `json:"userOrderId"`
	LiquidatorOrderId uint32 `json:"liquidatorOrderId"`

	// precision: QUOTE_PRECISION
	LiquidatorFee uint64 `json:"liquidatorFee"`

	// precision: QUOTE_PRECISION
	IfFee uint64 `json:"ifFee"`
}

func (obj LiquidatePerpRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `OraclePrice`:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `QuoteAssetAmount`:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Serialize `LpShares`:
	err = encoder.Encode(obj.LpShares)
	if err != nil {
		return errors.NewField("LpShares", err)
	}
	// Serialize `FillRecordId`:
	err = encoder.Encode(obj.FillRecordId)
	if err != nil {
		return errors.NewField("FillRecordId", err)
	}
	// Serialize `UserOrderId`:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Serialize `LiquidatorOrderId`:
	err = encoder.Encode(obj.LiquidatorOrderId)
	if err != nil {
		return errors.NewField("LiquidatorOrderId", err)
	}
	// Serialize `LiquidatorFee`:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Serialize `IfFee`:
	err = encoder.Encode(obj.IfFee)
	if err != nil {
		return errors.NewField("IfFee", err)
	}
	return nil
}

func (obj LiquidatePerpRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidatePerpRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidatePerpRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Deserialize `LpShares`:
	err = decoder.Decode(&obj.LpShares)
	if err != nil {
		return errors.NewField("LpShares", err)
	}
	// Deserialize `FillRecordId`:
	err = decoder.Decode(&obj.FillRecordId)
	if err != nil {
		return errors.NewField("FillRecordId", err)
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Deserialize `LiquidatorOrderId`:
	err = decoder.Decode(&obj.LiquidatorOrderId)
	if err != nil {
		return errors.NewField("LiquidatorOrderId", err)
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Deserialize `IfFee`:
	err = decoder.Decode(&obj.IfFee)
	if err != nil {
		return errors.NewField("IfFee", err)
	}
	return nil
}

func (obj *LiquidatePerpRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidatePerpRecord: %w", err)
	}
	return nil
}

func UnmarshalLiquidatePerpRecord(buf []byte) (*LiquidatePerpRecord, error) {
	obj := new(LiquidatePerpRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidateSpotRecord struct {
	AssetMarketIndex     uint16         `json:"assetMarketIndex"`
	AssetPrice           int64          `json:"assetPrice"`
	AssetTransfer        binary.Uint128 `json:"assetTransfer"`
	LiabilityMarketIndex uint16         `json:"liabilityMarketIndex"`
	LiabilityPrice       int64          `json:"liabilityPrice"`

	// precision: token mint precision
	LiabilityTransfer binary.Uint128 `json:"liabilityTransfer"`

	// precision: token mint precision
	IfFee uint64 `json:"ifFee"`
}

func (obj LiquidateSpotRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AssetMarketIndex`:
	err = encoder.Encode(obj.AssetMarketIndex)
	if err != nil {
		return errors.NewField("AssetMarketIndex", err)
	}
	// Serialize `AssetPrice`:
	err = encoder.Encode(obj.AssetPrice)
	if err != nil {
		return errors.NewField("AssetPrice", err)
	}
	// Serialize `AssetTransfer`:
	err = encoder.Encode(obj.AssetTransfer)
	if err != nil {
		return errors.NewField("AssetTransfer", err)
	}
	// Serialize `LiabilityMarketIndex`:
	err = encoder.Encode(obj.LiabilityMarketIndex)
	if err != nil {
		return errors.NewField("LiabilityMarketIndex", err)
	}
	// Serialize `LiabilityPrice`:
	err = encoder.Encode(obj.LiabilityPrice)
	if err != nil {
		return errors.NewField("LiabilityPrice", err)
	}
	// Serialize `LiabilityTransfer`:
	err = encoder.Encode(obj.LiabilityTransfer)
	if err != nil {
		return errors.NewField("LiabilityTransfer", err)
	}
	// Serialize `IfFee`:
	err = encoder.Encode(obj.IfFee)
	if err != nil {
		return errors.NewField("IfFee", err)
	}
	return nil
}

func (obj LiquidateSpotRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidateSpotRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidateSpotRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AssetMarketIndex`:
	err = decoder.Decode(&obj.AssetMarketIndex)
	if err != nil {
		return errors.NewField("AssetMarketIndex", err)
	}
	// Deserialize `AssetPrice`:
	err = decoder.Decode(&obj.AssetPrice)
	if err != nil {
		return errors.NewField("AssetPrice", err)
	}
	// Deserialize `AssetTransfer`:
	err = decoder.Decode(&obj.AssetTransfer)
	if err != nil {
		return errors.NewField("AssetTransfer", err)
	}
	// Deserialize `LiabilityMarketIndex`:
	err = decoder.Decode(&obj.LiabilityMarketIndex)
	if err != nil {
		return errors.NewField("LiabilityMarketIndex", err)
	}
	// Deserialize `LiabilityPrice`:
	err = decoder.Decode(&obj.LiabilityPrice)
	if err != nil {
		return errors.NewField("LiabilityPrice", err)
	}
	// Deserialize `LiabilityTransfer`:
	err = decoder.Decode(&obj.LiabilityTransfer)
	if err != nil {
		return errors.NewField("LiabilityTransfer", err)
	}
	// Deserialize `IfFee`:
	err = decoder.Decode(&obj.IfFee)
	if err != nil {
		return errors.NewField("IfFee", err)
	}
	return nil
}

func (obj *LiquidateSpotRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidateSpotRecord: %w", err)
	}
	return nil
}

func UnmarshalLiquidateSpotRecord(buf []byte) (*LiquidateSpotRecord, error) {
	obj := new(LiquidateSpotRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidateBorrowForPerpPnlRecord struct {
	PerpMarketIndex      uint16         `json:"perpMarketIndex"`
	MarketOraclePrice    int64          `json:"marketOraclePrice"`
	PnlTransfer          binary.Uint128 `json:"pnlTransfer"`
	LiabilityMarketIndex uint16         `json:"liabilityMarketIndex"`
	LiabilityPrice       int64          `json:"liabilityPrice"`
	LiabilityTransfer    binary.Uint128 `json:"liabilityTransfer"`
}

func (obj LiquidateBorrowForPerpPnlRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `MarketOraclePrice`:
	err = encoder.Encode(obj.MarketOraclePrice)
	if err != nil {
		return errors.NewField("MarketOraclePrice", err)
	}
	// Serialize `PnlTransfer`:
	err = encoder.Encode(obj.PnlTransfer)
	if err != nil {
		return errors.NewField("PnlTransfer", err)
	}
	// Serialize `LiabilityMarketIndex`:
	err = encoder.Encode(obj.LiabilityMarketIndex)
	if err != nil {
		return errors.NewField("LiabilityMarketIndex", err)
	}
	// Serialize `LiabilityPrice`:
	err = encoder.Encode(obj.LiabilityPrice)
	if err != nil {
		return errors.NewField("LiabilityPrice", err)
	}
	// Serialize `LiabilityTransfer`:
	err = encoder.Encode(obj.LiabilityTransfer)
	if err != nil {
		return errors.NewField("LiabilityTransfer", err)
	}
	return nil
}

func (obj LiquidateBorrowForPerpPnlRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidateBorrowForPerpPnlRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidateBorrowForPerpPnlRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `MarketOraclePrice`:
	err = decoder.Decode(&obj.MarketOraclePrice)
	if err != nil {
		return errors.NewField("MarketOraclePrice", err)
	}
	// Deserialize `PnlTransfer`:
	err = decoder.Decode(&obj.PnlTransfer)
	if err != nil {
		return errors.NewField("PnlTransfer", err)
	}
	// Deserialize `LiabilityMarketIndex`:
	err = decoder.Decode(&obj.LiabilityMarketIndex)
	if err != nil {
		return errors.NewField("LiabilityMarketIndex", err)
	}
	// Deserialize `LiabilityPrice`:
	err = decoder.Decode(&obj.LiabilityPrice)
	if err != nil {
		return errors.NewField("LiabilityPrice", err)
	}
	// Deserialize `LiabilityTransfer`:
	err = decoder.Decode(&obj.LiabilityTransfer)
	if err != nil {
		return errors.NewField("LiabilityTransfer", err)
	}
	return nil
}

func (obj *LiquidateBorrowForPerpPnlRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidateBorrowForPerpPnlRecord: %w", err)
	}
	return nil
}

func UnmarshalLiquidateBorrowForPerpPnlRecord(buf []byte) (*LiquidateBorrowForPerpPnlRecord, error) {
	obj := new(LiquidateBorrowForPerpPnlRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidatePerpPnlForDepositRecord struct {
	PerpMarketIndex   uint16         `json:"perpMarketIndex"`
	MarketOraclePrice int64          `json:"marketOraclePrice"`
	PnlTransfer       binary.Uint128 `json:"pnlTransfer"`
	AssetMarketIndex  uint16         `json:"assetMarketIndex"`
	AssetPrice        int64          `json:"assetPrice"`
	AssetTransfer     binary.Uint128 `json:"assetTransfer"`
}

func (obj LiquidatePerpPnlForDepositRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `MarketOraclePrice`:
	err = encoder.Encode(obj.MarketOraclePrice)
	if err != nil {
		return errors.NewField("MarketOraclePrice", err)
	}
	// Serialize `PnlTransfer`:
	err = encoder.Encode(obj.PnlTransfer)
	if err != nil {
		return errors.NewField("PnlTransfer", err)
	}
	// Serialize `AssetMarketIndex`:
	err = encoder.Encode(obj.AssetMarketIndex)
	if err != nil {
		return errors.NewField("AssetMarketIndex", err)
	}
	// Serialize `AssetPrice`:
	err = encoder.Encode(obj.AssetPrice)
	if err != nil {
		return errors.NewField("AssetPrice", err)
	}
	// Serialize `AssetTransfer`:
	err = encoder.Encode(obj.AssetTransfer)
	if err != nil {
		return errors.NewField("AssetTransfer", err)
	}
	return nil
}

func (obj LiquidatePerpPnlForDepositRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidatePerpPnlForDepositRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidatePerpPnlForDepositRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `MarketOraclePrice`:
	err = decoder.Decode(&obj.MarketOraclePrice)
	if err != nil {
		return errors.NewField("MarketOraclePrice", err)
	}
	// Deserialize `PnlTransfer`:
	err = decoder.Decode(&obj.PnlTransfer)
	if err != nil {
		return errors.NewField("PnlTransfer", err)
	}
	// Deserialize `AssetMarketIndex`:
	err = decoder.Decode(&obj.AssetMarketIndex)
	if err != nil {
		return errors.NewField("AssetMarketIndex", err)
	}
	// Deserialize `AssetPrice`:
	err = decoder.Decode(&obj.AssetPrice)
	if err != nil {
		return errors.NewField("AssetPrice", err)
	}
	// Deserialize `AssetTransfer`:
	err = decoder.Decode(&obj.AssetTransfer)
	if err != nil {
		return errors.NewField("AssetTransfer", err)
	}
	return nil
}

func (obj *LiquidatePerpPnlForDepositRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidatePerpPnlForDepositRecord: %w", err)
	}
	return nil
}

func UnmarshalLiquidatePerpPnlForDepositRecord(buf []byte) (*LiquidatePerpPnlForDepositRecord, error) {
	obj := new(LiquidatePerpPnlForDepositRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PerpBankruptcyRecord struct {
	MarketIndex                uint16              `json:"marketIndex"`
	Pnl                        binary.Int128       `json:"pnl"`
	IfPayment                  binary.Uint128      `json:"ifPayment"`
	ClawbackUser               *solanago.PublicKey `bin:"optional" json:"clawbackUser,omitempty"`
	ClawbackUserPayment        *binary.Uint128     `bin:"optional" json:"clawbackUserPayment,omitempty"`
	CumulativeFundingRateDelta binary.Int128       `json:"cumulativeFundingRateDelta"`
}

func (obj PerpBankruptcyRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Pnl`:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	// Serialize `IfPayment`:
	err = encoder.Encode(obj.IfPayment)
	if err != nil {
		return errors.NewField("IfPayment", err)
	}
	// Serialize `ClawbackUser` (optional):
	{
		if obj.ClawbackUser == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ClawbackUser", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ClawbackUser", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ClawbackUser)
			if err != nil {
				return errors.NewField("ClawbackUser", err)
			}
		}
	}
	// Serialize `ClawbackUserPayment` (optional):
	{
		if obj.ClawbackUserPayment == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ClawbackUserPayment", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ClawbackUserPayment", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ClawbackUserPayment)
			if err != nil {
				return errors.NewField("ClawbackUserPayment", err)
			}
		}
	}
	// Serialize `CumulativeFundingRateDelta`:
	err = encoder.Encode(obj.CumulativeFundingRateDelta)
	if err != nil {
		return errors.NewField("CumulativeFundingRateDelta", err)
	}
	return nil
}

func (obj PerpBankruptcyRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PerpBankruptcyRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PerpBankruptcyRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	// Deserialize `IfPayment`:
	err = decoder.Decode(&obj.IfPayment)
	if err != nil {
		return errors.NewField("IfPayment", err)
	}
	// Deserialize `ClawbackUser` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ClawbackUser", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ClawbackUser)
			if err != nil {
				return errors.NewField("ClawbackUser", err)
			}
		}
	}
	// Deserialize `ClawbackUserPayment` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ClawbackUserPayment", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ClawbackUserPayment)
			if err != nil {
				return errors.NewField("ClawbackUserPayment", err)
			}
		}
	}
	// Deserialize `CumulativeFundingRateDelta`:
	err = decoder.Decode(&obj.CumulativeFundingRateDelta)
	if err != nil {
		return errors.NewField("CumulativeFundingRateDelta", err)
	}
	return nil
}

func (obj *PerpBankruptcyRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PerpBankruptcyRecord: %w", err)
	}
	return nil
}

func UnmarshalPerpBankruptcyRecord(buf []byte) (*PerpBankruptcyRecord, error) {
	obj := new(PerpBankruptcyRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SpotBankruptcyRecord struct {
	MarketIndex                    uint16         `json:"marketIndex"`
	BorrowAmount                   binary.Uint128 `json:"borrowAmount"`
	IfPayment                      binary.Uint128 `json:"ifPayment"`
	CumulativeDepositInterestDelta binary.Uint128 `json:"cumulativeDepositInterestDelta"`
}

func (obj SpotBankruptcyRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `BorrowAmount`:
	err = encoder.Encode(obj.BorrowAmount)
	if err != nil {
		return errors.NewField("BorrowAmount", err)
	}
	// Serialize `IfPayment`:
	err = encoder.Encode(obj.IfPayment)
	if err != nil {
		return errors.NewField("IfPayment", err)
	}
	// Serialize `CumulativeDepositInterestDelta`:
	err = encoder.Encode(obj.CumulativeDepositInterestDelta)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestDelta", err)
	}
	return nil
}

func (obj SpotBankruptcyRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotBankruptcyRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotBankruptcyRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `BorrowAmount`:
	err = decoder.Decode(&obj.BorrowAmount)
	if err != nil {
		return errors.NewField("BorrowAmount", err)
	}
	// Deserialize `IfPayment`:
	err = decoder.Decode(&obj.IfPayment)
	if err != nil {
		return errors.NewField("IfPayment", err)
	}
	// Deserialize `CumulativeDepositInterestDelta`:
	err = decoder.Decode(&obj.CumulativeDepositInterestDelta)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestDelta", err)
	}
	return nil
}

func (obj *SpotBankruptcyRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotBankruptcyRecord: %w", err)
	}
	return nil
}

func UnmarshalSpotBankruptcyRecord(buf []byte) (*SpotBankruptcyRecord, error) {
	obj := new(SpotBankruptcyRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IfRebalanceConfigParams struct {
	TotalInAmount    uint64 `json:"totalInAmount"`
	EpochMaxInAmount uint64 `json:"epochMaxInAmount"`
	EpochDuration    int64  `json:"epochDuration"`
	OutMarketIndex   uint16 `json:"outMarketIndex"`
	InMarketIndex    uint16 `json:"inMarketIndex"`
	MaxSlippageBps   uint16 `json:"maxSlippageBps"`
	SwapMode         uint8  `json:"swapMode"`
	Status           uint8  `json:"status"`
}

func (obj IfRebalanceConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalInAmount`:
	err = encoder.Encode(obj.TotalInAmount)
	if err != nil {
		return errors.NewField("TotalInAmount", err)
	}
	// Serialize `EpochMaxInAmount`:
	err = encoder.Encode(obj.EpochMaxInAmount)
	if err != nil {
		return errors.NewField("EpochMaxInAmount", err)
	}
	// Serialize `EpochDuration`:
	err = encoder.Encode(obj.EpochDuration)
	if err != nil {
		return errors.NewField("EpochDuration", err)
	}
	// Serialize `OutMarketIndex`:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Serialize `InMarketIndex`:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Serialize `MaxSlippageBps`:
	err = encoder.Encode(obj.MaxSlippageBps)
	if err != nil {
		return errors.NewField("MaxSlippageBps", err)
	}
	// Serialize `SwapMode`:
	err = encoder.Encode(obj.SwapMode)
	if err != nil {
		return errors.NewField("SwapMode", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	return nil
}

func (obj IfRebalanceConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IfRebalanceConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IfRebalanceConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalInAmount`:
	err = decoder.Decode(&obj.TotalInAmount)
	if err != nil {
		return errors.NewField("TotalInAmount", err)
	}
	// Deserialize `EpochMaxInAmount`:
	err = decoder.Decode(&obj.EpochMaxInAmount)
	if err != nil {
		return errors.NewField("EpochMaxInAmount", err)
	}
	// Deserialize `EpochDuration`:
	err = decoder.Decode(&obj.EpochDuration)
	if err != nil {
		return errors.NewField("EpochDuration", err)
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Deserialize `MaxSlippageBps`:
	err = decoder.Decode(&obj.MaxSlippageBps)
	if err != nil {
		return errors.NewField("MaxSlippageBps", err)
	}
	// Deserialize `SwapMode`:
	err = decoder.Decode(&obj.SwapMode)
	if err != nil {
		return errors.NewField("SwapMode", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	return nil
}

func (obj *IfRebalanceConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IfRebalanceConfigParams: %w", err)
	}
	return nil
}

func UnmarshalIfRebalanceConfigParams(buf []byte) (*IfRebalanceConfigParams, error) {
	obj := new(IfRebalanceConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MarketIdentifier struct {
	MarketType  MarketType `json:"marketType"`
	MarketIndex uint16     `json:"marketIndex"`
}

func (obj MarketIdentifier) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarketType`:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	return nil
}

func (obj MarketIdentifier) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MarketIdentifier: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MarketIdentifier) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	return nil
}

func (obj *MarketIdentifier) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MarketIdentifier: %w", err)
	}
	return nil
}

func UnmarshalMarketIdentifier(buf []byte) (*MarketIdentifier, error) {
	obj := new(MarketIdentifier)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type HistoricalOracleData struct {
	// precision: PRICE_PRECISION
	LastOraclePrice int64 `json:"lastOraclePrice"`

	// precision: PRICE_PRECISION
	LastOracleConf uint64 `json:"lastOracleConf"`

	// number of slots since last update
	LastOracleDelay int64 `json:"lastOracleDelay"`

	// precision: PRICE_PRECISION
	LastOraclePriceTwap int64 `json:"lastOraclePriceTwap"`

	// precision: PRICE_PRECISION
	LastOraclePriceTwap5Min int64 `json:"lastOraclePriceTwap5Min"`

	// unix_timestamp of last snapshot
	LastOraclePriceTwapTs int64 `json:"lastOraclePriceTwapTs"`
}

func (obj HistoricalOracleData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastOraclePrice`:
	err = encoder.Encode(obj.LastOraclePrice)
	if err != nil {
		return errors.NewField("LastOraclePrice", err)
	}
	// Serialize `LastOracleConf`:
	err = encoder.Encode(obj.LastOracleConf)
	if err != nil {
		return errors.NewField("LastOracleConf", err)
	}
	// Serialize `LastOracleDelay`:
	err = encoder.Encode(obj.LastOracleDelay)
	if err != nil {
		return errors.NewField("LastOracleDelay", err)
	}
	// Serialize `LastOraclePriceTwap`:
	err = encoder.Encode(obj.LastOraclePriceTwap)
	if err != nil {
		return errors.NewField("LastOraclePriceTwap", err)
	}
	// Serialize `LastOraclePriceTwap5Min`:
	err = encoder.Encode(obj.LastOraclePriceTwap5Min)
	if err != nil {
		return errors.NewField("LastOraclePriceTwap5Min", err)
	}
	// Serialize `LastOraclePriceTwapTs`:
	err = encoder.Encode(obj.LastOraclePriceTwapTs)
	if err != nil {
		return errors.NewField("LastOraclePriceTwapTs", err)
	}
	return nil
}

func (obj HistoricalOracleData) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding HistoricalOracleData: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *HistoricalOracleData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastOraclePrice`:
	err = decoder.Decode(&obj.LastOraclePrice)
	if err != nil {
		return errors.NewField("LastOraclePrice", err)
	}
	// Deserialize `LastOracleConf`:
	err = decoder.Decode(&obj.LastOracleConf)
	if err != nil {
		return errors.NewField("LastOracleConf", err)
	}
	// Deserialize `LastOracleDelay`:
	err = decoder.Decode(&obj.LastOracleDelay)
	if err != nil {
		return errors.NewField("LastOracleDelay", err)
	}
	// Deserialize `LastOraclePriceTwap`:
	err = decoder.Decode(&obj.LastOraclePriceTwap)
	if err != nil {
		return errors.NewField("LastOraclePriceTwap", err)
	}
	// Deserialize `LastOraclePriceTwap5Min`:
	err = decoder.Decode(&obj.LastOraclePriceTwap5Min)
	if err != nil {
		return errors.NewField("LastOraclePriceTwap5Min", err)
	}
	// Deserialize `LastOraclePriceTwapTs`:
	err = decoder.Decode(&obj.LastOraclePriceTwapTs)
	if err != nil {
		return errors.NewField("LastOraclePriceTwapTs", err)
	}
	return nil
}

func (obj *HistoricalOracleData) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling HistoricalOracleData: %w", err)
	}
	return nil
}

func UnmarshalHistoricalOracleData(buf []byte) (*HistoricalOracleData, error) {
	obj := new(HistoricalOracleData)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type HistoricalIndexData struct {
	// precision: PRICE_PRECISION
	LastIndexBidPrice uint64 `json:"lastIndexBidPrice"`

	// precision: PRICE_PRECISION
	LastIndexAskPrice uint64 `json:"lastIndexAskPrice"`

	// precision: PRICE_PRECISION
	LastIndexPriceTwap uint64 `json:"lastIndexPriceTwap"`

	// precision: PRICE_PRECISION
	LastIndexPriceTwap5Min uint64 `json:"lastIndexPriceTwap5Min"`

	// unix_timestamp of last snapshot
	LastIndexPriceTwapTs int64 `json:"lastIndexPriceTwapTs"`
}

func (obj HistoricalIndexData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastIndexBidPrice`:
	err = encoder.Encode(obj.LastIndexBidPrice)
	if err != nil {
		return errors.NewField("LastIndexBidPrice", err)
	}
	// Serialize `LastIndexAskPrice`:
	err = encoder.Encode(obj.LastIndexAskPrice)
	if err != nil {
		return errors.NewField("LastIndexAskPrice", err)
	}
	// Serialize `LastIndexPriceTwap`:
	err = encoder.Encode(obj.LastIndexPriceTwap)
	if err != nil {
		return errors.NewField("LastIndexPriceTwap", err)
	}
	// Serialize `LastIndexPriceTwap5Min`:
	err = encoder.Encode(obj.LastIndexPriceTwap5Min)
	if err != nil {
		return errors.NewField("LastIndexPriceTwap5Min", err)
	}
	// Serialize `LastIndexPriceTwapTs`:
	err = encoder.Encode(obj.LastIndexPriceTwapTs)
	if err != nil {
		return errors.NewField("LastIndexPriceTwapTs", err)
	}
	return nil
}

func (obj HistoricalIndexData) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding HistoricalIndexData: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *HistoricalIndexData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastIndexBidPrice`:
	err = decoder.Decode(&obj.LastIndexBidPrice)
	if err != nil {
		return errors.NewField("LastIndexBidPrice", err)
	}
	// Deserialize `LastIndexAskPrice`:
	err = decoder.Decode(&obj.LastIndexAskPrice)
	if err != nil {
		return errors.NewField("LastIndexAskPrice", err)
	}
	// Deserialize `LastIndexPriceTwap`:
	err = decoder.Decode(&obj.LastIndexPriceTwap)
	if err != nil {
		return errors.NewField("LastIndexPriceTwap", err)
	}
	// Deserialize `LastIndexPriceTwap5Min`:
	err = decoder.Decode(&obj.LastIndexPriceTwap5Min)
	if err != nil {
		return errors.NewField("LastIndexPriceTwap5Min", err)
	}
	// Deserialize `LastIndexPriceTwapTs`:
	err = decoder.Decode(&obj.LastIndexPriceTwapTs)
	if err != nil {
		return errors.NewField("LastIndexPriceTwapTs", err)
	}
	return nil
}

func (obj *HistoricalIndexData) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling HistoricalIndexData: %w", err)
	}
	return nil
}

func UnmarshalHistoricalIndexData(buf []byte) (*HistoricalIndexData, error) {
	obj := new(HistoricalIndexData)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PrelaunchOracleParams struct {
	PerpMarketIndex uint16 `json:"perpMarketIndex"`
	Price           *int64 `bin:"optional" json:"price,omitempty"`
	MaxPrice        *int64 `bin:"optional" json:"maxPrice,omitempty"`
}

func (obj PrelaunchOracleParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `Price` (optional):
	{
		if obj.Price == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Price", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Price", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Price)
			if err != nil {
				return errors.NewField("Price", err)
			}
		}
	}
	// Serialize `MaxPrice` (optional):
	{
		if obj.MaxPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxPrice)
			if err != nil {
				return errors.NewField("MaxPrice", err)
			}
		}
	}
	return nil
}

func (obj PrelaunchOracleParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PrelaunchOracleParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PrelaunchOracleParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `Price` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Price", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Price)
			if err != nil {
				return errors.NewField("Price", err)
			}
		}
	}
	// Deserialize `MaxPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxPrice)
			if err != nil {
				return errors.NewField("MaxPrice", err)
			}
		}
	}
	return nil
}

func (obj *PrelaunchOracleParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PrelaunchOracleParams: %w", err)
	}
	return nil
}

func UnmarshalPrelaunchOracleParams(buf []byte) (*PrelaunchOracleParams, error) {
	obj := new(PrelaunchOracleParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OrderParams struct {
	OrderType         OrderType             `json:"orderType"`
	MarketType        MarketType            `json:"marketType"`
	Direction         PositionDirection     `json:"direction"`
	UserOrderId       uint8                 `json:"userOrderId"`
	BaseAssetAmount   uint64                `json:"baseAssetAmount"`
	Price             uint64                `json:"price"`
	MarketIndex       uint16                `json:"marketIndex"`
	ReduceOnly        bool                  `json:"reduceOnly"`
	PostOnly          PostOnlyParam         `json:"postOnly"`
	BitFlags          uint8                 `json:"bitFlags"`
	MaxTs             *int64                `bin:"optional" json:"maxTs,omitempty"`
	TriggerPrice      *uint64               `bin:"optional" json:"triggerPrice,omitempty"`
	TriggerCondition  OrderTriggerCondition `json:"triggerCondition"`
	OraclePriceOffset *int32                `bin:"optional" json:"oraclePriceOffset,omitempty"`
	AuctionDuration   *uint8                `bin:"optional" json:"auctionDuration,omitempty"`
	AuctionStartPrice *int64                `bin:"optional" json:"auctionStartPrice,omitempty"`
	AuctionEndPrice   *int64                `bin:"optional" json:"auctionEndPrice,omitempty"`
}

func (obj OrderParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OrderType`:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return errors.NewField("OrderType", err)
	}
	// Serialize `MarketType`:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Serialize `Direction`:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Serialize `UserOrderId`:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `ReduceOnly`:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Serialize `PostOnly`:
	err = encoder.Encode(obj.PostOnly)
	if err != nil {
		return errors.NewField("PostOnly", err)
	}
	// Serialize `BitFlags`:
	err = encoder.Encode(obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Serialize `MaxTs` (optional):
	{
		if obj.MaxTs == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxTs", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxTs", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxTs)
			if err != nil {
				return errors.NewField("MaxTs", err)
			}
		}
	}
	// Serialize `TriggerPrice` (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Serialize `TriggerCondition`:
	err = encoder.Encode(obj.TriggerCondition)
	if err != nil {
		return errors.NewField("TriggerCondition", err)
	}
	// Serialize `OraclePriceOffset` (optional):
	{
		if obj.OraclePriceOffset == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.OraclePriceOffset)
			if err != nil {
				return errors.NewField("OraclePriceOffset", err)
			}
		}
	}
	// Serialize `AuctionDuration` (optional):
	{
		if obj.AuctionDuration == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionDuration", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionDuration", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionDuration)
			if err != nil {
				return errors.NewField("AuctionDuration", err)
			}
		}
	}
	// Serialize `AuctionStartPrice` (optional):
	{
		if obj.AuctionStartPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionStartPrice)
			if err != nil {
				return errors.NewField("AuctionStartPrice", err)
			}
		}
	}
	// Serialize `AuctionEndPrice` (optional):
	{
		if obj.AuctionEndPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionEndPrice)
			if err != nil {
				return errors.NewField("AuctionEndPrice", err)
			}
		}
	}
	return nil
}

func (obj OrderParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OrderParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OrderParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return errors.NewField("OrderType", err)
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Deserialize `PostOnly`:
	err = decoder.Decode(&obj.PostOnly)
	if err != nil {
		return errors.NewField("PostOnly", err)
	}
	// Deserialize `BitFlags`:
	err = decoder.Decode(&obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Deserialize `MaxTs` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxTs", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxTs)
			if err != nil {
				return errors.NewField("MaxTs", err)
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Deserialize `TriggerCondition`:
	err = decoder.Decode(&obj.TriggerCondition)
	if err != nil {
		return errors.NewField("TriggerCondition", err)
	}
	// Deserialize `OraclePriceOffset` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.OraclePriceOffset)
			if err != nil {
				return errors.NewField("OraclePriceOffset", err)
			}
		}
	}
	// Deserialize `AuctionDuration` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionDuration", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionDuration)
			if err != nil {
				return errors.NewField("AuctionDuration", err)
			}
		}
	}
	// Deserialize `AuctionStartPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionStartPrice)
			if err != nil {
				return errors.NewField("AuctionStartPrice", err)
			}
		}
	}
	// Deserialize `AuctionEndPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionEndPrice)
			if err != nil {
				return errors.NewField("AuctionEndPrice", err)
			}
		}
	}
	return nil
}

func (obj *OrderParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OrderParams: %w", err)
	}
	return nil
}

func UnmarshalOrderParams(buf []byte) (*OrderParams, error) {
	obj := new(OrderParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgOrderParamsMessage struct {
	SignedMsgOrderParams  OrderParams                  `json:"signedMsgOrderParams"`
	SubAccountId          uint16                       `json:"subAccountId"`
	Slot                  uint64                       `json:"slot"`
	Uuid                  [8]uint8                     `json:"uuid"`
	TakeProfitOrderParams *SignedMsgTriggerOrderParams `bin:"optional" json:"takeProfitOrderParams,omitempty"`
	StopLossOrderParams   *SignedMsgTriggerOrderParams `bin:"optional" json:"stopLossOrderParams,omitempty"`
	MaxMarginRatio        *uint16                      `bin:"optional" json:"maxMarginRatio,omitempty"`
}

func (obj SignedMsgOrderParamsMessage) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SignedMsgOrderParams`:
	err = encoder.Encode(obj.SignedMsgOrderParams)
	if err != nil {
		return errors.NewField("SignedMsgOrderParams", err)
	}
	// Serialize `SubAccountId`:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Uuid`:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Serialize `TakeProfitOrderParams` (optional):
	{
		if obj.TakeProfitOrderParams == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakeProfitOrderParams)
			if err != nil {
				return errors.NewField("TakeProfitOrderParams", err)
			}
		}
	}
	// Serialize `StopLossOrderParams` (optional):
	{
		if obj.StopLossOrderParams == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.StopLossOrderParams)
			if err != nil {
				return errors.NewField("StopLossOrderParams", err)
			}
		}
	}
	// Serialize `MaxMarginRatio` (optional):
	{
		if obj.MaxMarginRatio == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxMarginRatio)
			if err != nil {
				return errors.NewField("MaxMarginRatio", err)
			}
		}
	}
	return nil
}

func (obj SignedMsgOrderParamsMessage) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgOrderParamsMessage: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgOrderParamsMessage) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SignedMsgOrderParams`:
	err = decoder.Decode(&obj.SignedMsgOrderParams)
	if err != nil {
		return errors.NewField("SignedMsgOrderParams", err)
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Deserialize `TakeProfitOrderParams` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakeProfitOrderParams)
			if err != nil {
				return errors.NewField("TakeProfitOrderParams", err)
			}
		}
	}
	// Deserialize `StopLossOrderParams` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.StopLossOrderParams)
			if err != nil {
				return errors.NewField("StopLossOrderParams", err)
			}
		}
	}
	// Deserialize `MaxMarginRatio` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxMarginRatio)
			if err != nil {
				return errors.NewField("MaxMarginRatio", err)
			}
		}
	}
	return nil
}

func (obj *SignedMsgOrderParamsMessage) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgOrderParamsMessage: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgOrderParamsMessage(buf []byte) (*SignedMsgOrderParamsMessage, error) {
	obj := new(SignedMsgOrderParamsMessage)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgOrderParamsDelegateMessage struct {
	SignedMsgOrderParams  OrderParams                  `json:"signedMsgOrderParams"`
	TakerPubkey           solanago.PublicKey           `json:"takerPubkey"`
	Slot                  uint64                       `json:"slot"`
	Uuid                  [8]uint8                     `json:"uuid"`
	TakeProfitOrderParams *SignedMsgTriggerOrderParams `bin:"optional" json:"takeProfitOrderParams,omitempty"`
	StopLossOrderParams   *SignedMsgTriggerOrderParams `bin:"optional" json:"stopLossOrderParams,omitempty"`
	MaxMarginRatio        *uint16                      `bin:"optional" json:"maxMarginRatio,omitempty"`
}

func (obj SignedMsgOrderParamsDelegateMessage) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SignedMsgOrderParams`:
	err = encoder.Encode(obj.SignedMsgOrderParams)
	if err != nil {
		return errors.NewField("SignedMsgOrderParams", err)
	}
	// Serialize `TakerPubkey`:
	err = encoder.Encode(obj.TakerPubkey)
	if err != nil {
		return errors.NewField("TakerPubkey", err)
	}
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Uuid`:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Serialize `TakeProfitOrderParams` (optional):
	{
		if obj.TakeProfitOrderParams == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakeProfitOrderParams)
			if err != nil {
				return errors.NewField("TakeProfitOrderParams", err)
			}
		}
	}
	// Serialize `StopLossOrderParams` (optional):
	{
		if obj.StopLossOrderParams == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.StopLossOrderParams)
			if err != nil {
				return errors.NewField("StopLossOrderParams", err)
			}
		}
	}
	// Serialize `MaxMarginRatio` (optional):
	{
		if obj.MaxMarginRatio == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxMarginRatio)
			if err != nil {
				return errors.NewField("MaxMarginRatio", err)
			}
		}
	}
	return nil
}

func (obj SignedMsgOrderParamsDelegateMessage) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgOrderParamsDelegateMessage: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgOrderParamsDelegateMessage) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SignedMsgOrderParams`:
	err = decoder.Decode(&obj.SignedMsgOrderParams)
	if err != nil {
		return errors.NewField("SignedMsgOrderParams", err)
	}
	// Deserialize `TakerPubkey`:
	err = decoder.Decode(&obj.TakerPubkey)
	if err != nil {
		return errors.NewField("TakerPubkey", err)
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Deserialize `TakeProfitOrderParams` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakeProfitOrderParams", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakeProfitOrderParams)
			if err != nil {
				return errors.NewField("TakeProfitOrderParams", err)
			}
		}
	}
	// Deserialize `StopLossOrderParams` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("StopLossOrderParams", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.StopLossOrderParams)
			if err != nil {
				return errors.NewField("StopLossOrderParams", err)
			}
		}
	}
	// Deserialize `MaxMarginRatio` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxMarginRatio", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxMarginRatio)
			if err != nil {
				return errors.NewField("MaxMarginRatio", err)
			}
		}
	}
	return nil
}

func (obj *SignedMsgOrderParamsDelegateMessage) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgOrderParamsDelegateMessage: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgOrderParamsDelegateMessage(buf []byte) (*SignedMsgOrderParamsDelegateMessage, error) {
	obj := new(SignedMsgOrderParamsDelegateMessage)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgTriggerOrderParams struct {
	TriggerPrice    uint64 `json:"triggerPrice"`
	BaseAssetAmount uint64 `json:"baseAssetAmount"`
}

func (obj SignedMsgTriggerOrderParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	return nil
}

func (obj SignedMsgTriggerOrderParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgTriggerOrderParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgTriggerOrderParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	return nil
}

func (obj *SignedMsgTriggerOrderParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgTriggerOrderParams: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgTriggerOrderParams(buf []byte) (*SignedMsgTriggerOrderParams, error) {
	obj := new(SignedMsgTriggerOrderParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ModifyOrderParams struct {
	Direction         *PositionDirection     `bin:"optional" json:"direction,omitempty"`
	BaseAssetAmount   *uint64                `bin:"optional" json:"baseAssetAmount,omitempty"`
	Price             *uint64                `bin:"optional" json:"price,omitempty"`
	ReduceOnly        *bool                  `bin:"optional" json:"reduceOnly,omitempty"`
	PostOnly          *PostOnlyParam         `bin:"optional" json:"postOnly,omitempty"`
	BitFlags          *uint8                 `bin:"optional" json:"bitFlags,omitempty"`
	MaxTs             *int64                 `bin:"optional" json:"maxTs,omitempty"`
	TriggerPrice      *uint64                `bin:"optional" json:"triggerPrice,omitempty"`
	TriggerCondition  *OrderTriggerCondition `bin:"optional" json:"triggerCondition,omitempty"`
	OraclePriceOffset *int32                 `bin:"optional" json:"oraclePriceOffset,omitempty"`
	AuctionDuration   *uint8                 `bin:"optional" json:"auctionDuration,omitempty"`
	AuctionStartPrice *int64                 `bin:"optional" json:"auctionStartPrice,omitempty"`
	AuctionEndPrice   *int64                 `bin:"optional" json:"auctionEndPrice,omitempty"`
	Policy            *uint8                 `bin:"optional" json:"policy,omitempty"`
}

func (obj ModifyOrderParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Direction` (optional):
	{
		if obj.Direction == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Direction", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Direction", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Direction)
			if err != nil {
				return errors.NewField("Direction", err)
			}
		}
	}
	// Serialize `BaseAssetAmount` (optional):
	{
		if obj.BaseAssetAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("BaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("BaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.BaseAssetAmount)
			if err != nil {
				return errors.NewField("BaseAssetAmount", err)
			}
		}
	}
	// Serialize `Price` (optional):
	{
		if obj.Price == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Price", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Price", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Price)
			if err != nil {
				return errors.NewField("Price", err)
			}
		}
	}
	// Serialize `ReduceOnly` (optional):
	{
		if obj.ReduceOnly == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ReduceOnly", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ReduceOnly", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ReduceOnly)
			if err != nil {
				return errors.NewField("ReduceOnly", err)
			}
		}
	}
	// Serialize `PostOnly` (optional):
	{
		if obj.PostOnly == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PostOnly", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PostOnly", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PostOnly)
			if err != nil {
				return errors.NewField("PostOnly", err)
			}
		}
	}
	// Serialize `BitFlags` (optional):
	{
		if obj.BitFlags == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("BitFlags", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("BitFlags", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.BitFlags)
			if err != nil {
				return errors.NewField("BitFlags", err)
			}
		}
	}
	// Serialize `MaxTs` (optional):
	{
		if obj.MaxTs == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MaxTs", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MaxTs", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MaxTs)
			if err != nil {
				return errors.NewField("MaxTs", err)
			}
		}
	}
	// Serialize `TriggerPrice` (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Serialize `TriggerCondition` (optional):
	{
		if obj.TriggerCondition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerCondition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerCondition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerCondition)
			if err != nil {
				return errors.NewField("TriggerCondition", err)
			}
		}
	}
	// Serialize `OraclePriceOffset` (optional):
	{
		if obj.OraclePriceOffset == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.OraclePriceOffset)
			if err != nil {
				return errors.NewField("OraclePriceOffset", err)
			}
		}
	}
	// Serialize `AuctionDuration` (optional):
	{
		if obj.AuctionDuration == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionDuration", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionDuration", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionDuration)
			if err != nil {
				return errors.NewField("AuctionDuration", err)
			}
		}
	}
	// Serialize `AuctionStartPrice` (optional):
	{
		if obj.AuctionStartPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionStartPrice)
			if err != nil {
				return errors.NewField("AuctionStartPrice", err)
			}
		}
	}
	// Serialize `AuctionEndPrice` (optional):
	{
		if obj.AuctionEndPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.AuctionEndPrice)
			if err != nil {
				return errors.NewField("AuctionEndPrice", err)
			}
		}
	}
	// Serialize `Policy` (optional):
	{
		if obj.Policy == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Policy", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Policy", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Policy)
			if err != nil {
				return errors.NewField("Policy", err)
			}
		}
	}
	return nil
}

func (obj ModifyOrderParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ModifyOrderParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ModifyOrderParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Direction` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Direction", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Direction)
			if err != nil {
				return errors.NewField("Direction", err)
			}
		}
	}
	// Deserialize `BaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("BaseAssetAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.BaseAssetAmount)
			if err != nil {
				return errors.NewField("BaseAssetAmount", err)
			}
		}
	}
	// Deserialize `Price` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Price", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Price)
			if err != nil {
				return errors.NewField("Price", err)
			}
		}
	}
	// Deserialize `ReduceOnly` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ReduceOnly", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ReduceOnly)
			if err != nil {
				return errors.NewField("ReduceOnly", err)
			}
		}
	}
	// Deserialize `PostOnly` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PostOnly", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PostOnly)
			if err != nil {
				return errors.NewField("PostOnly", err)
			}
		}
	}
	// Deserialize `BitFlags` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("BitFlags", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.BitFlags)
			if err != nil {
				return errors.NewField("BitFlags", err)
			}
		}
	}
	// Deserialize `MaxTs` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MaxTs", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MaxTs)
			if err != nil {
				return errors.NewField("MaxTs", err)
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Deserialize `TriggerCondition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerCondition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerCondition)
			if err != nil {
				return errors.NewField("TriggerCondition", err)
			}
		}
	}
	// Deserialize `OraclePriceOffset` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("OraclePriceOffset", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.OraclePriceOffset)
			if err != nil {
				return errors.NewField("OraclePriceOffset", err)
			}
		}
	}
	// Deserialize `AuctionDuration` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionDuration", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionDuration)
			if err != nil {
				return errors.NewField("AuctionDuration", err)
			}
		}
	}
	// Deserialize `AuctionStartPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionStartPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionStartPrice)
			if err != nil {
				return errors.NewField("AuctionStartPrice", err)
			}
		}
	}
	// Deserialize `AuctionEndPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("AuctionEndPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.AuctionEndPrice)
			if err != nil {
				return errors.NewField("AuctionEndPrice", err)
			}
		}
	}
	// Deserialize `Policy` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Policy", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Policy)
			if err != nil {
				return errors.NewField("Policy", err)
			}
		}
	}
	return nil
}

func (obj *ModifyOrderParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ModifyOrderParams: %w", err)
	}
	return nil
}

func UnmarshalModifyOrderParams(buf []byte) (*ModifyOrderParams, error) {
	obj := new(ModifyOrderParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceClaim struct {
	// The amount of revenue last settled
	// Positive if funds left the perp market,
	// negative if funds were pulled into the perp market
	// precision: QUOTE_PRECISION
	RevenueWithdrawSinceLastSettle int64 `json:"revenueWithdrawSinceLastSettle"`

	// The max amount of revenue that can be withdrawn per period
	// precision: QUOTE_PRECISION
	MaxRevenueWithdrawPerPeriod uint64 `json:"maxRevenueWithdrawPerPeriod"`

	// The max amount of insurance that perp market can use to resolve bankruptcy and pnl deficits
	// precision: QUOTE_PRECISION
	QuoteMaxInsurance uint64 `json:"quoteMaxInsurance"`

	// The amount of insurance that has been used to resolve bankruptcy and pnl deficits
	// precision: QUOTE_PRECISION
	QuoteSettledInsurance uint64 `json:"quoteSettledInsurance"`

	// The last time revenue was settled in/out of market
	LastRevenueWithdrawTs int64 `json:"lastRevenueWithdrawTs"`
}

func (obj InsuranceClaim) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RevenueWithdrawSinceLastSettle`:
	err = encoder.Encode(obj.RevenueWithdrawSinceLastSettle)
	if err != nil {
		return errors.NewField("RevenueWithdrawSinceLastSettle", err)
	}
	// Serialize `MaxRevenueWithdrawPerPeriod`:
	err = encoder.Encode(obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return errors.NewField("MaxRevenueWithdrawPerPeriod", err)
	}
	// Serialize `QuoteMaxInsurance`:
	err = encoder.Encode(obj.QuoteMaxInsurance)
	if err != nil {
		return errors.NewField("QuoteMaxInsurance", err)
	}
	// Serialize `QuoteSettledInsurance`:
	err = encoder.Encode(obj.QuoteSettledInsurance)
	if err != nil {
		return errors.NewField("QuoteSettledInsurance", err)
	}
	// Serialize `LastRevenueWithdrawTs`:
	err = encoder.Encode(obj.LastRevenueWithdrawTs)
	if err != nil {
		return errors.NewField("LastRevenueWithdrawTs", err)
	}
	return nil
}

func (obj InsuranceClaim) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceClaim: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceClaim) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RevenueWithdrawSinceLastSettle`:
	err = decoder.Decode(&obj.RevenueWithdrawSinceLastSettle)
	if err != nil {
		return errors.NewField("RevenueWithdrawSinceLastSettle", err)
	}
	// Deserialize `MaxRevenueWithdrawPerPeriod`:
	err = decoder.Decode(&obj.MaxRevenueWithdrawPerPeriod)
	if err != nil {
		return errors.NewField("MaxRevenueWithdrawPerPeriod", err)
	}
	// Deserialize `QuoteMaxInsurance`:
	err = decoder.Decode(&obj.QuoteMaxInsurance)
	if err != nil {
		return errors.NewField("QuoteMaxInsurance", err)
	}
	// Deserialize `QuoteSettledInsurance`:
	err = decoder.Decode(&obj.QuoteSettledInsurance)
	if err != nil {
		return errors.NewField("QuoteSettledInsurance", err)
	}
	// Deserialize `LastRevenueWithdrawTs`:
	err = decoder.Decode(&obj.LastRevenueWithdrawTs)
	if err != nil {
		return errors.NewField("LastRevenueWithdrawTs", err)
	}
	return nil
}

func (obj *InsuranceClaim) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceClaim: %w", err)
	}
	return nil
}

func UnmarshalInsuranceClaim(buf []byte) (*InsuranceClaim, error) {
	obj := new(InsuranceClaim)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolBalance struct {
	// To get the pool's token amount, you must multiply the scaled balance by the market's cumulative
	// deposit interest
	// precision: SPOT_BALANCE_PRECISION
	ScaledBalance binary.Uint128 `json:"scaledBalance"`

	// The spot market the pool is for
	MarketIndex uint16   `json:"marketIndex"`
	Padding     [6]uint8 `json:"padding"`
}

func (obj PoolBalance) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ScaledBalance`:
	err = encoder.Encode(obj.ScaledBalance)
	if err != nil {
		return errors.NewField("ScaledBalance", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PoolBalance) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolBalance: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolBalance) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ScaledBalance`:
	err = decoder.Decode(&obj.ScaledBalance)
	if err != nil {
		return errors.NewField("ScaledBalance", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PoolBalance) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolBalance: %w", err)
	}
	return nil
}

func UnmarshalPoolBalance(buf []byte) (*PoolBalance, error) {
	obj := new(PoolBalance)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Amm struct {
	// oracle price data public key
	Oracle solanago.PublicKey `json:"oracle"`

	// stores historically witnessed oracle data
	HistoricalOracleData HistoricalOracleData `json:"historicalOracleData"`

	// accumulated base asset amount since inception per lp share
	// precision: QUOTE_PRECISION
	BaseAssetAmountPerLp binary.Int128 `json:"baseAssetAmountPerLp"`

	// accumulated quote asset amount since inception per lp share
	// precision: QUOTE_PRECISION
	QuoteAssetAmountPerLp binary.Int128 `json:"quoteAssetAmountPerLp"`

	// partition of fees from perp market trading moved from pnl settlements
	FeePool PoolBalance `json:"feePool"`

	// `x` reserves for constant product mm formula (x * y = k)
	// precision: AMM_RESERVE_PRECISION
	BaseAssetReserve binary.Uint128 `json:"baseAssetReserve"`

	// `y` reserves for constant product mm formula (x * y = k)
	// precision: AMM_RESERVE_PRECISION
	QuoteAssetReserve binary.Uint128 `json:"quoteAssetReserve"`

	// determines how close the min/max base asset reserve sit vs base reserves
	// allow for decreasing slippage without increasing liquidity and v.v.
	// precision: PERCENTAGE_PRECISION
	ConcentrationCoef binary.Uint128 `json:"concentrationCoef"`

	// minimum base_asset_reserve allowed before AMM is unavailable
	// precision: AMM_RESERVE_PRECISION
	MinBaseAssetReserve binary.Uint128 `json:"minBaseAssetReserve"`

	// maximum base_asset_reserve allowed before AMM is unavailable
	// precision: AMM_RESERVE_PRECISION
	MaxBaseAssetReserve binary.Uint128 `json:"maxBaseAssetReserve"`

	// `sqrt(k)` in constant product mm formula (x * y = k). stored to avoid drift caused by integer math issues
	// precision: AMM_RESERVE_PRECISION
	SqrtK binary.Uint128 `json:"sqrtK"`

	// normalizing numerical factor for y, its use offers lowest slippage in cp-curve when market is balanced
	// precision: PEG_PRECISION
	PegMultiplier binary.Uint128 `json:"pegMultiplier"`

	// y when market is balanced. stored to save computation
	// precision: AMM_RESERVE_PRECISION
	TerminalQuoteAssetReserve binary.Uint128 `json:"terminalQuoteAssetReserve"`

	// always non-negative. tracks number of total longs in market (regardless of counterparty)
	// precision: BASE_PRECISION
	BaseAssetAmountLong binary.Int128 `json:"baseAssetAmountLong"`

	// always non-positive. tracks number of total shorts in market (regardless of counterparty)
	// precision: BASE_PRECISION
	BaseAssetAmountShort binary.Int128 `json:"baseAssetAmountShort"`

	// tracks net position (longs-shorts) in market with AMM as counterparty
	// precision: BASE_PRECISION
	BaseAssetAmountWithAmm binary.Int128 `json:"baseAssetAmountWithAmm"`

	// tracks net position (longs-shorts) in market with LPs as counterparty
	// precision: BASE_PRECISION
	BaseAssetAmountWithUnsettledLp binary.Int128 `json:"baseAssetAmountWithUnsettledLp"`

	// max allowed open interest, blocks trades that breach this value
	// precision: BASE_PRECISION
	MaxOpenInterest binary.Uint128 `json:"maxOpenInterest"`

	// sum of all user's perp quote_asset_amount in market
	// precision: QUOTE_PRECISION
	QuoteAssetAmount binary.Int128 `json:"quoteAssetAmount"`

	// sum of all long user's quote_entry_amount in market
	// precision: QUOTE_PRECISION
	QuoteEntryAmountLong binary.Int128 `json:"quoteEntryAmountLong"`

	// sum of all short user's quote_entry_amount in market
	// precision: QUOTE_PRECISION
	QuoteEntryAmountShort binary.Int128 `json:"quoteEntryAmountShort"`

	// sum of all long user's quote_break_even_amount in market
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmountLong binary.Int128 `json:"quoteBreakEvenAmountLong"`

	// sum of all short user's quote_break_even_amount in market
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmountShort binary.Int128 `json:"quoteBreakEvenAmountShort"`

	// total user lp shares of sqrt_k (protocol owned liquidity = sqrt_k - last_funding_rate)
	// precision: AMM_RESERVE_PRECISION
	UserLpShares binary.Uint128 `json:"userLpShares"`

	// last funding rate in this perp market (unit is quote per base)
	// precision: FUNDING_RATE_PRECISION
	LastFundingRate int64 `json:"lastFundingRate"`

	// last funding rate for longs in this perp market (unit is quote per base)
	// precision: FUNDING_RATE_PRECISION
	LastFundingRateLong int64 `json:"lastFundingRateLong"`

	// last funding rate for shorts in this perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	LastFundingRateShort int64 `json:"lastFundingRateShort"`

	// estimate of last 24h of funding rate perp market (unit is quote per base)
	// precision: QUOTE_PRECISION
	Last24HAvgFundingRate int64 `json:"last24HAvgFundingRate"`

	// total fees collected by this perp market
	// precision: QUOTE_PRECISION
	TotalFee binary.Int128 `json:"totalFee"`

	// total fees collected by the vAMM's bid/ask spread
	// precision: QUOTE_PRECISION
	TotalMmFee binary.Int128 `json:"totalMmFee"`

	// total fees collected by exchange fee schedule
	// precision: QUOTE_PRECISION
	TotalExchangeFee binary.Uint128 `json:"totalExchangeFee"`

	// total fees minus any recognized upnl and pool withdraws
	// precision: QUOTE_PRECISION
	TotalFeeMinusDistributions binary.Int128 `json:"totalFeeMinusDistributions"`

	// sum of all fees from fee pool withdrawn to revenue pool
	// precision: QUOTE_PRECISION
	TotalFeeWithdrawn binary.Uint128 `json:"totalFeeWithdrawn"`

	// all fees collected by market for liquidations
	// precision: QUOTE_PRECISION
	TotalLiquidationFee binary.Uint128 `json:"totalLiquidationFee"`

	// accumulated funding rate for longs since inception in market
	CumulativeFundingRateLong binary.Int128 `json:"cumulativeFundingRateLong"`

	// accumulated funding rate for shorts since inception in market
	CumulativeFundingRateShort binary.Int128 `json:"cumulativeFundingRateShort"`

	// accumulated social loss paid by users since inception in market
	TotalSocialLoss binary.Uint128 `json:"totalSocialLoss"`

	// transformed base_asset_reserve for users going long
	// precision: AMM_RESERVE_PRECISION
	AskBaseAssetReserve binary.Uint128 `json:"askBaseAssetReserve"`

	// transformed quote_asset_reserve for users going long
	// precision: AMM_RESERVE_PRECISION
	AskQuoteAssetReserve binary.Uint128 `json:"askQuoteAssetReserve"`

	// transformed base_asset_reserve for users going short
	// precision: AMM_RESERVE_PRECISION
	BidBaseAssetReserve binary.Uint128 `json:"bidBaseAssetReserve"`

	// transformed quote_asset_reserve for users going short
	// precision: AMM_RESERVE_PRECISION
	BidQuoteAssetReserve binary.Uint128 `json:"bidQuoteAssetReserve"`

	// the last seen oracle price partially shrunk toward the amm reserve price
	// precision: PRICE_PRECISION
	LastOracleNormalisedPrice int64 `json:"lastOracleNormalisedPrice"`

	// the gap between the oracle price and the reserve price = y * peg_multiplier / x
	LastOracleReservePriceSpreadPct int64 `json:"lastOracleReservePriceSpreadPct"`

	// average estimate of bid price over funding_period
	// precision: PRICE_PRECISION
	LastBidPriceTwap uint64 `json:"lastBidPriceTwap"`

	// average estimate of ask price over funding_period
	// precision: PRICE_PRECISION
	LastAskPriceTwap uint64 `json:"lastAskPriceTwap"`

	// average estimate of (bid+ask)/2 price over funding_period
	// precision: PRICE_PRECISION
	LastMarkPriceTwap uint64 `json:"lastMarkPriceTwap"`

	// average estimate of (bid+ask)/2 price over FIVE_MINUTES
	LastMarkPriceTwap5Min uint64 `json:"lastMarkPriceTwap5Min"`

	// the last blockchain slot the amm was updated
	LastUpdateSlot uint64 `json:"lastUpdateSlot"`

	// the pct size of the oracle confidence interval
	// precision: PERCENTAGE_PRECISION
	LastOracleConfPct uint64 `json:"lastOracleConfPct"`

	// the total_fee_minus_distribution change since the last funding update
	// precision: QUOTE_PRECISION
	NetRevenueSinceLastFunding int64 `json:"netRevenueSinceLastFunding"`

	// the last funding rate update unix_timestamp
	LastFundingRateTs int64 `json:"lastFundingRateTs"`

	// the peridocity of the funding rate updates
	FundingPeriod int64 `json:"fundingPeriod"`

	// the base step size (increment) of orders
	// precision: BASE_PRECISION
	OrderStepSize uint64 `json:"orderStepSize"`

	// the price tick size of orders
	// precision: PRICE_PRECISION
	OrderTickSize uint64 `json:"orderTickSize"`

	// the minimum base size of an order
	// precision: BASE_PRECISION
	MinOrderSize uint64 `json:"minOrderSize"`

	// the max base size a single user can have
	// precision: BASE_PRECISION
	MmOracleSlot uint64 `json:"mmOracleSlot"`

	// estimated total of volume in market
	// QUOTE_PRECISION
	Volume24H uint64 `json:"volume24H"`

	// the volume intensity of long fills against AMM
	LongIntensityVolume uint64 `json:"longIntensityVolume"`

	// the volume intensity of short fills against AMM
	ShortIntensityVolume uint64 `json:"shortIntensityVolume"`

	// the blockchain unix timestamp at the time of the last trade
	LastTradeTs int64 `json:"lastTradeTs"`

	// estimate of standard deviation of the fill (mark) prices
	// precision: PRICE_PRECISION
	MarkStd uint64 `json:"markStd"`

	// estimate of standard deviation of the oracle price at each update
	// precision: PRICE_PRECISION
	OracleStd uint64 `json:"oracleStd"`

	// the last unix_timestamp the mark twap was updated
	LastMarkPriceTwapTs int64 `json:"lastMarkPriceTwapTs"`

	// the minimum spread the AMM can quote. also used as step size for some spread logic increases.
	BaseSpread uint32 `json:"baseSpread"`

	// the maximum spread the AMM can quote
	MaxSpread uint32 `json:"maxSpread"`

	// the spread for asks vs the reserve price
	LongSpread uint32 `json:"longSpread"`

	// the spread for bids vs the reserve price
	ShortSpread uint32 `json:"shortSpread"`

	// MM oracle price
	MmOraclePrice int64 `json:"mmOraclePrice"`

	// the fraction of total available liquidity a single fill on the AMM can consume
	MaxFillReserveFraction uint16 `json:"maxFillReserveFraction"`

	// the maximum slippage a single fill on the AMM can push
	MaxSlippageRatio uint16 `json:"maxSlippageRatio"`

	// the update intensity of AMM formulaic updates (adjusting k). 0-100
	CurveUpdateIntensity uint8 `json:"curveUpdateIntensity"`

	// the jit intensity of AMM. larger intensity means larger participation in jit. 0 means no jit participation.
	// (0, 100] is intensity for protocol-owned AMM. (100, 200] is intensity for user LP-owned AMM.
	AmmJitIntensity uint8 `json:"ammJitIntensity"`

	// the oracle provider information. used to decode/scale the oracle public key
	OracleSource OracleSource `json:"oracleSource"`

	// tracks whether the oracle was considered valid at the last AMM update
	LastOracleValid bool `json:"lastOracleValid"`

	// the target value for `base_asset_amount_per_lp`, used during AMM JIT with LP split
	// precision: BASE_PRECISION
	TargetBaseAssetAmountPerLp int32 `json:"targetBaseAssetAmountPerLp"`

	// expo for unit of per_lp, base 10 (if per_lp_base=X, then per_lp unit is 10^X)
	PerLpBase int8 `json:"perLpBase"`

	// the override for the state.min_perp_auction_duration
	// 0 is no override, -1 is disable speed bump, 1-100 is literal speed bump
	TakerSpeedBumpOverride int8 `json:"takerSpeedBumpOverride"`

	// signed scale amm_spread similar to fee_adjustment logic (-100 = 0, 100 = double)
	AmmSpreadAdjustment             int8   `json:"ammSpreadAdjustment"`
	OracleSlotDelayOverride         int8   `json:"oracleSlotDelayOverride"`
	MmOracleSequenceId              uint64 `json:"mmOracleSequenceId"`
	NetUnsettledFundingPnl          int64  `json:"netUnsettledFundingPnl"`
	QuoteAssetAmountWithUnsettledLp int64  `json:"quoteAssetAmountWithUnsettledLp"`
	ReferencePriceOffset            int32  `json:"referencePriceOffset"`

	// signed scale amm_spread similar to fee_adjustment logic (-100 = 0, 100 = double)
	AmmInventorySpreadAdjustment int8     `json:"ammInventorySpreadAdjustment"`
	Padding                      [3]uint8 `json:"padding"`
	LastFundingOracleTwap        int64    `json:"lastFundingOracleTwap"`
}

func (obj Amm) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `HistoricalOracleData`:
	err = encoder.Encode(obj.HistoricalOracleData)
	if err != nil {
		return errors.NewField("HistoricalOracleData", err)
	}
	// Serialize `BaseAssetAmountPerLp`:
	err = encoder.Encode(obj.BaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountPerLp", err)
	}
	// Serialize `QuoteAssetAmountPerLp`:
	err = encoder.Encode(obj.QuoteAssetAmountPerLp)
	if err != nil {
		return errors.NewField("QuoteAssetAmountPerLp", err)
	}
	// Serialize `FeePool`:
	err = encoder.Encode(obj.FeePool)
	if err != nil {
		return errors.NewField("FeePool", err)
	}
	// Serialize `BaseAssetReserve`:
	err = encoder.Encode(obj.BaseAssetReserve)
	if err != nil {
		return errors.NewField("BaseAssetReserve", err)
	}
	// Serialize `QuoteAssetReserve`:
	err = encoder.Encode(obj.QuoteAssetReserve)
	if err != nil {
		return errors.NewField("QuoteAssetReserve", err)
	}
	// Serialize `ConcentrationCoef`:
	err = encoder.Encode(obj.ConcentrationCoef)
	if err != nil {
		return errors.NewField("ConcentrationCoef", err)
	}
	// Serialize `MinBaseAssetReserve`:
	err = encoder.Encode(obj.MinBaseAssetReserve)
	if err != nil {
		return errors.NewField("MinBaseAssetReserve", err)
	}
	// Serialize `MaxBaseAssetReserve`:
	err = encoder.Encode(obj.MaxBaseAssetReserve)
	if err != nil {
		return errors.NewField("MaxBaseAssetReserve", err)
	}
	// Serialize `SqrtK`:
	err = encoder.Encode(obj.SqrtK)
	if err != nil {
		return errors.NewField("SqrtK", err)
	}
	// Serialize `PegMultiplier`:
	err = encoder.Encode(obj.PegMultiplier)
	if err != nil {
		return errors.NewField("PegMultiplier", err)
	}
	// Serialize `TerminalQuoteAssetReserve`:
	err = encoder.Encode(obj.TerminalQuoteAssetReserve)
	if err != nil {
		return errors.NewField("TerminalQuoteAssetReserve", err)
	}
	// Serialize `BaseAssetAmountLong`:
	err = encoder.Encode(obj.BaseAssetAmountLong)
	if err != nil {
		return errors.NewField("BaseAssetAmountLong", err)
	}
	// Serialize `BaseAssetAmountShort`:
	err = encoder.Encode(obj.BaseAssetAmountShort)
	if err != nil {
		return errors.NewField("BaseAssetAmountShort", err)
	}
	// Serialize `BaseAssetAmountWithAmm`:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Serialize `BaseAssetAmountWithUnsettledLp`:
	err = encoder.Encode(obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithUnsettledLp", err)
	}
	// Serialize `MaxOpenInterest`:
	err = encoder.Encode(obj.MaxOpenInterest)
	if err != nil {
		return errors.NewField("MaxOpenInterest", err)
	}
	// Serialize `QuoteAssetAmount`:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Serialize `QuoteEntryAmountLong`:
	err = encoder.Encode(obj.QuoteEntryAmountLong)
	if err != nil {
		return errors.NewField("QuoteEntryAmountLong", err)
	}
	// Serialize `QuoteEntryAmountShort`:
	err = encoder.Encode(obj.QuoteEntryAmountShort)
	if err != nil {
		return errors.NewField("QuoteEntryAmountShort", err)
	}
	// Serialize `QuoteBreakEvenAmountLong`:
	err = encoder.Encode(obj.QuoteBreakEvenAmountLong)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmountLong", err)
	}
	// Serialize `QuoteBreakEvenAmountShort`:
	err = encoder.Encode(obj.QuoteBreakEvenAmountShort)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmountShort", err)
	}
	// Serialize `UserLpShares`:
	err = encoder.Encode(obj.UserLpShares)
	if err != nil {
		return errors.NewField("UserLpShares", err)
	}
	// Serialize `LastFundingRate`:
	err = encoder.Encode(obj.LastFundingRate)
	if err != nil {
		return errors.NewField("LastFundingRate", err)
	}
	// Serialize `LastFundingRateLong`:
	err = encoder.Encode(obj.LastFundingRateLong)
	if err != nil {
		return errors.NewField("LastFundingRateLong", err)
	}
	// Serialize `LastFundingRateShort`:
	err = encoder.Encode(obj.LastFundingRateShort)
	if err != nil {
		return errors.NewField("LastFundingRateShort", err)
	}
	// Serialize `Last24HAvgFundingRate`:
	err = encoder.Encode(obj.Last24HAvgFundingRate)
	if err != nil {
		return errors.NewField("Last24HAvgFundingRate", err)
	}
	// Serialize `TotalFee`:
	err = encoder.Encode(obj.TotalFee)
	if err != nil {
		return errors.NewField("TotalFee", err)
	}
	// Serialize `TotalMmFee`:
	err = encoder.Encode(obj.TotalMmFee)
	if err != nil {
		return errors.NewField("TotalMmFee", err)
	}
	// Serialize `TotalExchangeFee`:
	err = encoder.Encode(obj.TotalExchangeFee)
	if err != nil {
		return errors.NewField("TotalExchangeFee", err)
	}
	// Serialize `TotalFeeMinusDistributions`:
	err = encoder.Encode(obj.TotalFeeMinusDistributions)
	if err != nil {
		return errors.NewField("TotalFeeMinusDistributions", err)
	}
	// Serialize `TotalFeeWithdrawn`:
	err = encoder.Encode(obj.TotalFeeWithdrawn)
	if err != nil {
		return errors.NewField("TotalFeeWithdrawn", err)
	}
	// Serialize `TotalLiquidationFee`:
	err = encoder.Encode(obj.TotalLiquidationFee)
	if err != nil {
		return errors.NewField("TotalLiquidationFee", err)
	}
	// Serialize `CumulativeFundingRateLong`:
	err = encoder.Encode(obj.CumulativeFundingRateLong)
	if err != nil {
		return errors.NewField("CumulativeFundingRateLong", err)
	}
	// Serialize `CumulativeFundingRateShort`:
	err = encoder.Encode(obj.CumulativeFundingRateShort)
	if err != nil {
		return errors.NewField("CumulativeFundingRateShort", err)
	}
	// Serialize `TotalSocialLoss`:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Serialize `AskBaseAssetReserve`:
	err = encoder.Encode(obj.AskBaseAssetReserve)
	if err != nil {
		return errors.NewField("AskBaseAssetReserve", err)
	}
	// Serialize `AskQuoteAssetReserve`:
	err = encoder.Encode(obj.AskQuoteAssetReserve)
	if err != nil {
		return errors.NewField("AskQuoteAssetReserve", err)
	}
	// Serialize `BidBaseAssetReserve`:
	err = encoder.Encode(obj.BidBaseAssetReserve)
	if err != nil {
		return errors.NewField("BidBaseAssetReserve", err)
	}
	// Serialize `BidQuoteAssetReserve`:
	err = encoder.Encode(obj.BidQuoteAssetReserve)
	if err != nil {
		return errors.NewField("BidQuoteAssetReserve", err)
	}
	// Serialize `LastOracleNormalisedPrice`:
	err = encoder.Encode(obj.LastOracleNormalisedPrice)
	if err != nil {
		return errors.NewField("LastOracleNormalisedPrice", err)
	}
	// Serialize `LastOracleReservePriceSpreadPct`:
	err = encoder.Encode(obj.LastOracleReservePriceSpreadPct)
	if err != nil {
		return errors.NewField("LastOracleReservePriceSpreadPct", err)
	}
	// Serialize `LastBidPriceTwap`:
	err = encoder.Encode(obj.LastBidPriceTwap)
	if err != nil {
		return errors.NewField("LastBidPriceTwap", err)
	}
	// Serialize `LastAskPriceTwap`:
	err = encoder.Encode(obj.LastAskPriceTwap)
	if err != nil {
		return errors.NewField("LastAskPriceTwap", err)
	}
	// Serialize `LastMarkPriceTwap`:
	err = encoder.Encode(obj.LastMarkPriceTwap)
	if err != nil {
		return errors.NewField("LastMarkPriceTwap", err)
	}
	// Serialize `LastMarkPriceTwap5Min`:
	err = encoder.Encode(obj.LastMarkPriceTwap5Min)
	if err != nil {
		return errors.NewField("LastMarkPriceTwap5Min", err)
	}
	// Serialize `LastUpdateSlot`:
	err = encoder.Encode(obj.LastUpdateSlot)
	if err != nil {
		return errors.NewField("LastUpdateSlot", err)
	}
	// Serialize `LastOracleConfPct`:
	err = encoder.Encode(obj.LastOracleConfPct)
	if err != nil {
		return errors.NewField("LastOracleConfPct", err)
	}
	// Serialize `NetRevenueSinceLastFunding`:
	err = encoder.Encode(obj.NetRevenueSinceLastFunding)
	if err != nil {
		return errors.NewField("NetRevenueSinceLastFunding", err)
	}
	// Serialize `LastFundingRateTs`:
	err = encoder.Encode(obj.LastFundingRateTs)
	if err != nil {
		return errors.NewField("LastFundingRateTs", err)
	}
	// Serialize `FundingPeriod`:
	err = encoder.Encode(obj.FundingPeriod)
	if err != nil {
		return errors.NewField("FundingPeriod", err)
	}
	// Serialize `OrderStepSize`:
	err = encoder.Encode(obj.OrderStepSize)
	if err != nil {
		return errors.NewField("OrderStepSize", err)
	}
	// Serialize `OrderTickSize`:
	err = encoder.Encode(obj.OrderTickSize)
	if err != nil {
		return errors.NewField("OrderTickSize", err)
	}
	// Serialize `MinOrderSize`:
	err = encoder.Encode(obj.MinOrderSize)
	if err != nil {
		return errors.NewField("MinOrderSize", err)
	}
	// Serialize `MmOracleSlot`:
	err = encoder.Encode(obj.MmOracleSlot)
	if err != nil {
		return errors.NewField("MmOracleSlot", err)
	}
	// Serialize `Volume24H`:
	err = encoder.Encode(obj.Volume24H)
	if err != nil {
		return errors.NewField("Volume24H", err)
	}
	// Serialize `LongIntensityVolume`:
	err = encoder.Encode(obj.LongIntensityVolume)
	if err != nil {
		return errors.NewField("LongIntensityVolume", err)
	}
	// Serialize `ShortIntensityVolume`:
	err = encoder.Encode(obj.ShortIntensityVolume)
	if err != nil {
		return errors.NewField("ShortIntensityVolume", err)
	}
	// Serialize `LastTradeTs`:
	err = encoder.Encode(obj.LastTradeTs)
	if err != nil {
		return errors.NewField("LastTradeTs", err)
	}
	// Serialize `MarkStd`:
	err = encoder.Encode(obj.MarkStd)
	if err != nil {
		return errors.NewField("MarkStd", err)
	}
	// Serialize `OracleStd`:
	err = encoder.Encode(obj.OracleStd)
	if err != nil {
		return errors.NewField("OracleStd", err)
	}
	// Serialize `LastMarkPriceTwapTs`:
	err = encoder.Encode(obj.LastMarkPriceTwapTs)
	if err != nil {
		return errors.NewField("LastMarkPriceTwapTs", err)
	}
	// Serialize `BaseSpread`:
	err = encoder.Encode(obj.BaseSpread)
	if err != nil {
		return errors.NewField("BaseSpread", err)
	}
	// Serialize `MaxSpread`:
	err = encoder.Encode(obj.MaxSpread)
	if err != nil {
		return errors.NewField("MaxSpread", err)
	}
	// Serialize `LongSpread`:
	err = encoder.Encode(obj.LongSpread)
	if err != nil {
		return errors.NewField("LongSpread", err)
	}
	// Serialize `ShortSpread`:
	err = encoder.Encode(obj.ShortSpread)
	if err != nil {
		return errors.NewField("ShortSpread", err)
	}
	// Serialize `MmOraclePrice`:
	err = encoder.Encode(obj.MmOraclePrice)
	if err != nil {
		return errors.NewField("MmOraclePrice", err)
	}
	// Serialize `MaxFillReserveFraction`:
	err = encoder.Encode(obj.MaxFillReserveFraction)
	if err != nil {
		return errors.NewField("MaxFillReserveFraction", err)
	}
	// Serialize `MaxSlippageRatio`:
	err = encoder.Encode(obj.MaxSlippageRatio)
	if err != nil {
		return errors.NewField("MaxSlippageRatio", err)
	}
	// Serialize `CurveUpdateIntensity`:
	err = encoder.Encode(obj.CurveUpdateIntensity)
	if err != nil {
		return errors.NewField("CurveUpdateIntensity", err)
	}
	// Serialize `AmmJitIntensity`:
	err = encoder.Encode(obj.AmmJitIntensity)
	if err != nil {
		return errors.NewField("AmmJitIntensity", err)
	}
	// Serialize `OracleSource`:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return errors.NewField("OracleSource", err)
	}
	// Serialize `LastOracleValid`:
	err = encoder.Encode(obj.LastOracleValid)
	if err != nil {
		return errors.NewField("LastOracleValid", err)
	}
	// Serialize `TargetBaseAssetAmountPerLp`:
	err = encoder.Encode(obj.TargetBaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("TargetBaseAssetAmountPerLp", err)
	}
	// Serialize `PerLpBase`:
	err = encoder.Encode(obj.PerLpBase)
	if err != nil {
		return errors.NewField("PerLpBase", err)
	}
	// Serialize `TakerSpeedBumpOverride`:
	err = encoder.Encode(obj.TakerSpeedBumpOverride)
	if err != nil {
		return errors.NewField("TakerSpeedBumpOverride", err)
	}
	// Serialize `AmmSpreadAdjustment`:
	err = encoder.Encode(obj.AmmSpreadAdjustment)
	if err != nil {
		return errors.NewField("AmmSpreadAdjustment", err)
	}
	// Serialize `OracleSlotDelayOverride`:
	err = encoder.Encode(obj.OracleSlotDelayOverride)
	if err != nil {
		return errors.NewField("OracleSlotDelayOverride", err)
	}
	// Serialize `MmOracleSequenceId`:
	err = encoder.Encode(obj.MmOracleSequenceId)
	if err != nil {
		return errors.NewField("MmOracleSequenceId", err)
	}
	// Serialize `NetUnsettledFundingPnl`:
	err = encoder.Encode(obj.NetUnsettledFundingPnl)
	if err != nil {
		return errors.NewField("NetUnsettledFundingPnl", err)
	}
	// Serialize `QuoteAssetAmountWithUnsettledLp`:
	err = encoder.Encode(obj.QuoteAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("QuoteAssetAmountWithUnsettledLp", err)
	}
	// Serialize `ReferencePriceOffset`:
	err = encoder.Encode(obj.ReferencePriceOffset)
	if err != nil {
		return errors.NewField("ReferencePriceOffset", err)
	}
	// Serialize `AmmInventorySpreadAdjustment`:
	err = encoder.Encode(obj.AmmInventorySpreadAdjustment)
	if err != nil {
		return errors.NewField("AmmInventorySpreadAdjustment", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `LastFundingOracleTwap`:
	err = encoder.Encode(obj.LastFundingOracleTwap)
	if err != nil {
		return errors.NewField("LastFundingOracleTwap", err)
	}
	return nil
}

func (obj Amm) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Amm: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Amm) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `HistoricalOracleData`:
	err = decoder.Decode(&obj.HistoricalOracleData)
	if err != nil {
		return errors.NewField("HistoricalOracleData", err)
	}
	// Deserialize `BaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.BaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountPerLp", err)
	}
	// Deserialize `QuoteAssetAmountPerLp`:
	err = decoder.Decode(&obj.QuoteAssetAmountPerLp)
	if err != nil {
		return errors.NewField("QuoteAssetAmountPerLp", err)
	}
	// Deserialize `FeePool`:
	err = decoder.Decode(&obj.FeePool)
	if err != nil {
		return errors.NewField("FeePool", err)
	}
	// Deserialize `BaseAssetReserve`:
	err = decoder.Decode(&obj.BaseAssetReserve)
	if err != nil {
		return errors.NewField("BaseAssetReserve", err)
	}
	// Deserialize `QuoteAssetReserve`:
	err = decoder.Decode(&obj.QuoteAssetReserve)
	if err != nil {
		return errors.NewField("QuoteAssetReserve", err)
	}
	// Deserialize `ConcentrationCoef`:
	err = decoder.Decode(&obj.ConcentrationCoef)
	if err != nil {
		return errors.NewField("ConcentrationCoef", err)
	}
	// Deserialize `MinBaseAssetReserve`:
	err = decoder.Decode(&obj.MinBaseAssetReserve)
	if err != nil {
		return errors.NewField("MinBaseAssetReserve", err)
	}
	// Deserialize `MaxBaseAssetReserve`:
	err = decoder.Decode(&obj.MaxBaseAssetReserve)
	if err != nil {
		return errors.NewField("MaxBaseAssetReserve", err)
	}
	// Deserialize `SqrtK`:
	err = decoder.Decode(&obj.SqrtK)
	if err != nil {
		return errors.NewField("SqrtK", err)
	}
	// Deserialize `PegMultiplier`:
	err = decoder.Decode(&obj.PegMultiplier)
	if err != nil {
		return errors.NewField("PegMultiplier", err)
	}
	// Deserialize `TerminalQuoteAssetReserve`:
	err = decoder.Decode(&obj.TerminalQuoteAssetReserve)
	if err != nil {
		return errors.NewField("TerminalQuoteAssetReserve", err)
	}
	// Deserialize `BaseAssetAmountLong`:
	err = decoder.Decode(&obj.BaseAssetAmountLong)
	if err != nil {
		return errors.NewField("BaseAssetAmountLong", err)
	}
	// Deserialize `BaseAssetAmountShort`:
	err = decoder.Decode(&obj.BaseAssetAmountShort)
	if err != nil {
		return errors.NewField("BaseAssetAmountShort", err)
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Deserialize `BaseAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithUnsettledLp", err)
	}
	// Deserialize `MaxOpenInterest`:
	err = decoder.Decode(&obj.MaxOpenInterest)
	if err != nil {
		return errors.NewField("MaxOpenInterest", err)
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Deserialize `QuoteEntryAmountLong`:
	err = decoder.Decode(&obj.QuoteEntryAmountLong)
	if err != nil {
		return errors.NewField("QuoteEntryAmountLong", err)
	}
	// Deserialize `QuoteEntryAmountShort`:
	err = decoder.Decode(&obj.QuoteEntryAmountShort)
	if err != nil {
		return errors.NewField("QuoteEntryAmountShort", err)
	}
	// Deserialize `QuoteBreakEvenAmountLong`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmountLong)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmountLong", err)
	}
	// Deserialize `QuoteBreakEvenAmountShort`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmountShort)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmountShort", err)
	}
	// Deserialize `UserLpShares`:
	err = decoder.Decode(&obj.UserLpShares)
	if err != nil {
		return errors.NewField("UserLpShares", err)
	}
	// Deserialize `LastFundingRate`:
	err = decoder.Decode(&obj.LastFundingRate)
	if err != nil {
		return errors.NewField("LastFundingRate", err)
	}
	// Deserialize `LastFundingRateLong`:
	err = decoder.Decode(&obj.LastFundingRateLong)
	if err != nil {
		return errors.NewField("LastFundingRateLong", err)
	}
	// Deserialize `LastFundingRateShort`:
	err = decoder.Decode(&obj.LastFundingRateShort)
	if err != nil {
		return errors.NewField("LastFundingRateShort", err)
	}
	// Deserialize `Last24HAvgFundingRate`:
	err = decoder.Decode(&obj.Last24HAvgFundingRate)
	if err != nil {
		return errors.NewField("Last24HAvgFundingRate", err)
	}
	// Deserialize `TotalFee`:
	err = decoder.Decode(&obj.TotalFee)
	if err != nil {
		return errors.NewField("TotalFee", err)
	}
	// Deserialize `TotalMmFee`:
	err = decoder.Decode(&obj.TotalMmFee)
	if err != nil {
		return errors.NewField("TotalMmFee", err)
	}
	// Deserialize `TotalExchangeFee`:
	err = decoder.Decode(&obj.TotalExchangeFee)
	if err != nil {
		return errors.NewField("TotalExchangeFee", err)
	}
	// Deserialize `TotalFeeMinusDistributions`:
	err = decoder.Decode(&obj.TotalFeeMinusDistributions)
	if err != nil {
		return errors.NewField("TotalFeeMinusDistributions", err)
	}
	// Deserialize `TotalFeeWithdrawn`:
	err = decoder.Decode(&obj.TotalFeeWithdrawn)
	if err != nil {
		return errors.NewField("TotalFeeWithdrawn", err)
	}
	// Deserialize `TotalLiquidationFee`:
	err = decoder.Decode(&obj.TotalLiquidationFee)
	if err != nil {
		return errors.NewField("TotalLiquidationFee", err)
	}
	// Deserialize `CumulativeFundingRateLong`:
	err = decoder.Decode(&obj.CumulativeFundingRateLong)
	if err != nil {
		return errors.NewField("CumulativeFundingRateLong", err)
	}
	// Deserialize `CumulativeFundingRateShort`:
	err = decoder.Decode(&obj.CumulativeFundingRateShort)
	if err != nil {
		return errors.NewField("CumulativeFundingRateShort", err)
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Deserialize `AskBaseAssetReserve`:
	err = decoder.Decode(&obj.AskBaseAssetReserve)
	if err != nil {
		return errors.NewField("AskBaseAssetReserve", err)
	}
	// Deserialize `AskQuoteAssetReserve`:
	err = decoder.Decode(&obj.AskQuoteAssetReserve)
	if err != nil {
		return errors.NewField("AskQuoteAssetReserve", err)
	}
	// Deserialize `BidBaseAssetReserve`:
	err = decoder.Decode(&obj.BidBaseAssetReserve)
	if err != nil {
		return errors.NewField("BidBaseAssetReserve", err)
	}
	// Deserialize `BidQuoteAssetReserve`:
	err = decoder.Decode(&obj.BidQuoteAssetReserve)
	if err != nil {
		return errors.NewField("BidQuoteAssetReserve", err)
	}
	// Deserialize `LastOracleNormalisedPrice`:
	err = decoder.Decode(&obj.LastOracleNormalisedPrice)
	if err != nil {
		return errors.NewField("LastOracleNormalisedPrice", err)
	}
	// Deserialize `LastOracleReservePriceSpreadPct`:
	err = decoder.Decode(&obj.LastOracleReservePriceSpreadPct)
	if err != nil {
		return errors.NewField("LastOracleReservePriceSpreadPct", err)
	}
	// Deserialize `LastBidPriceTwap`:
	err = decoder.Decode(&obj.LastBidPriceTwap)
	if err != nil {
		return errors.NewField("LastBidPriceTwap", err)
	}
	// Deserialize `LastAskPriceTwap`:
	err = decoder.Decode(&obj.LastAskPriceTwap)
	if err != nil {
		return errors.NewField("LastAskPriceTwap", err)
	}
	// Deserialize `LastMarkPriceTwap`:
	err = decoder.Decode(&obj.LastMarkPriceTwap)
	if err != nil {
		return errors.NewField("LastMarkPriceTwap", err)
	}
	// Deserialize `LastMarkPriceTwap5Min`:
	err = decoder.Decode(&obj.LastMarkPriceTwap5Min)
	if err != nil {
		return errors.NewField("LastMarkPriceTwap5Min", err)
	}
	// Deserialize `LastUpdateSlot`:
	err = decoder.Decode(&obj.LastUpdateSlot)
	if err != nil {
		return errors.NewField("LastUpdateSlot", err)
	}
	// Deserialize `LastOracleConfPct`:
	err = decoder.Decode(&obj.LastOracleConfPct)
	if err != nil {
		return errors.NewField("LastOracleConfPct", err)
	}
	// Deserialize `NetRevenueSinceLastFunding`:
	err = decoder.Decode(&obj.NetRevenueSinceLastFunding)
	if err != nil {
		return errors.NewField("NetRevenueSinceLastFunding", err)
	}
	// Deserialize `LastFundingRateTs`:
	err = decoder.Decode(&obj.LastFundingRateTs)
	if err != nil {
		return errors.NewField("LastFundingRateTs", err)
	}
	// Deserialize `FundingPeriod`:
	err = decoder.Decode(&obj.FundingPeriod)
	if err != nil {
		return errors.NewField("FundingPeriod", err)
	}
	// Deserialize `OrderStepSize`:
	err = decoder.Decode(&obj.OrderStepSize)
	if err != nil {
		return errors.NewField("OrderStepSize", err)
	}
	// Deserialize `OrderTickSize`:
	err = decoder.Decode(&obj.OrderTickSize)
	if err != nil {
		return errors.NewField("OrderTickSize", err)
	}
	// Deserialize `MinOrderSize`:
	err = decoder.Decode(&obj.MinOrderSize)
	if err != nil {
		return errors.NewField("MinOrderSize", err)
	}
	// Deserialize `MmOracleSlot`:
	err = decoder.Decode(&obj.MmOracleSlot)
	if err != nil {
		return errors.NewField("MmOracleSlot", err)
	}
	// Deserialize `Volume24H`:
	err = decoder.Decode(&obj.Volume24H)
	if err != nil {
		return errors.NewField("Volume24H", err)
	}
	// Deserialize `LongIntensityVolume`:
	err = decoder.Decode(&obj.LongIntensityVolume)
	if err != nil {
		return errors.NewField("LongIntensityVolume", err)
	}
	// Deserialize `ShortIntensityVolume`:
	err = decoder.Decode(&obj.ShortIntensityVolume)
	if err != nil {
		return errors.NewField("ShortIntensityVolume", err)
	}
	// Deserialize `LastTradeTs`:
	err = decoder.Decode(&obj.LastTradeTs)
	if err != nil {
		return errors.NewField("LastTradeTs", err)
	}
	// Deserialize `MarkStd`:
	err = decoder.Decode(&obj.MarkStd)
	if err != nil {
		return errors.NewField("MarkStd", err)
	}
	// Deserialize `OracleStd`:
	err = decoder.Decode(&obj.OracleStd)
	if err != nil {
		return errors.NewField("OracleStd", err)
	}
	// Deserialize `LastMarkPriceTwapTs`:
	err = decoder.Decode(&obj.LastMarkPriceTwapTs)
	if err != nil {
		return errors.NewField("LastMarkPriceTwapTs", err)
	}
	// Deserialize `BaseSpread`:
	err = decoder.Decode(&obj.BaseSpread)
	if err != nil {
		return errors.NewField("BaseSpread", err)
	}
	// Deserialize `MaxSpread`:
	err = decoder.Decode(&obj.MaxSpread)
	if err != nil {
		return errors.NewField("MaxSpread", err)
	}
	// Deserialize `LongSpread`:
	err = decoder.Decode(&obj.LongSpread)
	if err != nil {
		return errors.NewField("LongSpread", err)
	}
	// Deserialize `ShortSpread`:
	err = decoder.Decode(&obj.ShortSpread)
	if err != nil {
		return errors.NewField("ShortSpread", err)
	}
	// Deserialize `MmOraclePrice`:
	err = decoder.Decode(&obj.MmOraclePrice)
	if err != nil {
		return errors.NewField("MmOraclePrice", err)
	}
	// Deserialize `MaxFillReserveFraction`:
	err = decoder.Decode(&obj.MaxFillReserveFraction)
	if err != nil {
		return errors.NewField("MaxFillReserveFraction", err)
	}
	// Deserialize `MaxSlippageRatio`:
	err = decoder.Decode(&obj.MaxSlippageRatio)
	if err != nil {
		return errors.NewField("MaxSlippageRatio", err)
	}
	// Deserialize `CurveUpdateIntensity`:
	err = decoder.Decode(&obj.CurveUpdateIntensity)
	if err != nil {
		return errors.NewField("CurveUpdateIntensity", err)
	}
	// Deserialize `AmmJitIntensity`:
	err = decoder.Decode(&obj.AmmJitIntensity)
	if err != nil {
		return errors.NewField("AmmJitIntensity", err)
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return errors.NewField("OracleSource", err)
	}
	// Deserialize `LastOracleValid`:
	err = decoder.Decode(&obj.LastOracleValid)
	if err != nil {
		return errors.NewField("LastOracleValid", err)
	}
	// Deserialize `TargetBaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.TargetBaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("TargetBaseAssetAmountPerLp", err)
	}
	// Deserialize `PerLpBase`:
	err = decoder.Decode(&obj.PerLpBase)
	if err != nil {
		return errors.NewField("PerLpBase", err)
	}
	// Deserialize `TakerSpeedBumpOverride`:
	err = decoder.Decode(&obj.TakerSpeedBumpOverride)
	if err != nil {
		return errors.NewField("TakerSpeedBumpOverride", err)
	}
	// Deserialize `AmmSpreadAdjustment`:
	err = decoder.Decode(&obj.AmmSpreadAdjustment)
	if err != nil {
		return errors.NewField("AmmSpreadAdjustment", err)
	}
	// Deserialize `OracleSlotDelayOverride`:
	err = decoder.Decode(&obj.OracleSlotDelayOverride)
	if err != nil {
		return errors.NewField("OracleSlotDelayOverride", err)
	}
	// Deserialize `MmOracleSequenceId`:
	err = decoder.Decode(&obj.MmOracleSequenceId)
	if err != nil {
		return errors.NewField("MmOracleSequenceId", err)
	}
	// Deserialize `NetUnsettledFundingPnl`:
	err = decoder.Decode(&obj.NetUnsettledFundingPnl)
	if err != nil {
		return errors.NewField("NetUnsettledFundingPnl", err)
	}
	// Deserialize `QuoteAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.QuoteAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("QuoteAssetAmountWithUnsettledLp", err)
	}
	// Deserialize `ReferencePriceOffset`:
	err = decoder.Decode(&obj.ReferencePriceOffset)
	if err != nil {
		return errors.NewField("ReferencePriceOffset", err)
	}
	// Deserialize `AmmInventorySpreadAdjustment`:
	err = decoder.Decode(&obj.AmmInventorySpreadAdjustment)
	if err != nil {
		return errors.NewField("AmmInventorySpreadAdjustment", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `LastFundingOracleTwap`:
	err = decoder.Decode(&obj.LastFundingOracleTwap)
	if err != nil {
		return errors.NewField("LastFundingOracleTwap", err)
	}
	return nil
}

func (obj *Amm) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Amm: %w", err)
	}
	return nil
}

func UnmarshalAmm(buf []byte) (*Amm, error) {
	obj := new(Amm)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgOrderId struct {
	Uuid    [8]uint8 `json:"uuid"`
	MaxSlot uint64   `json:"maxSlot"`
	OrderId uint32   `json:"orderId"`
	Padding uint32   `json:"padding"`
}

func (obj SignedMsgOrderId) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Uuid`:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Serialize `MaxSlot`:
	err = encoder.Encode(obj.MaxSlot)
	if err != nil {
		return errors.NewField("MaxSlot", err)
	}
	// Serialize `OrderId`:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return errors.NewField("OrderId", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj SignedMsgOrderId) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgOrderId: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgOrderId) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return errors.NewField("Uuid", err)
	}
	// Deserialize `MaxSlot`:
	err = decoder.Decode(&obj.MaxSlot)
	if err != nil {
		return errors.NewField("MaxSlot", err)
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return errors.NewField("OrderId", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *SignedMsgOrderId) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgOrderId: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgOrderId(buf []byte) (*SignedMsgOrderId, error) {
	obj := new(SignedMsgOrderId)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgUserOrdersFixed struct {
	UserPubkey solanago.PublicKey `json:"userPubkey"`
	Padding    uint32             `json:"padding"`
	Len        uint32             `json:"len"`
}

func (obj SignedMsgUserOrdersFixed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `UserPubkey`:
	err = encoder.Encode(obj.UserPubkey)
	if err != nil {
		return errors.NewField("UserPubkey", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Len`:
	err = encoder.Encode(obj.Len)
	if err != nil {
		return errors.NewField("Len", err)
	}
	return nil
}

func (obj SignedMsgUserOrdersFixed) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgUserOrdersFixed: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgUserOrdersFixed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `UserPubkey`:
	err = decoder.Decode(&obj.UserPubkey)
	if err != nil {
		return errors.NewField("UserPubkey", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Len`:
	err = decoder.Decode(&obj.Len)
	if err != nil {
		return errors.NewField("Len", err)
	}
	return nil
}

func (obj *SignedMsgUserOrdersFixed) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgUserOrdersFixed: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgUserOrdersFixed(buf []byte) (*SignedMsgUserOrdersFixed, error) {
	obj := new(SignedMsgUserOrdersFixed)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceFund struct {
	Vault               solanago.PublicKey `json:"vault"`
	TotalShares         binary.Uint128     `json:"totalShares"`
	UserShares          binary.Uint128     `json:"userShares"`
	SharesBase          binary.Uint128     `json:"sharesBase"`
	UnstakingPeriod     int64              `json:"unstakingPeriod"`
	LastRevenueSettleTs int64              `json:"lastRevenueSettleTs"`
	RevenueSettlePeriod int64              `json:"revenueSettlePeriod"`
	TotalFactor         uint32             `json:"totalFactor"`
	UserFactor          uint32             `json:"userFactor"`
}

func (obj InsuranceFund) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Vault`:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Serialize `TotalShares`:
	err = encoder.Encode(obj.TotalShares)
	if err != nil {
		return errors.NewField("TotalShares", err)
	}
	// Serialize `UserShares`:
	err = encoder.Encode(obj.UserShares)
	if err != nil {
		return errors.NewField("UserShares", err)
	}
	// Serialize `SharesBase`:
	err = encoder.Encode(obj.SharesBase)
	if err != nil {
		return errors.NewField("SharesBase", err)
	}
	// Serialize `UnstakingPeriod`:
	err = encoder.Encode(obj.UnstakingPeriod)
	if err != nil {
		return errors.NewField("UnstakingPeriod", err)
	}
	// Serialize `LastRevenueSettleTs`:
	err = encoder.Encode(obj.LastRevenueSettleTs)
	if err != nil {
		return errors.NewField("LastRevenueSettleTs", err)
	}
	// Serialize `RevenueSettlePeriod`:
	err = encoder.Encode(obj.RevenueSettlePeriod)
	if err != nil {
		return errors.NewField("RevenueSettlePeriod", err)
	}
	// Serialize `TotalFactor`:
	err = encoder.Encode(obj.TotalFactor)
	if err != nil {
		return errors.NewField("TotalFactor", err)
	}
	// Serialize `UserFactor`:
	err = encoder.Encode(obj.UserFactor)
	if err != nil {
		return errors.NewField("UserFactor", err)
	}
	return nil
}

func (obj InsuranceFund) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceFund: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceFund) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Deserialize `TotalShares`:
	err = decoder.Decode(&obj.TotalShares)
	if err != nil {
		return errors.NewField("TotalShares", err)
	}
	// Deserialize `UserShares`:
	err = decoder.Decode(&obj.UserShares)
	if err != nil {
		return errors.NewField("UserShares", err)
	}
	// Deserialize `SharesBase`:
	err = decoder.Decode(&obj.SharesBase)
	if err != nil {
		return errors.NewField("SharesBase", err)
	}
	// Deserialize `UnstakingPeriod`:
	err = decoder.Decode(&obj.UnstakingPeriod)
	if err != nil {
		return errors.NewField("UnstakingPeriod", err)
	}
	// Deserialize `LastRevenueSettleTs`:
	err = decoder.Decode(&obj.LastRevenueSettleTs)
	if err != nil {
		return errors.NewField("LastRevenueSettleTs", err)
	}
	// Deserialize `RevenueSettlePeriod`:
	err = decoder.Decode(&obj.RevenueSettlePeriod)
	if err != nil {
		return errors.NewField("RevenueSettlePeriod", err)
	}
	// Deserialize `TotalFactor`:
	err = decoder.Decode(&obj.TotalFactor)
	if err != nil {
		return errors.NewField("TotalFactor", err)
	}
	// Deserialize `UserFactor`:
	err = decoder.Decode(&obj.UserFactor)
	if err != nil {
		return errors.NewField("UserFactor", err)
	}
	return nil
}

func (obj *InsuranceFund) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceFund: %w", err)
	}
	return nil
}

func UnmarshalInsuranceFund(buf []byte) (*InsuranceFund, error) {
	obj := new(InsuranceFund)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OracleGuardRails struct {
	PriceDivergence PriceDivergenceGuardRails `json:"priceDivergence"`
	Validity        ValidityGuardRails        `json:"validity"`
}

func (obj OracleGuardRails) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PriceDivergence`:
	err = encoder.Encode(obj.PriceDivergence)
	if err != nil {
		return errors.NewField("PriceDivergence", err)
	}
	// Serialize `Validity`:
	err = encoder.Encode(obj.Validity)
	if err != nil {
		return errors.NewField("Validity", err)
	}
	return nil
}

func (obj OracleGuardRails) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OracleGuardRails: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OracleGuardRails) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PriceDivergence`:
	err = decoder.Decode(&obj.PriceDivergence)
	if err != nil {
		return errors.NewField("PriceDivergence", err)
	}
	// Deserialize `Validity`:
	err = decoder.Decode(&obj.Validity)
	if err != nil {
		return errors.NewField("Validity", err)
	}
	return nil
}

func (obj *OracleGuardRails) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OracleGuardRails: %w", err)
	}
	return nil
}

func UnmarshalOracleGuardRails(buf []byte) (*OracleGuardRails, error) {
	obj := new(OracleGuardRails)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PriceDivergenceGuardRails struct {
	MarkOraclePercentDivergence     uint64 `json:"markOraclePercentDivergence"`
	OracleTwap5MinPercentDivergence uint64 `json:"oracleTwap5MinPercentDivergence"`
}

func (obj PriceDivergenceGuardRails) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarkOraclePercentDivergence`:
	err = encoder.Encode(obj.MarkOraclePercentDivergence)
	if err != nil {
		return errors.NewField("MarkOraclePercentDivergence", err)
	}
	// Serialize `OracleTwap5MinPercentDivergence`:
	err = encoder.Encode(obj.OracleTwap5MinPercentDivergence)
	if err != nil {
		return errors.NewField("OracleTwap5MinPercentDivergence", err)
	}
	return nil
}

func (obj PriceDivergenceGuardRails) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PriceDivergenceGuardRails: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PriceDivergenceGuardRails) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarkOraclePercentDivergence`:
	err = decoder.Decode(&obj.MarkOraclePercentDivergence)
	if err != nil {
		return errors.NewField("MarkOraclePercentDivergence", err)
	}
	// Deserialize `OracleTwap5MinPercentDivergence`:
	err = decoder.Decode(&obj.OracleTwap5MinPercentDivergence)
	if err != nil {
		return errors.NewField("OracleTwap5MinPercentDivergence", err)
	}
	return nil
}

func (obj *PriceDivergenceGuardRails) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PriceDivergenceGuardRails: %w", err)
	}
	return nil
}

func UnmarshalPriceDivergenceGuardRails(buf []byte) (*PriceDivergenceGuardRails, error) {
	obj := new(PriceDivergenceGuardRails)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ValidityGuardRails struct {
	SlotsBeforeStaleForAmm    int64  `json:"slotsBeforeStaleForAmm"`
	SlotsBeforeStaleForMargin int64  `json:"slotsBeforeStaleForMargin"`
	ConfidenceIntervalMaxSize uint64 `json:"confidenceIntervalMaxSize"`
	TooVolatileRatio          int64  `json:"tooVolatileRatio"`
}

func (obj ValidityGuardRails) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SlotsBeforeStaleForAmm`:
	err = encoder.Encode(obj.SlotsBeforeStaleForAmm)
	if err != nil {
		return errors.NewField("SlotsBeforeStaleForAmm", err)
	}
	// Serialize `SlotsBeforeStaleForMargin`:
	err = encoder.Encode(obj.SlotsBeforeStaleForMargin)
	if err != nil {
		return errors.NewField("SlotsBeforeStaleForMargin", err)
	}
	// Serialize `ConfidenceIntervalMaxSize`:
	err = encoder.Encode(obj.ConfidenceIntervalMaxSize)
	if err != nil {
		return errors.NewField("ConfidenceIntervalMaxSize", err)
	}
	// Serialize `TooVolatileRatio`:
	err = encoder.Encode(obj.TooVolatileRatio)
	if err != nil {
		return errors.NewField("TooVolatileRatio", err)
	}
	return nil
}

func (obj ValidityGuardRails) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ValidityGuardRails: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ValidityGuardRails) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SlotsBeforeStaleForAmm`:
	err = decoder.Decode(&obj.SlotsBeforeStaleForAmm)
	if err != nil {
		return errors.NewField("SlotsBeforeStaleForAmm", err)
	}
	// Deserialize `SlotsBeforeStaleForMargin`:
	err = decoder.Decode(&obj.SlotsBeforeStaleForMargin)
	if err != nil {
		return errors.NewField("SlotsBeforeStaleForMargin", err)
	}
	// Deserialize `ConfidenceIntervalMaxSize`:
	err = decoder.Decode(&obj.ConfidenceIntervalMaxSize)
	if err != nil {
		return errors.NewField("ConfidenceIntervalMaxSize", err)
	}
	// Deserialize `TooVolatileRatio`:
	err = decoder.Decode(&obj.TooVolatileRatio)
	if err != nil {
		return errors.NewField("TooVolatileRatio", err)
	}
	return nil
}

func (obj *ValidityGuardRails) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ValidityGuardRails: %w", err)
	}
	return nil
}

func UnmarshalValidityGuardRails(buf []byte) (*ValidityGuardRails, error) {
	obj := new(ValidityGuardRails)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FeeStructure struct {
	FeeTiers                      [10]FeeTier                `json:"feeTiers"`
	FillerRewardStructure         OrderFillerRewardStructure `json:"fillerRewardStructure"`
	ReferrerRewardEpochUpperBound uint64                     `json:"referrerRewardEpochUpperBound"`
	FlatFillerFee                 uint64                     `json:"flatFillerFee"`
}

func (obj FeeStructure) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeeTiers`:
	err = encoder.Encode(obj.FeeTiers)
	if err != nil {
		return errors.NewField("FeeTiers", err)
	}
	// Serialize `FillerRewardStructure`:
	err = encoder.Encode(obj.FillerRewardStructure)
	if err != nil {
		return errors.NewField("FillerRewardStructure", err)
	}
	// Serialize `ReferrerRewardEpochUpperBound`:
	err = encoder.Encode(obj.ReferrerRewardEpochUpperBound)
	if err != nil {
		return errors.NewField("ReferrerRewardEpochUpperBound", err)
	}
	// Serialize `FlatFillerFee`:
	err = encoder.Encode(obj.FlatFillerFee)
	if err != nil {
		return errors.NewField("FlatFillerFee", err)
	}
	return nil
}

func (obj FeeStructure) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FeeStructure: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FeeStructure) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeTiers`:
	err = decoder.Decode(&obj.FeeTiers)
	if err != nil {
		return errors.NewField("FeeTiers", err)
	}
	// Deserialize `FillerRewardStructure`:
	err = decoder.Decode(&obj.FillerRewardStructure)
	if err != nil {
		return errors.NewField("FillerRewardStructure", err)
	}
	// Deserialize `ReferrerRewardEpochUpperBound`:
	err = decoder.Decode(&obj.ReferrerRewardEpochUpperBound)
	if err != nil {
		return errors.NewField("ReferrerRewardEpochUpperBound", err)
	}
	// Deserialize `FlatFillerFee`:
	err = decoder.Decode(&obj.FlatFillerFee)
	if err != nil {
		return errors.NewField("FlatFillerFee", err)
	}
	return nil
}

func (obj *FeeStructure) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FeeStructure: %w", err)
	}
	return nil
}

func UnmarshalFeeStructure(buf []byte) (*FeeStructure, error) {
	obj := new(FeeStructure)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FeeTier struct {
	FeeNumerator              uint32 `json:"feeNumerator"`
	FeeDenominator            uint32 `json:"feeDenominator"`
	MakerRebateNumerator      uint32 `json:"makerRebateNumerator"`
	MakerRebateDenominator    uint32 `json:"makerRebateDenominator"`
	ReferrerRewardNumerator   uint32 `json:"referrerRewardNumerator"`
	ReferrerRewardDenominator uint32 `json:"referrerRewardDenominator"`
	RefereeFeeNumerator       uint32 `json:"refereeFeeNumerator"`
	RefereeFeeDenominator     uint32 `json:"refereeFeeDenominator"`
}

func (obj FeeTier) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeeNumerator`:
	err = encoder.Encode(obj.FeeNumerator)
	if err != nil {
		return errors.NewField("FeeNumerator", err)
	}
	// Serialize `FeeDenominator`:
	err = encoder.Encode(obj.FeeDenominator)
	if err != nil {
		return errors.NewField("FeeDenominator", err)
	}
	// Serialize `MakerRebateNumerator`:
	err = encoder.Encode(obj.MakerRebateNumerator)
	if err != nil {
		return errors.NewField("MakerRebateNumerator", err)
	}
	// Serialize `MakerRebateDenominator`:
	err = encoder.Encode(obj.MakerRebateDenominator)
	if err != nil {
		return errors.NewField("MakerRebateDenominator", err)
	}
	// Serialize `ReferrerRewardNumerator`:
	err = encoder.Encode(obj.ReferrerRewardNumerator)
	if err != nil {
		return errors.NewField("ReferrerRewardNumerator", err)
	}
	// Serialize `ReferrerRewardDenominator`:
	err = encoder.Encode(obj.ReferrerRewardDenominator)
	if err != nil {
		return errors.NewField("ReferrerRewardDenominator", err)
	}
	// Serialize `RefereeFeeNumerator`:
	err = encoder.Encode(obj.RefereeFeeNumerator)
	if err != nil {
		return errors.NewField("RefereeFeeNumerator", err)
	}
	// Serialize `RefereeFeeDenominator`:
	err = encoder.Encode(obj.RefereeFeeDenominator)
	if err != nil {
		return errors.NewField("RefereeFeeDenominator", err)
	}
	return nil
}

func (obj FeeTier) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FeeTier: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FeeTier) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeeNumerator`:
	err = decoder.Decode(&obj.FeeNumerator)
	if err != nil {
		return errors.NewField("FeeNumerator", err)
	}
	// Deserialize `FeeDenominator`:
	err = decoder.Decode(&obj.FeeDenominator)
	if err != nil {
		return errors.NewField("FeeDenominator", err)
	}
	// Deserialize `MakerRebateNumerator`:
	err = decoder.Decode(&obj.MakerRebateNumerator)
	if err != nil {
		return errors.NewField("MakerRebateNumerator", err)
	}
	// Deserialize `MakerRebateDenominator`:
	err = decoder.Decode(&obj.MakerRebateDenominator)
	if err != nil {
		return errors.NewField("MakerRebateDenominator", err)
	}
	// Deserialize `ReferrerRewardNumerator`:
	err = decoder.Decode(&obj.ReferrerRewardNumerator)
	if err != nil {
		return errors.NewField("ReferrerRewardNumerator", err)
	}
	// Deserialize `ReferrerRewardDenominator`:
	err = decoder.Decode(&obj.ReferrerRewardDenominator)
	if err != nil {
		return errors.NewField("ReferrerRewardDenominator", err)
	}
	// Deserialize `RefereeFeeNumerator`:
	err = decoder.Decode(&obj.RefereeFeeNumerator)
	if err != nil {
		return errors.NewField("RefereeFeeNumerator", err)
	}
	// Deserialize `RefereeFeeDenominator`:
	err = decoder.Decode(&obj.RefereeFeeDenominator)
	if err != nil {
		return errors.NewField("RefereeFeeDenominator", err)
	}
	return nil
}

func (obj *FeeTier) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FeeTier: %w", err)
	}
	return nil
}

func UnmarshalFeeTier(buf []byte) (*FeeTier, error) {
	obj := new(FeeTier)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OrderFillerRewardStructure struct {
	RewardNumerator           uint32         `json:"rewardNumerator"`
	RewardDenominator         uint32         `json:"rewardDenominator"`
	TimeBasedRewardLowerBound binary.Uint128 `json:"timeBasedRewardLowerBound"`
}

func (obj OrderFillerRewardStructure) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RewardNumerator`:
	err = encoder.Encode(obj.RewardNumerator)
	if err != nil {
		return errors.NewField("RewardNumerator", err)
	}
	// Serialize `RewardDenominator`:
	err = encoder.Encode(obj.RewardDenominator)
	if err != nil {
		return errors.NewField("RewardDenominator", err)
	}
	// Serialize `TimeBasedRewardLowerBound`:
	err = encoder.Encode(obj.TimeBasedRewardLowerBound)
	if err != nil {
		return errors.NewField("TimeBasedRewardLowerBound", err)
	}
	return nil
}

func (obj OrderFillerRewardStructure) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OrderFillerRewardStructure: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OrderFillerRewardStructure) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RewardNumerator`:
	err = decoder.Decode(&obj.RewardNumerator)
	if err != nil {
		return errors.NewField("RewardNumerator", err)
	}
	// Deserialize `RewardDenominator`:
	err = decoder.Decode(&obj.RewardDenominator)
	if err != nil {
		return errors.NewField("RewardDenominator", err)
	}
	// Deserialize `TimeBasedRewardLowerBound`:
	err = decoder.Decode(&obj.TimeBasedRewardLowerBound)
	if err != nil {
		return errors.NewField("TimeBasedRewardLowerBound", err)
	}
	return nil
}

func (obj *OrderFillerRewardStructure) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OrderFillerRewardStructure: %w", err)
	}
	return nil
}

func UnmarshalOrderFillerRewardStructure(buf []byte) (*OrderFillerRewardStructure, error) {
	obj := new(OrderFillerRewardStructure)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserFees struct {
	// Total taker fee paid
	// precision: QUOTE_PRECISION
	TotalFeePaid uint64 `json:"totalFeePaid"`

	// Total maker fee rebate
	// precision: QUOTE_PRECISION
	TotalFeeRebate uint64 `json:"totalFeeRebate"`

	// Total discount from holding token
	// precision: QUOTE_PRECISION
	TotalTokenDiscount uint64 `json:"totalTokenDiscount"`

	// Total discount from being referred
	// precision: QUOTE_PRECISION
	TotalRefereeDiscount uint64 `json:"totalRefereeDiscount"`

	// Total reward to referrer
	// precision: QUOTE_PRECISION
	TotalReferrerReward uint64 `json:"totalReferrerReward"`

	// Total reward to referrer this epoch
	// precision: QUOTE_PRECISION
	CurrentEpochReferrerReward uint64 `json:"currentEpochReferrerReward"`
}

func (obj UserFees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalFeePaid`:
	err = encoder.Encode(obj.TotalFeePaid)
	if err != nil {
		return errors.NewField("TotalFeePaid", err)
	}
	// Serialize `TotalFeeRebate`:
	err = encoder.Encode(obj.TotalFeeRebate)
	if err != nil {
		return errors.NewField("TotalFeeRebate", err)
	}
	// Serialize `TotalTokenDiscount`:
	err = encoder.Encode(obj.TotalTokenDiscount)
	if err != nil {
		return errors.NewField("TotalTokenDiscount", err)
	}
	// Serialize `TotalRefereeDiscount`:
	err = encoder.Encode(obj.TotalRefereeDiscount)
	if err != nil {
		return errors.NewField("TotalRefereeDiscount", err)
	}
	// Serialize `TotalReferrerReward`:
	err = encoder.Encode(obj.TotalReferrerReward)
	if err != nil {
		return errors.NewField("TotalReferrerReward", err)
	}
	// Serialize `CurrentEpochReferrerReward`:
	err = encoder.Encode(obj.CurrentEpochReferrerReward)
	if err != nil {
		return errors.NewField("CurrentEpochReferrerReward", err)
	}
	return nil
}

func (obj UserFees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserFees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserFees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalFeePaid`:
	err = decoder.Decode(&obj.TotalFeePaid)
	if err != nil {
		return errors.NewField("TotalFeePaid", err)
	}
	// Deserialize `TotalFeeRebate`:
	err = decoder.Decode(&obj.TotalFeeRebate)
	if err != nil {
		return errors.NewField("TotalFeeRebate", err)
	}
	// Deserialize `TotalTokenDiscount`:
	err = decoder.Decode(&obj.TotalTokenDiscount)
	if err != nil {
		return errors.NewField("TotalTokenDiscount", err)
	}
	// Deserialize `TotalRefereeDiscount`:
	err = decoder.Decode(&obj.TotalRefereeDiscount)
	if err != nil {
		return errors.NewField("TotalRefereeDiscount", err)
	}
	// Deserialize `TotalReferrerReward`:
	err = decoder.Decode(&obj.TotalReferrerReward)
	if err != nil {
		return errors.NewField("TotalReferrerReward", err)
	}
	// Deserialize `CurrentEpochReferrerReward`:
	err = decoder.Decode(&obj.CurrentEpochReferrerReward)
	if err != nil {
		return errors.NewField("CurrentEpochReferrerReward", err)
	}
	return nil
}

func (obj *UserFees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserFees: %w", err)
	}
	return nil
}

func UnmarshalUserFees(buf []byte) (*UserFees, error) {
	obj := new(UserFees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SpotPosition struct {
	// The scaled balance of the position. To get the token amount, multiply by the cumulative deposit/borrow
	// interest of corresponding market.
	// precision: SPOT_BALANCE_PRECISION
	ScaledBalance uint64 `json:"scaledBalance"`

	// How many spot non reduce only trigger orders the user has open
	// precision: token mint precision
	OpenBids int64 `json:"openBids"`

	// How many spot non reduce only trigger orders the user has open
	// precision: token mint precision
	OpenAsks int64 `json:"openAsks"`

	// The cumulative deposits/borrows a user has made into a market
	// precision: token mint precision
	CumulativeDeposits int64 `json:"cumulativeDeposits"`

	// The market index of the corresponding spot market
	MarketIndex uint16 `json:"marketIndex"`

	// Whether the position is deposit or borrow
	BalanceType SpotBalanceType `json:"balanceType"`

	// Number of open orders
	OpenOrders uint8    `json:"openOrders"`
	Padding    [4]uint8 `json:"padding"`
}

func (obj SpotPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ScaledBalance`:
	err = encoder.Encode(obj.ScaledBalance)
	if err != nil {
		return errors.NewField("ScaledBalance", err)
	}
	// Serialize `OpenBids`:
	err = encoder.Encode(obj.OpenBids)
	if err != nil {
		return errors.NewField("OpenBids", err)
	}
	// Serialize `OpenAsks`:
	err = encoder.Encode(obj.OpenAsks)
	if err != nil {
		return errors.NewField("OpenAsks", err)
	}
	// Serialize `CumulativeDeposits`:
	err = encoder.Encode(obj.CumulativeDeposits)
	if err != nil {
		return errors.NewField("CumulativeDeposits", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `BalanceType`:
	err = encoder.Encode(obj.BalanceType)
	if err != nil {
		return errors.NewField("BalanceType", err)
	}
	// Serialize `OpenOrders`:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj SpotPosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotPosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ScaledBalance`:
	err = decoder.Decode(&obj.ScaledBalance)
	if err != nil {
		return errors.NewField("ScaledBalance", err)
	}
	// Deserialize `OpenBids`:
	err = decoder.Decode(&obj.OpenBids)
	if err != nil {
		return errors.NewField("OpenBids", err)
	}
	// Deserialize `OpenAsks`:
	err = decoder.Decode(&obj.OpenAsks)
	if err != nil {
		return errors.NewField("OpenAsks", err)
	}
	// Deserialize `CumulativeDeposits`:
	err = decoder.Decode(&obj.CumulativeDeposits)
	if err != nil {
		return errors.NewField("CumulativeDeposits", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `BalanceType`:
	err = decoder.Decode(&obj.BalanceType)
	if err != nil {
		return errors.NewField("BalanceType", err)
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *SpotPosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotPosition: %w", err)
	}
	return nil
}

func UnmarshalSpotPosition(buf []byte) (*SpotPosition, error) {
	obj := new(SpotPosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PerpPosition struct {
	// The perp market's last cumulative funding rate. Used to calculate the funding payment owed to user
	// precision: FUNDING_RATE_PRECISION
	LastCumulativeFundingRate int64 `json:"lastCumulativeFundingRate"`

	// the size of the users perp position
	// precision: BASE_PRECISION
	BaseAssetAmount int64 `json:"baseAssetAmount"`

	// Used to calculate the users pnl. Upon entry, is equal to base_asset_amount * avg entry price - fees
	// Updated when the user open/closes position or settles pnl. Includes fees/funding
	// precision: QUOTE_PRECISION
	QuoteAssetAmount int64 `json:"quoteAssetAmount"`

	// The amount of quote the user would need to exit their position at to break even
	// Updated when the user open/closes position or settles pnl. Includes fees/funding
	// precision: QUOTE_PRECISION
	QuoteBreakEvenAmount int64 `json:"quoteBreakEvenAmount"`

	// The amount quote the user entered the position with. Equal to base asset amount * avg entry price
	// Updated when the user open/closes position. Excludes fees/funding
	// precision: QUOTE_PRECISION
	QuoteEntryAmount int64 `json:"quoteEntryAmount"`

	// The amount of non reduce only trigger orders the user has open
	// precision: BASE_PRECISION
	OpenBids int64 `json:"openBids"`

	// The amount of non reduce only trigger orders the user has open
	// precision: BASE_PRECISION
	OpenAsks int64 `json:"openAsks"`

	// The amount of pnl settled in this market since opening the position
	// precision: QUOTE_PRECISION
	SettledPnl int64 `json:"settledPnl"`

	// The number of lp (liquidity provider) shares the user has in this perp market
	// LP shares allow users to provide liquidity via the AMM
	// precision: BASE_PRECISION
	LpShares uint64 `json:"lpShares"`

	// The last base asset amount per lp the amm had
	// Used to settle the users lp position
	// precision: BASE_PRECISION
	LastBaseAssetAmountPerLp int64 `json:"lastBaseAssetAmountPerLp"`

	// The last quote asset amount per lp the amm had
	// Used to settle the users lp position
	// precision: QUOTE_PRECISION
	LastQuoteAssetAmountPerLp int64    `json:"lastQuoteAssetAmountPerLp"`
	Padding                   [2]uint8 `json:"padding"`
	MaxMarginRatio            uint16   `json:"maxMarginRatio"`

	// The market index for the perp market
	MarketIndex uint16 `json:"marketIndex"`

	// The number of open orders
	OpenOrders uint8 `json:"openOrders"`
	PerLpBase  int8  `json:"perLpBase"`
}

func (obj PerpPosition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastCumulativeFundingRate`:
	err = encoder.Encode(obj.LastCumulativeFundingRate)
	if err != nil {
		return errors.NewField("LastCumulativeFundingRate", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `QuoteAssetAmount`:
	err = encoder.Encode(obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Serialize `QuoteBreakEvenAmount`:
	err = encoder.Encode(obj.QuoteBreakEvenAmount)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmount", err)
	}
	// Serialize `QuoteEntryAmount`:
	err = encoder.Encode(obj.QuoteEntryAmount)
	if err != nil {
		return errors.NewField("QuoteEntryAmount", err)
	}
	// Serialize `OpenBids`:
	err = encoder.Encode(obj.OpenBids)
	if err != nil {
		return errors.NewField("OpenBids", err)
	}
	// Serialize `OpenAsks`:
	err = encoder.Encode(obj.OpenAsks)
	if err != nil {
		return errors.NewField("OpenAsks", err)
	}
	// Serialize `SettledPnl`:
	err = encoder.Encode(obj.SettledPnl)
	if err != nil {
		return errors.NewField("SettledPnl", err)
	}
	// Serialize `LpShares`:
	err = encoder.Encode(obj.LpShares)
	if err != nil {
		return errors.NewField("LpShares", err)
	}
	// Serialize `LastBaseAssetAmountPerLp`:
	err = encoder.Encode(obj.LastBaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("LastBaseAssetAmountPerLp", err)
	}
	// Serialize `LastQuoteAssetAmountPerLp`:
	err = encoder.Encode(obj.LastQuoteAssetAmountPerLp)
	if err != nil {
		return errors.NewField("LastQuoteAssetAmountPerLp", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `MaxMarginRatio`:
	err = encoder.Encode(obj.MaxMarginRatio)
	if err != nil {
		return errors.NewField("MaxMarginRatio", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `OpenOrders`:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Serialize `PerLpBase`:
	err = encoder.Encode(obj.PerLpBase)
	if err != nil {
		return errors.NewField("PerLpBase", err)
	}
	return nil
}

func (obj PerpPosition) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PerpPosition: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PerpPosition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastCumulativeFundingRate`:
	err = decoder.Decode(&obj.LastCumulativeFundingRate)
	if err != nil {
		return errors.NewField("LastCumulativeFundingRate", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `QuoteAssetAmount`:
	err = decoder.Decode(&obj.QuoteAssetAmount)
	if err != nil {
		return errors.NewField("QuoteAssetAmount", err)
	}
	// Deserialize `QuoteBreakEvenAmount`:
	err = decoder.Decode(&obj.QuoteBreakEvenAmount)
	if err != nil {
		return errors.NewField("QuoteBreakEvenAmount", err)
	}
	// Deserialize `QuoteEntryAmount`:
	err = decoder.Decode(&obj.QuoteEntryAmount)
	if err != nil {
		return errors.NewField("QuoteEntryAmount", err)
	}
	// Deserialize `OpenBids`:
	err = decoder.Decode(&obj.OpenBids)
	if err != nil {
		return errors.NewField("OpenBids", err)
	}
	// Deserialize `OpenAsks`:
	err = decoder.Decode(&obj.OpenAsks)
	if err != nil {
		return errors.NewField("OpenAsks", err)
	}
	// Deserialize `SettledPnl`:
	err = decoder.Decode(&obj.SettledPnl)
	if err != nil {
		return errors.NewField("SettledPnl", err)
	}
	// Deserialize `LpShares`:
	err = decoder.Decode(&obj.LpShares)
	if err != nil {
		return errors.NewField("LpShares", err)
	}
	// Deserialize `LastBaseAssetAmountPerLp`:
	err = decoder.Decode(&obj.LastBaseAssetAmountPerLp)
	if err != nil {
		return errors.NewField("LastBaseAssetAmountPerLp", err)
	}
	// Deserialize `LastQuoteAssetAmountPerLp`:
	err = decoder.Decode(&obj.LastQuoteAssetAmountPerLp)
	if err != nil {
		return errors.NewField("LastQuoteAssetAmountPerLp", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `MaxMarginRatio`:
	err = decoder.Decode(&obj.MaxMarginRatio)
	if err != nil {
		return errors.NewField("MaxMarginRatio", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Deserialize `PerLpBase`:
	err = decoder.Decode(&obj.PerLpBase)
	if err != nil {
		return errors.NewField("PerLpBase", err)
	}
	return nil
}

func (obj *PerpPosition) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PerpPosition: %w", err)
	}
	return nil
}

func UnmarshalPerpPosition(buf []byte) (*PerpPosition, error) {
	obj := new(PerpPosition)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Order struct {
	// The slot the order was placed
	Slot uint64 `json:"slot"`

	// The limit price for the order (can be 0 for market orders)
	// For orders with an auction, this price isn't used until the auction is complete
	// precision: PRICE_PRECISION
	Price uint64 `json:"price"`

	// The size of the order
	// precision for perps: BASE_PRECISION
	// precision for spot: token mint precision
	BaseAssetAmount uint64 `json:"baseAssetAmount"`

	// The amount of the order filled
	// precision for perps: BASE_PRECISION
	// precision for spot: token mint precision
	BaseAssetAmountFilled uint64 `json:"baseAssetAmountFilled"`

	// The amount of quote filled for the order
	// precision: QUOTE_PRECISION
	QuoteAssetAmountFilled uint64 `json:"quoteAssetAmountFilled"`

	// At what price the order will be triggered. Only relevant for trigger orders
	// precision: PRICE_PRECISION
	TriggerPrice uint64 `json:"triggerPrice"`

	// The start price for the auction. Only relevant for market/oracle orders
	// precision: PRICE_PRECISION
	AuctionStartPrice int64 `json:"auctionStartPrice"`

	// The end price for the auction. Only relevant for market/oracle orders
	// precision: PRICE_PRECISION
	AuctionEndPrice int64 `json:"auctionEndPrice"`

	// The time when the order will expire
	MaxTs int64 `json:"maxTs"`

	// If set, the order limit price is the oracle price + this offset
	// precision: PRICE_PRECISION
	OraclePriceOffset int32 `json:"oraclePriceOffset"`

	// The id for the order. Each users has their own order id space
	OrderId uint32 `json:"orderId"`

	// The perp/spot market index
	MarketIndex uint16 `json:"marketIndex"`

	// Whether the order is open or unused
	Status OrderStatus `json:"status"`

	// The type of order
	OrderType OrderType `json:"orderType"`

	// Whether market is spot or perp
	MarketType MarketType `json:"marketType"`

	// User generated order id. Can make it easier to place/cancel orders
	UserOrderId uint8 `json:"userOrderId"`

	// What the users position was when the order was placed
	ExistingPositionDirection PositionDirection `json:"existingPositionDirection"`

	// Whether the user is going long or short. LONG = bid, SHORT = ask
	Direction PositionDirection `json:"direction"`

	// Whether the order is allowed to only reduce position size
	ReduceOnly bool `json:"reduceOnly"`

	// Whether the order must be a maker
	PostOnly bool `json:"postOnly"`

	// Whether the order must be canceled the same slot it is placed
	ImmediateOrCancel bool `json:"immediateOrCancel"`

	// Whether the order is triggered above or below the trigger price. Only relevant for trigger orders
	TriggerCondition OrderTriggerCondition `json:"triggerCondition"`

	// How many slots the auction lasts
	AuctionDuration uint8 `json:"auctionDuration"`

	// Last 8 bits of the slot the order was posted on-chain (not order slot for signed msg orders)
	PostedSlotTail uint8 `json:"postedSlotTail"`

	// Bitflags for further classification
	// 0: is_signed_message
	BitFlags uint8    `json:"bitFlags"`
	Padding  [1]uint8 `json:"padding"`
}

func (obj Order) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `BaseAssetAmountFilled`:
	err = encoder.Encode(obj.BaseAssetAmountFilled)
	if err != nil {
		return errors.NewField("BaseAssetAmountFilled", err)
	}
	// Serialize `QuoteAssetAmountFilled`:
	err = encoder.Encode(obj.QuoteAssetAmountFilled)
	if err != nil {
		return errors.NewField("QuoteAssetAmountFilled", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `AuctionStartPrice`:
	err = encoder.Encode(obj.AuctionStartPrice)
	if err != nil {
		return errors.NewField("AuctionStartPrice", err)
	}
	// Serialize `AuctionEndPrice`:
	err = encoder.Encode(obj.AuctionEndPrice)
	if err != nil {
		return errors.NewField("AuctionEndPrice", err)
	}
	// Serialize `MaxTs`:
	err = encoder.Encode(obj.MaxTs)
	if err != nil {
		return errors.NewField("MaxTs", err)
	}
	// Serialize `OraclePriceOffset`:
	err = encoder.Encode(obj.OraclePriceOffset)
	if err != nil {
		return errors.NewField("OraclePriceOffset", err)
	}
	// Serialize `OrderId`:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return errors.NewField("OrderId", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `OrderType`:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return errors.NewField("OrderType", err)
	}
	// Serialize `MarketType`:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Serialize `UserOrderId`:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Serialize `ExistingPositionDirection`:
	err = encoder.Encode(obj.ExistingPositionDirection)
	if err != nil {
		return errors.NewField("ExistingPositionDirection", err)
	}
	// Serialize `Direction`:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Serialize `ReduceOnly`:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Serialize `PostOnly`:
	err = encoder.Encode(obj.PostOnly)
	if err != nil {
		return errors.NewField("PostOnly", err)
	}
	// Serialize `ImmediateOrCancel`:
	err = encoder.Encode(obj.ImmediateOrCancel)
	if err != nil {
		return errors.NewField("ImmediateOrCancel", err)
	}
	// Serialize `TriggerCondition`:
	err = encoder.Encode(obj.TriggerCondition)
	if err != nil {
		return errors.NewField("TriggerCondition", err)
	}
	// Serialize `AuctionDuration`:
	err = encoder.Encode(obj.AuctionDuration)
	if err != nil {
		return errors.NewField("AuctionDuration", err)
	}
	// Serialize `PostedSlotTail`:
	err = encoder.Encode(obj.PostedSlotTail)
	if err != nil {
		return errors.NewField("PostedSlotTail", err)
	}
	// Serialize `BitFlags`:
	err = encoder.Encode(obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj Order) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Order: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `BaseAssetAmountFilled`:
	err = decoder.Decode(&obj.BaseAssetAmountFilled)
	if err != nil {
		return errors.NewField("BaseAssetAmountFilled", err)
	}
	// Deserialize `QuoteAssetAmountFilled`:
	err = decoder.Decode(&obj.QuoteAssetAmountFilled)
	if err != nil {
		return errors.NewField("QuoteAssetAmountFilled", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `AuctionStartPrice`:
	err = decoder.Decode(&obj.AuctionStartPrice)
	if err != nil {
		return errors.NewField("AuctionStartPrice", err)
	}
	// Deserialize `AuctionEndPrice`:
	err = decoder.Decode(&obj.AuctionEndPrice)
	if err != nil {
		return errors.NewField("AuctionEndPrice", err)
	}
	// Deserialize `MaxTs`:
	err = decoder.Decode(&obj.MaxTs)
	if err != nil {
		return errors.NewField("MaxTs", err)
	}
	// Deserialize `OraclePriceOffset`:
	err = decoder.Decode(&obj.OraclePriceOffset)
	if err != nil {
		return errors.NewField("OraclePriceOffset", err)
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return errors.NewField("OrderId", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return errors.NewField("OrderType", err)
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Deserialize `ExistingPositionDirection`:
	err = decoder.Decode(&obj.ExistingPositionDirection)
	if err != nil {
		return errors.NewField("ExistingPositionDirection", err)
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Deserialize `PostOnly`:
	err = decoder.Decode(&obj.PostOnly)
	if err != nil {
		return errors.NewField("PostOnly", err)
	}
	// Deserialize `ImmediateOrCancel`:
	err = decoder.Decode(&obj.ImmediateOrCancel)
	if err != nil {
		return errors.NewField("ImmediateOrCancel", err)
	}
	// Deserialize `TriggerCondition`:
	err = decoder.Decode(&obj.TriggerCondition)
	if err != nil {
		return errors.NewField("TriggerCondition", err)
	}
	// Deserialize `AuctionDuration`:
	err = decoder.Decode(&obj.AuctionDuration)
	if err != nil {
		return errors.NewField("AuctionDuration", err)
	}
	// Deserialize `PostedSlotTail`:
	err = decoder.Decode(&obj.PostedSlotTail)
	if err != nil {
		return errors.NewField("PostedSlotTail", err)
	}
	// Deserialize `BitFlags`:
	err = decoder.Decode(&obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *Order) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Order: %w", err)
	}
	return nil
}

func UnmarshalOrder(buf []byte) (*Order, error) {
	obj := new(Order)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapDirection binary.BorshEnum

const (
	SwapDirection_Add SwapDirection = iota
	SwapDirection_Remove
)

func (value SwapDirection) String() string {
	switch value {
	case SwapDirection_Add:
		return "Add"
	case SwapDirection_Remove:
		return "Remove"
	default:
		return ""
	}
}

// The "isModifyOrderId" interface for the "ModifyOrderId" complex enum.
type ModifyOrderId interface {
	isModifyOrderId()
}

type modifyOrderIdEnumContainer struct {
	Enum        binary.BorshEnum `bin:"enum"`
	UserOrderId ModifyOrderId_UserOrderId
	OrderId     ModifyOrderId_OrderId
}

func DecodeModifyOrderId(decoder *binary.Decoder) (ModifyOrderId, error) {
	{
		tmp := new(modifyOrderIdEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing ModifyOrderId: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.UserOrderId, nil
		case 1:
			return &tmp.OrderId, nil
		default:
			return nil, fmt.Errorf("ModifyOrderId: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeModifyOrderId(encoder *binary.Encoder, value ModifyOrderId) error {
	{
		tmp := modifyOrderIdEnumContainer{}
		switch realvalue := value.(type) {
		case *ModifyOrderId_UserOrderId:
			tmp.Enum = 0
			tmp.UserOrderId = *realvalue
		case *ModifyOrderId_OrderId:
			tmp.Enum = 1
			tmp.OrderId = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "UserOrderId" of enum "ModifyOrderId"
type ModifyOrderId_UserOrderId struct {
	V0 uint8 `json:"v0"`
}

func (obj ModifyOrderId_UserOrderId) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj ModifyOrderId_UserOrderId) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ModifyOrderId_UserOrderId: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ModifyOrderId_UserOrderId) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *ModifyOrderId_UserOrderId) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ModifyOrderId_UserOrderId: %w", err)
	}
	return nil
}

func UnmarshalModifyOrderId_UserOrderId(buf []byte) (*ModifyOrderId_UserOrderId, error) {
	obj := new(ModifyOrderId_UserOrderId)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *ModifyOrderId_UserOrderId) isModifyOrderId() {}

// Variant "OrderId" of enum "ModifyOrderId"
type ModifyOrderId_OrderId struct {
	V0 uint32 `json:"v0"`
}

func (obj ModifyOrderId_OrderId) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj ModifyOrderId_OrderId) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ModifyOrderId_OrderId: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ModifyOrderId_OrderId) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *ModifyOrderId_OrderId) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ModifyOrderId_OrderId: %w", err)
	}
	return nil
}

func UnmarshalModifyOrderId_OrderId(buf []byte) (*ModifyOrderId_OrderId, error) {
	obj := new(ModifyOrderId_OrderId)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *ModifyOrderId_OrderId) isModifyOrderId() {}

type PositionDirection binary.BorshEnum

const (
	PositionDirection_Long PositionDirection = iota
	PositionDirection_Short
)

func (value PositionDirection) String() string {
	switch value {
	case PositionDirection_Long:
		return "Long"
	case PositionDirection_Short:
		return "Short"
	default:
		return ""
	}
}

type SpotFulfillmentType binary.BorshEnum

const (
	SpotFulfillmentType_SerumV3 SpotFulfillmentType = iota
	SpotFulfillmentType_Match
	SpotFulfillmentType_PhoenixV1
	SpotFulfillmentType_OpenbookV2
)

func (value SpotFulfillmentType) String() string {
	switch value {
	case SpotFulfillmentType_SerumV3:
		return "SerumV3"
	case SpotFulfillmentType_Match:
		return "Match"
	case SpotFulfillmentType_PhoenixV1:
		return "PhoenixV1"
	case SpotFulfillmentType_OpenbookV2:
		return "OpenbookV2"
	default:
		return ""
	}
}

type SwapReduceOnly binary.BorshEnum

const (
	SwapReduceOnly_In SwapReduceOnly = iota
	SwapReduceOnly_Out
)

func (value SwapReduceOnly) String() string {
	switch value {
	case SwapReduceOnly_In:
		return "In"
	case SwapReduceOnly_Out:
		return "Out"
	default:
		return ""
	}
}

type TwapPeriod binary.BorshEnum

const (
	TwapPeriod_FundingPeriod TwapPeriod = iota
	TwapPeriod_FiveMin
)

func (value TwapPeriod) String() string {
	switch value {
	case TwapPeriod_FundingPeriod:
		return "FundingPeriod"
	case TwapPeriod_FiveMin:
		return "FiveMin"
	default:
		return ""
	}
}

type LiquidationMultiplierType binary.BorshEnum

const (
	LiquidationMultiplierType_Discount LiquidationMultiplierType = iota
	LiquidationMultiplierType_Premium
)

func (value LiquidationMultiplierType) String() string {
	switch value {
	case LiquidationMultiplierType_Discount:
		return "Discount"
	case LiquidationMultiplierType_Premium:
		return "Premium"
	default:
		return ""
	}
}

type MarginRequirementType binary.BorshEnum

const (
	MarginRequirementType_Initial MarginRequirementType = iota
	MarginRequirementType_Fill
	MarginRequirementType_Maintenance
)

func (value MarginRequirementType) String() string {
	switch value {
	case MarginRequirementType_Initial:
		return "Initial"
	case MarginRequirementType_Fill:
		return "Fill"
	case MarginRequirementType_Maintenance:
		return "Maintenance"
	default:
		return ""
	}
}

type OracleValidity binary.BorshEnum

const (
	OracleValidity_NonPositive OracleValidity = iota
	OracleValidity_TooVolatile
	OracleValidity_TooUncertain
	OracleValidity_StaleForMargin
	OracleValidity_InsufficientDataPoints
	OracleValidity_StaleForAmm
	OracleValidity_Valid
)

func (value OracleValidity) String() string {
	switch value {
	case OracleValidity_NonPositive:
		return "NonPositive"
	case OracleValidity_TooVolatile:
		return "TooVolatile"
	case OracleValidity_TooUncertain:
		return "TooUncertain"
	case OracleValidity_StaleForMargin:
		return "StaleForMargin"
	case OracleValidity_InsufficientDataPoints:
		return "InsufficientDataPoints"
	case OracleValidity_StaleForAmm:
		return "StaleForAMM"
	case OracleValidity_Valid:
		return "Valid"
	default:
		return ""
	}
}

type DriftAction binary.BorshEnum

const (
	DriftAction_UpdateFunding DriftAction = iota
	DriftAction_SettlePnl
	DriftAction_TriggerOrder
	DriftAction_FillOrderMatch
	DriftAction_FillOrderAmm
	DriftAction_Liquidate
	DriftAction_MarginCalc
	DriftAction_UpdateTwap
	DriftAction_UpdateAmmCurve
	DriftAction_OracleOrderPrice
	DriftAction_UseMmOraclePrice
)

func (value DriftAction) String() string {
	switch value {
	case DriftAction_UpdateFunding:
		return "UpdateFunding"
	case DriftAction_SettlePnl:
		return "SettlePnl"
	case DriftAction_TriggerOrder:
		return "TriggerOrder"
	case DriftAction_FillOrderMatch:
		return "FillOrderMatch"
	case DriftAction_FillOrderAmm:
		return "FillOrderAmm"
	case DriftAction_Liquidate:
		return "Liquidate"
	case DriftAction_MarginCalc:
		return "MarginCalc"
	case DriftAction_UpdateTwap:
		return "UpdateTwap"
	case DriftAction_UpdateAmmCurve:
		return "UpdateAMMCurve"
	case DriftAction_OracleOrderPrice:
		return "OracleOrderPrice"
	case DriftAction_UseMmOraclePrice:
		return "UseMMOraclePrice"
	default:
		return ""
	}
}

type LogMode binary.BorshEnum

const (
	LogMode_None LogMode = iota
	LogMode_ExchangeOracle
	LogMode_MmOracle
	LogMode_SafeMmOracle
)

func (value LogMode) String() string {
	switch value {
	case LogMode_None:
		return "None"
	case LogMode_ExchangeOracle:
		return "ExchangeOracle"
	case LogMode_MmOracle:
		return "MMOracle"
	case LogMode_SafeMmOracle:
		return "SafeMMOracle"
	default:
		return ""
	}
}

type PositionUpdateType binary.BorshEnum

const (
	PositionUpdateType_Open PositionUpdateType = iota
	PositionUpdateType_Increase
	PositionUpdateType_Reduce
	PositionUpdateType_Close
	PositionUpdateType_Flip
)

func (value PositionUpdateType) String() string {
	switch value {
	case PositionUpdateType_Open:
		return "Open"
	case PositionUpdateType_Increase:
		return "Increase"
	case PositionUpdateType_Reduce:
		return "Reduce"
	case PositionUpdateType_Close:
		return "Close"
	case PositionUpdateType_Flip:
		return "Flip"
	default:
		return ""
	}
}

type DepositExplanation binary.BorshEnum

const (
	DepositExplanation_None DepositExplanation = iota
	DepositExplanation_Transfer
	DepositExplanation_Borrow
	DepositExplanation_RepayBorrow
	DepositExplanation_Reward
)

func (value DepositExplanation) String() string {
	switch value {
	case DepositExplanation_None:
		return "None"
	case DepositExplanation_Transfer:
		return "Transfer"
	case DepositExplanation_Borrow:
		return "Borrow"
	case DepositExplanation_RepayBorrow:
		return "RepayBorrow"
	case DepositExplanation_Reward:
		return "Reward"
	default:
		return ""
	}
}

type DepositDirection binary.BorshEnum

const (
	DepositDirection_Deposit DepositDirection = iota
	DepositDirection_Withdraw
)

func (value DepositDirection) String() string {
	switch value {
	case DepositDirection_Deposit:
		return "Deposit"
	case DepositDirection_Withdraw:
		return "Withdraw"
	default:
		return ""
	}
}

type OrderAction binary.BorshEnum

const (
	OrderAction_Place OrderAction = iota
	OrderAction_Cancel
	OrderAction_Fill
	OrderAction_Trigger
	OrderAction_Expire
)

func (value OrderAction) String() string {
	switch value {
	case OrderAction_Place:
		return "Place"
	case OrderAction_Cancel:
		return "Cancel"
	case OrderAction_Fill:
		return "Fill"
	case OrderAction_Trigger:
		return "Trigger"
	case OrderAction_Expire:
		return "Expire"
	default:
		return ""
	}
}

type OrderActionExplanation binary.BorshEnum

const (
	OrderActionExplanation_None OrderActionExplanation = iota
	OrderActionExplanation_InsufficientFreeCollateral
	OrderActionExplanation_OraclePriceBreachedLimitPrice
	OrderActionExplanation_MarketOrderFilledToLimitPrice
	OrderActionExplanation_OrderExpired
	OrderActionExplanation_Liquidation
	OrderActionExplanation_OrderFilledWithAmm
	OrderActionExplanation_OrderFilledWithAmmJit
	OrderActionExplanation_OrderFilledWithMatch
	OrderActionExplanation_OrderFilledWithMatchJit
	OrderActionExplanation_MarketExpired
	OrderActionExplanation_RiskingIncreasingOrder
	OrderActionExplanation_ReduceOnlyOrderIncreasedPosition
	OrderActionExplanation_OrderFillWithSerum
	OrderActionExplanation_NoBorrowLiquidity
	OrderActionExplanation_OrderFillWithPhoenix
	OrderActionExplanation_OrderFilledWithAmmJitLpSplit
	OrderActionExplanation_OrderFilledWithLpJit
	OrderActionExplanation_DeriskLp
	OrderActionExplanation_OrderFilledWithOpenbookV2
	OrderActionExplanation_TransferPerpPosition
)

func (value OrderActionExplanation) String() string {
	switch value {
	case OrderActionExplanation_None:
		return "None"
	case OrderActionExplanation_InsufficientFreeCollateral:
		return "InsufficientFreeCollateral"
	case OrderActionExplanation_OraclePriceBreachedLimitPrice:
		return "OraclePriceBreachedLimitPrice"
	case OrderActionExplanation_MarketOrderFilledToLimitPrice:
		return "MarketOrderFilledToLimitPrice"
	case OrderActionExplanation_OrderExpired:
		return "OrderExpired"
	case OrderActionExplanation_Liquidation:
		return "Liquidation"
	case OrderActionExplanation_OrderFilledWithAmm:
		return "OrderFilledWithAMM"
	case OrderActionExplanation_OrderFilledWithAmmJit:
		return "OrderFilledWithAMMJit"
	case OrderActionExplanation_OrderFilledWithMatch:
		return "OrderFilledWithMatch"
	case OrderActionExplanation_OrderFilledWithMatchJit:
		return "OrderFilledWithMatchJit"
	case OrderActionExplanation_MarketExpired:
		return "MarketExpired"
	case OrderActionExplanation_RiskingIncreasingOrder:
		return "RiskingIncreasingOrder"
	case OrderActionExplanation_ReduceOnlyOrderIncreasedPosition:
		return "ReduceOnlyOrderIncreasedPosition"
	case OrderActionExplanation_OrderFillWithSerum:
		return "OrderFillWithSerum"
	case OrderActionExplanation_NoBorrowLiquidity:
		return "NoBorrowLiquidity"
	case OrderActionExplanation_OrderFillWithPhoenix:
		return "OrderFillWithPhoenix"
	case OrderActionExplanation_OrderFilledWithAmmJitLpSplit:
		return "OrderFilledWithAMMJitLPSplit"
	case OrderActionExplanation_OrderFilledWithLpJit:
		return "OrderFilledWithLPJit"
	case OrderActionExplanation_DeriskLp:
		return "DeriskLp"
	case OrderActionExplanation_OrderFilledWithOpenbookV2:
		return "OrderFilledWithOpenbookV2"
	case OrderActionExplanation_TransferPerpPosition:
		return "TransferPerpPosition"
	default:
		return ""
	}
}

type LpAction binary.BorshEnum

const (
	LpAction_AddLiquidity LpAction = iota
	LpAction_RemoveLiquidity
	LpAction_SettleLiquidity
	LpAction_RemoveLiquidityDerisk
)

func (value LpAction) String() string {
	switch value {
	case LpAction_AddLiquidity:
		return "AddLiquidity"
	case LpAction_RemoveLiquidity:
		return "RemoveLiquidity"
	case LpAction_SettleLiquidity:
		return "SettleLiquidity"
	case LpAction_RemoveLiquidityDerisk:
		return "RemoveLiquidityDerisk"
	default:
		return ""
	}
}

type LiquidationType binary.BorshEnum

const (
	LiquidationType_LiquidatePerp LiquidationType = iota
	LiquidationType_LiquidateSpot
	LiquidationType_LiquidateBorrowForPerpPnl
	LiquidationType_LiquidatePerpPnlForDeposit
	LiquidationType_PerpBankruptcy
	LiquidationType_SpotBankruptcy
)

func (value LiquidationType) String() string {
	switch value {
	case LiquidationType_LiquidatePerp:
		return "LiquidatePerp"
	case LiquidationType_LiquidateSpot:
		return "LiquidateSpot"
	case LiquidationType_LiquidateBorrowForPerpPnl:
		return "LiquidateBorrowForPerpPnl"
	case LiquidationType_LiquidatePerpPnlForDeposit:
		return "LiquidatePerpPnlForDeposit"
	case LiquidationType_PerpBankruptcy:
		return "PerpBankruptcy"
	case LiquidationType_SpotBankruptcy:
		return "SpotBankruptcy"
	default:
		return ""
	}
}

type SettlePnlExplanation binary.BorshEnum

const (
	SettlePnlExplanation_None SettlePnlExplanation = iota
	SettlePnlExplanation_ExpiredPosition
)

func (value SettlePnlExplanation) String() string {
	switch value {
	case SettlePnlExplanation_None:
		return "None"
	case SettlePnlExplanation_ExpiredPosition:
		return "ExpiredPosition"
	default:
		return ""
	}
}

type StakeAction binary.BorshEnum

const (
	StakeAction_Stake StakeAction = iota
	StakeAction_UnstakeRequest
	StakeAction_UnstakeCancelRequest
	StakeAction_Unstake
	StakeAction_UnstakeTransfer
	StakeAction_StakeTransfer
)

func (value StakeAction) String() string {
	switch value {
	case StakeAction_Stake:
		return "Stake"
	case StakeAction_UnstakeRequest:
		return "UnstakeRequest"
	case StakeAction_UnstakeCancelRequest:
		return "UnstakeCancelRequest"
	case StakeAction_Unstake:
		return "Unstake"
	case StakeAction_UnstakeTransfer:
		return "UnstakeTransfer"
	case StakeAction_StakeTransfer:
		return "StakeTransfer"
	default:
		return ""
	}
}

// The "isFillMode" interface for the "FillMode" complex enum.
type FillMode interface {
	isFillMode()
}

type fillModeEnumContainer struct {
	Enum         binary.BorshEnum `bin:"enum"`
	Fill         FillMode_Fill
	PlaceAndMake FillMode_PlaceAndMake
	PlaceAndTake FillMode_PlaceAndTake
	Liquidation  FillMode_Liquidation
}

func DecodeFillMode(decoder *binary.Decoder) (FillMode, error) {
	{
		tmp := new(fillModeEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing FillMode: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*FillMode_Fill)(&tmp.Enum), nil
		case 1:
			return (*FillMode_PlaceAndMake)(&tmp.Enum), nil
		case 2:
			return &tmp.PlaceAndTake, nil
		case 3:
			return (*FillMode_Liquidation)(&tmp.Enum), nil
		default:
			return nil, fmt.Errorf("FillMode: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeFillMode(encoder *binary.Encoder, value FillMode) error {
	{
		tmp := fillModeEnumContainer{}
		switch realvalue := value.(type) {
		case *FillMode_Fill:
			tmp.Enum = 0
			tmp.Fill = *realvalue
		case *FillMode_PlaceAndMake:
			tmp.Enum = 1
			tmp.PlaceAndMake = *realvalue
		case *FillMode_PlaceAndTake:
			tmp.Enum = 2
			tmp.PlaceAndTake = *realvalue
		case *FillMode_Liquidation:
			tmp.Enum = 3
			tmp.Liquidation = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type FillMode_Fill uint8

func (obj FillMode_Fill) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *FillMode_Fill) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *FillMode_Fill) isFillMode() {}

type FillMode_PlaceAndMake uint8

func (obj FillMode_PlaceAndMake) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *FillMode_PlaceAndMake) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *FillMode_PlaceAndMake) isFillMode() {}

// Variant "PlaceAndTake" of enum "FillMode"
type FillMode_PlaceAndTake struct {
	V0 bool  `json:"v0"`
	V1 uint8 `json:"v1"`
}

func (obj FillMode_PlaceAndTake) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Serialize `V1`:
	err = encoder.Encode(obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	return nil
}

func (obj FillMode_PlaceAndTake) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FillMode_PlaceAndTake: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FillMode_PlaceAndTake) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Deserialize `V1`:
	err = decoder.Decode(&obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	return nil
}

func (obj *FillMode_PlaceAndTake) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FillMode_PlaceAndTake: %w", err)
	}
	return nil
}

func UnmarshalFillMode_PlaceAndTake(buf []byte) (*FillMode_PlaceAndTake, error) {
	obj := new(FillMode_PlaceAndTake)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *FillMode_PlaceAndTake) isFillMode() {}

type FillMode_Liquidation uint8

func (obj FillMode_Liquidation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *FillMode_Liquidation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *FillMode_Liquidation) isFillMode() {}

// The "isPerpFulfillmentMethod" interface for the "PerpFulfillmentMethod" complex enum.
type PerpFulfillmentMethod interface {
	isPerpFulfillmentMethod()
}

type perpFulfillmentMethodEnumContainer struct {
	Enum  binary.BorshEnum `bin:"enum"`
	Amm   PerpFulfillmentMethod_Amm
	Match PerpFulfillmentMethod_Match
}

func DecodePerpFulfillmentMethod(decoder *binary.Decoder) (PerpFulfillmentMethod, error) {
	{
		tmp := new(perpFulfillmentMethodEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing PerpFulfillmentMethod: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.Amm, nil
		case 1:
			return &tmp.Match, nil
		default:
			return nil, fmt.Errorf("PerpFulfillmentMethod: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodePerpFulfillmentMethod(encoder *binary.Encoder, value PerpFulfillmentMethod) error {
	{
		tmp := perpFulfillmentMethodEnumContainer{}
		switch realvalue := value.(type) {
		case *PerpFulfillmentMethod_Amm:
			tmp.Enum = 0
			tmp.Amm = *realvalue
		case *PerpFulfillmentMethod_Match:
			tmp.Enum = 1
			tmp.Match = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "AMM" of enum "PerpFulfillmentMethod"
type PerpFulfillmentMethod_Amm struct {
	V0 *uint64 `bin:"optional" json:"v0,omitempty"`
}

func (obj PerpFulfillmentMethod_Amm) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0` (optional):
	{
		if obj.V0 == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("V0", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("V0", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.V0)
			if err != nil {
				return errors.NewField("V0", err)
			}
		}
	}
	return nil
}

func (obj PerpFulfillmentMethod_Amm) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PerpFulfillmentMethod_Amm: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PerpFulfillmentMethod_Amm) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("V0", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.V0)
			if err != nil {
				return errors.NewField("V0", err)
			}
		}
	}
	return nil
}

func (obj *PerpFulfillmentMethod_Amm) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PerpFulfillmentMethod_Amm: %w", err)
	}
	return nil
}

func UnmarshalPerpFulfillmentMethod_Amm(buf []byte) (*PerpFulfillmentMethod_Amm, error) {
	obj := new(PerpFulfillmentMethod_Amm)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PerpFulfillmentMethod_Amm) isPerpFulfillmentMethod() {}

// Variant "Match" of enum "PerpFulfillmentMethod"
type PerpFulfillmentMethod_Match struct {
	V0 solanago.PublicKey `json:"v0"`
	V1 uint16             `json:"v1"`
	V2 uint64             `json:"v2"`
}

func (obj PerpFulfillmentMethod_Match) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Serialize `V1`:
	err = encoder.Encode(obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	// Serialize `V2`:
	err = encoder.Encode(obj.V2)
	if err != nil {
		return errors.NewField("V2", err)
	}
	return nil
}

func (obj PerpFulfillmentMethod_Match) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PerpFulfillmentMethod_Match: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PerpFulfillmentMethod_Match) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Deserialize `V1`:
	err = decoder.Decode(&obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	// Deserialize `V2`:
	err = decoder.Decode(&obj.V2)
	if err != nil {
		return errors.NewField("V2", err)
	}
	return nil
}

func (obj *PerpFulfillmentMethod_Match) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PerpFulfillmentMethod_Match: %w", err)
	}
	return nil
}

func UnmarshalPerpFulfillmentMethod_Match(buf []byte) (*PerpFulfillmentMethod_Match, error) {
	obj := new(PerpFulfillmentMethod_Match)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PerpFulfillmentMethod_Match) isPerpFulfillmentMethod() {}

// The "isSpotFulfillmentMethod" interface for the "SpotFulfillmentMethod" complex enum.
type SpotFulfillmentMethod interface {
	isSpotFulfillmentMethod()
}

type spotFulfillmentMethodEnumContainer struct {
	Enum           binary.BorshEnum `bin:"enum"`
	ExternalMarket SpotFulfillmentMethod_ExternalMarket
	Match          SpotFulfillmentMethod_Match
}

func DecodeSpotFulfillmentMethod(decoder *binary.Decoder) (SpotFulfillmentMethod, error) {
	{
		tmp := new(spotFulfillmentMethodEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing SpotFulfillmentMethod: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return (*SpotFulfillmentMethod_ExternalMarket)(&tmp.Enum), nil
		case 1:
			return &tmp.Match, nil
		default:
			return nil, fmt.Errorf("SpotFulfillmentMethod: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeSpotFulfillmentMethod(encoder *binary.Encoder, value SpotFulfillmentMethod) error {
	{
		tmp := spotFulfillmentMethodEnumContainer{}
		switch realvalue := value.(type) {
		case *SpotFulfillmentMethod_ExternalMarket:
			tmp.Enum = 0
			tmp.ExternalMarket = *realvalue
		case *SpotFulfillmentMethod_Match:
			tmp.Enum = 1
			tmp.Match = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

type SpotFulfillmentMethod_ExternalMarket uint8

func (obj SpotFulfillmentMethod_ExternalMarket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj *SpotFulfillmentMethod_ExternalMarket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (_ *SpotFulfillmentMethod_ExternalMarket) isSpotFulfillmentMethod() {}

// Variant "Match" of enum "SpotFulfillmentMethod"
type SpotFulfillmentMethod_Match struct {
	V0 solanago.PublicKey `json:"v0"`
	V1 uint16             `json:"v1"`
}

func (obj SpotFulfillmentMethod_Match) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Serialize `V1`:
	err = encoder.Encode(obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	return nil
}

func (obj SpotFulfillmentMethod_Match) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotFulfillmentMethod_Match: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotFulfillmentMethod_Match) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	// Deserialize `V1`:
	err = decoder.Decode(&obj.V1)
	if err != nil {
		return errors.NewField("V1", err)
	}
	return nil
}

func (obj *SpotFulfillmentMethod_Match) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotFulfillmentMethod_Match: %w", err)
	}
	return nil
}

func UnmarshalSpotFulfillmentMethod_Match(buf []byte) (*SpotFulfillmentMethod_Match, error) {
	obj := new(SpotFulfillmentMethod_Match)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *SpotFulfillmentMethod_Match) isSpotFulfillmentMethod() {}

// The "isMarginCalculationMode" interface for the "MarginCalculationMode" complex enum.
type MarginCalculationMode interface {
	isMarginCalculationMode()
}

type marginCalculationModeEnumContainer struct {
	Enum        binary.BorshEnum `bin:"enum"`
	Standard    MarginCalculationMode_Standard
	Liquidation MarginCalculationMode_Liquidation
}

func DecodeMarginCalculationMode(decoder *binary.Decoder) (MarginCalculationMode, error) {
	{
		tmp := new(marginCalculationModeEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing MarginCalculationMode: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.Standard, nil
		case 1:
			return &tmp.Liquidation, nil
		default:
			return nil, fmt.Errorf("MarginCalculationMode: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeMarginCalculationMode(encoder *binary.Encoder, value MarginCalculationMode) error {
	{
		tmp := marginCalculationModeEnumContainer{}
		switch realvalue := value.(type) {
		case *MarginCalculationMode_Standard:
			tmp.Enum = 0
			tmp.Standard = *realvalue
		case *MarginCalculationMode_Liquidation:
			tmp.Enum = 1
			tmp.Liquidation = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "Standard" of enum "MarginCalculationMode"
type MarginCalculationMode_Standard struct {
	TrackOpenOrdersFraction bool `json:"trackOpenOrdersFraction"`
}

func (obj MarginCalculationMode_Standard) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TrackOpenOrdersFraction`:
	err = encoder.Encode(obj.TrackOpenOrdersFraction)
	if err != nil {
		return errors.NewField("TrackOpenOrdersFraction", err)
	}
	return nil
}

func (obj MarginCalculationMode_Standard) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MarginCalculationMode_Standard: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MarginCalculationMode_Standard) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TrackOpenOrdersFraction`:
	err = decoder.Decode(&obj.TrackOpenOrdersFraction)
	if err != nil {
		return errors.NewField("TrackOpenOrdersFraction", err)
	}
	return nil
}

func (obj *MarginCalculationMode_Standard) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MarginCalculationMode_Standard: %w", err)
	}
	return nil
}

func UnmarshalMarginCalculationMode_Standard(buf []byte) (*MarginCalculationMode_Standard, error) {
	obj := new(MarginCalculationMode_Standard)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *MarginCalculationMode_Standard) isMarginCalculationMode() {}

// Variant "Liquidation" of enum "MarginCalculationMode"
type MarginCalculationMode_Liquidation struct {
	MarketToTrackMarginRequirement *MarketIdentifier `bin:"optional" json:"marketToTrackMarginRequirement,omitempty"`
}

func (obj MarginCalculationMode_Liquidation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MarketToTrackMarginRequirement` (optional):
	{
		if obj.MarketToTrackMarginRequirement == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MarketToTrackMarginRequirement", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MarketToTrackMarginRequirement", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MarketToTrackMarginRequirement)
			if err != nil {
				return errors.NewField("MarketToTrackMarginRequirement", err)
			}
		}
	}
	return nil
}

func (obj MarginCalculationMode_Liquidation) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MarginCalculationMode_Liquidation: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MarginCalculationMode_Liquidation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MarketToTrackMarginRequirement` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MarketToTrackMarginRequirement", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MarketToTrackMarginRequirement)
			if err != nil {
				return errors.NewField("MarketToTrackMarginRequirement", err)
			}
		}
	}
	return nil
}

func (obj *MarginCalculationMode_Liquidation) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MarginCalculationMode_Liquidation: %w", err)
	}
	return nil
}

func UnmarshalMarginCalculationMode_Liquidation(buf []byte) (*MarginCalculationMode_Liquidation, error) {
	obj := new(MarginCalculationMode_Liquidation)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *MarginCalculationMode_Liquidation) isMarginCalculationMode() {}

type OracleSource binary.BorshEnum

const (
	OracleSource_Pyth OracleSource = iota
	OracleSource_Switchboard
	OracleSource_QuoteAsset
	OracleSource_Pyth1K
	OracleSource_Pyth1M
	OracleSource_PythStableCoin
	OracleSource_Prelaunch
	OracleSource_PythPull
	OracleSource_Pyth1KPull
	OracleSource_Pyth1MPull
	OracleSource_PythStableCoinPull
	OracleSource_SwitchboardOnDemand
	OracleSource_PythLazer
	OracleSource_PythLazer1K
	OracleSource_PythLazer1M
	OracleSource_PythLazerStableCoin
)

func (value OracleSource) String() string {
	switch value {
	case OracleSource_Pyth:
		return "Pyth"
	case OracleSource_Switchboard:
		return "Switchboard"
	case OracleSource_QuoteAsset:
		return "QuoteAsset"
	case OracleSource_Pyth1K:
		return "Pyth1K"
	case OracleSource_Pyth1M:
		return "Pyth1M"
	case OracleSource_PythStableCoin:
		return "PythStableCoin"
	case OracleSource_Prelaunch:
		return "Prelaunch"
	case OracleSource_PythPull:
		return "PythPull"
	case OracleSource_Pyth1KPull:
		return "Pyth1KPull"
	case OracleSource_Pyth1MPull:
		return "Pyth1MPull"
	case OracleSource_PythStableCoinPull:
		return "PythStableCoinPull"
	case OracleSource_SwitchboardOnDemand:
		return "SwitchboardOnDemand"
	case OracleSource_PythLazer:
		return "PythLazer"
	case OracleSource_PythLazer1K:
		return "PythLazer1K"
	case OracleSource_PythLazer1M:
		return "PythLazer1M"
	case OracleSource_PythLazerStableCoin:
		return "PythLazerStableCoin"
	default:
		return ""
	}
}

type OrderParamsBitFlag binary.BorshEnum

const (
	OrderParamsBitFlag_ImmediateOrCancel OrderParamsBitFlag = iota
	OrderParamsBitFlag_UpdateHighLeverageMode
)

func (value OrderParamsBitFlag) String() string {
	switch value {
	case OrderParamsBitFlag_ImmediateOrCancel:
		return "ImmediateOrCancel"
	case OrderParamsBitFlag_UpdateHighLeverageMode:
		return "UpdateHighLeverageMode"
	default:
		return ""
	}
}

type PostOnlyParam binary.BorshEnum

const (
	PostOnlyParam_None PostOnlyParam = iota
	PostOnlyParam_MustPostOnly
	PostOnlyParam_TryPostOnly
	PostOnlyParam_Slide
)

func (value PostOnlyParam) String() string {
	switch value {
	case PostOnlyParam_None:
		return "None"
	case PostOnlyParam_MustPostOnly:
		return "MustPostOnly"
	case PostOnlyParam_TryPostOnly:
		return "TryPostOnly"
	case PostOnlyParam_Slide:
		return "Slide"
	default:
		return ""
	}
}

type ModifyOrderPolicy binary.BorshEnum

const (
	ModifyOrderPolicy_MustModify ModifyOrderPolicy = iota
	ModifyOrderPolicy_ExcludePreviousFill
)

func (value ModifyOrderPolicy) String() string {
	switch value {
	case ModifyOrderPolicy_MustModify:
		return "MustModify"
	case ModifyOrderPolicy_ExcludePreviousFill:
		return "ExcludePreviousFill"
	default:
		return ""
	}
}

type PlaceAndTakeOrderSuccessCondition binary.BorshEnum

const (
	PlaceAndTakeOrderSuccessCondition_PartialFill PlaceAndTakeOrderSuccessCondition = iota
	PlaceAndTakeOrderSuccessCondition_FullFill
)

func (value PlaceAndTakeOrderSuccessCondition) String() string {
	switch value {
	case PlaceAndTakeOrderSuccessCondition_PartialFill:
		return "PartialFill"
	case PlaceAndTakeOrderSuccessCondition_FullFill:
		return "FullFill"
	default:
		return ""
	}
}

type PerpOperation binary.BorshEnum

const (
	PerpOperation_UpdateFunding PerpOperation = iota
	PerpOperation_AmmFill
	PerpOperation_Fill
	PerpOperation_SettlePnl
	PerpOperation_SettlePnlWithPosition
	PerpOperation_Liquidation
	PerpOperation_AmmImmediateFill
)

func (value PerpOperation) String() string {
	switch value {
	case PerpOperation_UpdateFunding:
		return "UpdateFunding"
	case PerpOperation_AmmFill:
		return "AmmFill"
	case PerpOperation_Fill:
		return "Fill"
	case PerpOperation_SettlePnl:
		return "SettlePnl"
	case PerpOperation_SettlePnlWithPosition:
		return "SettlePnlWithPosition"
	case PerpOperation_Liquidation:
		return "Liquidation"
	case PerpOperation_AmmImmediateFill:
		return "AmmImmediateFill"
	default:
		return ""
	}
}

type SpotOperation binary.BorshEnum

const (
	SpotOperation_UpdateCumulativeInterest SpotOperation = iota
	SpotOperation_Fill
	SpotOperation_Deposit
	SpotOperation_Withdraw
	SpotOperation_Liquidation
)

func (value SpotOperation) String() string {
	switch value {
	case SpotOperation_UpdateCumulativeInterest:
		return "UpdateCumulativeInterest"
	case SpotOperation_Fill:
		return "Fill"
	case SpotOperation_Deposit:
		return "Deposit"
	case SpotOperation_Withdraw:
		return "Withdraw"
	case SpotOperation_Liquidation:
		return "Liquidation"
	default:
		return ""
	}
}

type InsuranceFundOperation binary.BorshEnum

const (
	InsuranceFundOperation_Init InsuranceFundOperation = iota
	InsuranceFundOperation_Add
	InsuranceFundOperation_RequestRemove
	InsuranceFundOperation_Remove
)

func (value InsuranceFundOperation) String() string {
	switch value {
	case InsuranceFundOperation_Init:
		return "Init"
	case InsuranceFundOperation_Add:
		return "Add"
	case InsuranceFundOperation_RequestRemove:
		return "RequestRemove"
	case InsuranceFundOperation_Remove:
		return "Remove"
	default:
		return ""
	}
}

type MarketStatus binary.BorshEnum

const (
	MarketStatus_Initialized MarketStatus = iota
	MarketStatus_Active
	MarketStatus_FundingPaused
	MarketStatus_AmmPaused
	MarketStatus_FillPaused
	MarketStatus_WithdrawPaused
	MarketStatus_ReduceOnly
	MarketStatus_Settlement
	MarketStatus_Delisted
)

func (value MarketStatus) String() string {
	switch value {
	case MarketStatus_Initialized:
		return "Initialized"
	case MarketStatus_Active:
		return "Active"
	case MarketStatus_FundingPaused:
		return "FundingPaused"
	case MarketStatus_AmmPaused:
		return "AmmPaused"
	case MarketStatus_FillPaused:
		return "FillPaused"
	case MarketStatus_WithdrawPaused:
		return "WithdrawPaused"
	case MarketStatus_ReduceOnly:
		return "ReduceOnly"
	case MarketStatus_Settlement:
		return "Settlement"
	case MarketStatus_Delisted:
		return "Delisted"
	default:
		return ""
	}
}

type ContractType binary.BorshEnum

const (
	ContractType_Perpetual ContractType = iota
	ContractType_Future
	ContractType_Prediction
)

func (value ContractType) String() string {
	switch value {
	case ContractType_Perpetual:
		return "Perpetual"
	case ContractType_Future:
		return "Future"
	case ContractType_Prediction:
		return "Prediction"
	default:
		return ""
	}
}

type ContractTier binary.BorshEnum

const (
	ContractTier_A ContractTier = iota
	ContractTier_B
	ContractTier_C
	ContractTier_Speculative
	ContractTier_HighlySpeculative
	ContractTier_Isolated
)

func (value ContractTier) String() string {
	switch value {
	case ContractTier_A:
		return "A"
	case ContractTier_B:
		return "B"
	case ContractTier_C:
		return "C"
	case ContractTier_Speculative:
		return "Speculative"
	case ContractTier_HighlySpeculative:
		return "HighlySpeculative"
	case ContractTier_Isolated:
		return "Isolated"
	default:
		return ""
	}
}

type AmmAvailability binary.BorshEnum

const (
	AmmAvailability_Immediate AmmAvailability = iota
	AmmAvailability_AfterMinDuration
	AmmAvailability_Unavailable
)

func (value AmmAvailability) String() string {
	switch value {
	case AmmAvailability_Immediate:
		return "Immediate"
	case AmmAvailability_AfterMinDuration:
		return "AfterMinDuration"
	case AmmAvailability_Unavailable:
		return "Unavailable"
	default:
		return ""
	}
}

type SettlePnlMode binary.BorshEnum

const (
	SettlePnlMode_MustSettle SettlePnlMode = iota
	SettlePnlMode_TrySettle
)

func (value SettlePnlMode) String() string {
	switch value {
	case SettlePnlMode_MustSettle:
		return "MustSettle"
	case SettlePnlMode_TrySettle:
		return "TrySettle"
	default:
		return ""
	}
}

type SpotBalanceType binary.BorshEnum

const (
	SpotBalanceType_Deposit SpotBalanceType = iota
	SpotBalanceType_Borrow
)

func (value SpotBalanceType) String() string {
	switch value {
	case SpotBalanceType_Deposit:
		return "Deposit"
	case SpotBalanceType_Borrow:
		return "Borrow"
	default:
		return ""
	}
}

type SpotFulfillmentConfigStatus binary.BorshEnum

const (
	SpotFulfillmentConfigStatus_Enabled SpotFulfillmentConfigStatus = iota
	SpotFulfillmentConfigStatus_Disabled
)

func (value SpotFulfillmentConfigStatus) String() string {
	switch value {
	case SpotFulfillmentConfigStatus_Enabled:
		return "Enabled"
	case SpotFulfillmentConfigStatus_Disabled:
		return "Disabled"
	default:
		return ""
	}
}

type AssetTier binary.BorshEnum

const (
	AssetTier_Collateral AssetTier = iota
	AssetTier_Protected
	AssetTier_Cross
	AssetTier_Isolated
	AssetTier_Unlisted
)

func (value AssetTier) String() string {
	switch value {
	case AssetTier_Collateral:
		return "Collateral"
	case AssetTier_Protected:
		return "Protected"
	case AssetTier_Cross:
		return "Cross"
	case AssetTier_Isolated:
		return "Isolated"
	case AssetTier_Unlisted:
		return "Unlisted"
	default:
		return ""
	}
}

type TokenProgramFlag binary.BorshEnum

const (
	TokenProgramFlag_Token2022 TokenProgramFlag = iota
	TokenProgramFlag_TransferHook
)

func (value TokenProgramFlag) String() string {
	switch value {
	case TokenProgramFlag_Token2022:
		return "Token2022"
	case TokenProgramFlag_TransferHook:
		return "TransferHook"
	default:
		return ""
	}
}

type ExchangeStatus binary.BorshEnum

const (
	ExchangeStatus_DepositPaused ExchangeStatus = iota
	ExchangeStatus_WithdrawPaused
	ExchangeStatus_AmmPaused
	ExchangeStatus_FillPaused
	ExchangeStatus_LiqPaused
	ExchangeStatus_FundingPaused
	ExchangeStatus_SettlePnlPaused
	ExchangeStatus_AmmImmediateFillPaused
)

func (value ExchangeStatus) String() string {
	switch value {
	case ExchangeStatus_DepositPaused:
		return "DepositPaused"
	case ExchangeStatus_WithdrawPaused:
		return "WithdrawPaused"
	case ExchangeStatus_AmmPaused:
		return "AmmPaused"
	case ExchangeStatus_FillPaused:
		return "FillPaused"
	case ExchangeStatus_LiqPaused:
		return "LiqPaused"
	case ExchangeStatus_FundingPaused:
		return "FundingPaused"
	case ExchangeStatus_SettlePnlPaused:
		return "SettlePnlPaused"
	case ExchangeStatus_AmmImmediateFillPaused:
		return "AmmImmediateFillPaused"
	default:
		return ""
	}
}

type FeatureBitFlags binary.BorshEnum

const (
	FeatureBitFlags_MmOracleUpdate FeatureBitFlags = iota
	FeatureBitFlags_MedianTriggerPrice
)

func (value FeatureBitFlags) String() string {
	switch value {
	case FeatureBitFlags_MmOracleUpdate:
		return "MmOracleUpdate"
	case FeatureBitFlags_MedianTriggerPrice:
		return "MedianTriggerPrice"
	default:
		return ""
	}
}

type UserStatus binary.BorshEnum

const (
	UserStatus_BeingLiquidated UserStatus = iota
	UserStatus_Bankrupt
	UserStatus_ReduceOnly
	UserStatus_AdvancedLp
	UserStatus_ProtectedMakerOrders
)

func (value UserStatus) String() string {
	switch value {
	case UserStatus_BeingLiquidated:
		return "BeingLiquidated"
	case UserStatus_Bankrupt:
		return "Bankrupt"
	case UserStatus_ReduceOnly:
		return "ReduceOnly"
	case UserStatus_AdvancedLp:
		return "AdvancedLp"
	case UserStatus_ProtectedMakerOrders:
		return "ProtectedMakerOrders"
	default:
		return ""
	}
}

type AssetType binary.BorshEnum

const (
	AssetType_Base AssetType = iota
	AssetType_Quote
)

func (value AssetType) String() string {
	switch value {
	case AssetType_Base:
		return "Base"
	case AssetType_Quote:
		return "Quote"
	default:
		return ""
	}
}

type OrderStatus binary.BorshEnum

const (
	OrderStatus_Init OrderStatus = iota
	OrderStatus_Open
	OrderStatus_Filled
	OrderStatus_Canceled
)

func (value OrderStatus) String() string {
	switch value {
	case OrderStatus_Init:
		return "Init"
	case OrderStatus_Open:
		return "Open"
	case OrderStatus_Filled:
		return "Filled"
	case OrderStatus_Canceled:
		return "Canceled"
	default:
		return ""
	}
}

type OrderType binary.BorshEnum

const (
	OrderType_Market OrderType = iota
	OrderType_Limit
	OrderType_TriggerMarket
	OrderType_TriggerLimit
	OrderType_Oracle
)

func (value OrderType) String() string {
	switch value {
	case OrderType_Market:
		return "Market"
	case OrderType_Limit:
		return "Limit"
	case OrderType_TriggerMarket:
		return "TriggerMarket"
	case OrderType_TriggerLimit:
		return "TriggerLimit"
	case OrderType_Oracle:
		return "Oracle"
	default:
		return ""
	}
}

type OrderTriggerCondition binary.BorshEnum

const (
	OrderTriggerCondition_Above OrderTriggerCondition = iota
	OrderTriggerCondition_Below
	OrderTriggerCondition_TriggeredAbove
	OrderTriggerCondition_TriggeredBelow
)

func (value OrderTriggerCondition) String() string {
	switch value {
	case OrderTriggerCondition_Above:
		return "Above"
	case OrderTriggerCondition_Below:
		return "Below"
	case OrderTriggerCondition_TriggeredAbove:
		return "TriggeredAbove"
	case OrderTriggerCondition_TriggeredBelow:
		return "TriggeredBelow"
	default:
		return ""
	}
}

type MarketType binary.BorshEnum

const (
	MarketType_Spot MarketType = iota
	MarketType_Perp
)

func (value MarketType) String() string {
	switch value {
	case MarketType_Spot:
		return "Spot"
	case MarketType_Perp:
		return "Perp"
	default:
		return ""
	}
}

type OrderBitFlag binary.BorshEnum

const (
	OrderBitFlag_SignedMessage OrderBitFlag = iota
	OrderBitFlag_OracleTriggerMarket
	OrderBitFlag_SafeTriggerOrder
	OrderBitFlag_NewTriggerReduceOnly
)

func (value OrderBitFlag) String() string {
	switch value {
	case OrderBitFlag_SignedMessage:
		return "SignedMessage"
	case OrderBitFlag_OracleTriggerMarket:
		return "OracleTriggerMarket"
	case OrderBitFlag_SafeTriggerOrder:
		return "SafeTriggerOrder"
	case OrderBitFlag_NewTriggerReduceOnly:
		return "NewTriggerReduceOnly"
	default:
		return ""
	}
}

type ReferrerStatus binary.BorshEnum

const (
	ReferrerStatus_IsReferrer ReferrerStatus = iota
	ReferrerStatus_IsReferred
)

func (value ReferrerStatus) String() string {
	switch value {
	case ReferrerStatus_IsReferrer:
		return "IsReferrer"
	case ReferrerStatus_IsReferred:
		return "IsReferred"
	default:
		return ""
	}
}

type MarginMode binary.BorshEnum

const (
	MarginMode_Default MarginMode = iota
	MarginMode_HighLeverage
	MarginMode_HighLeverageMaintenance
)

func (value MarginMode) String() string {
	switch value {
	case MarginMode_Default:
		return "Default"
	case MarginMode_HighLeverage:
		return "HighLeverage"
	case MarginMode_HighLeverageMaintenance:
		return "HighLeverageMaintenance"
	default:
		return ""
	}
}

type FuelOverflowStatus binary.BorshEnum

const (
	FuelOverflowStatus_Exists FuelOverflowStatus = iota
)

func (value FuelOverflowStatus) String() string {
	switch value {
	case FuelOverflowStatus_Exists:
		return "Exists"
	default:
		return ""
	}
}

type SignatureVerificationError binary.BorshEnum

const (
	SignatureVerificationError_InvalidEd25519InstructionProgramId SignatureVerificationError = iota
	SignatureVerificationError_InvalidEd25519InstructionDataLength
	SignatureVerificationError_InvalidSignatureIndex
	SignatureVerificationError_InvalidSignatureOffset
	SignatureVerificationError_InvalidPublicKeyOffset
	SignatureVerificationError_InvalidMessageOffset
	SignatureVerificationError_InvalidMessageDataSize
	SignatureVerificationError_InvalidInstructionIndex
	SignatureVerificationError_MessageOffsetOverflow
	SignatureVerificationError_InvalidMessageHex
	SignatureVerificationError_InvalidMessageData
	SignatureVerificationError_LoadInstructionAtFailed
)

func (value SignatureVerificationError) String() string {
	switch value {
	case SignatureVerificationError_InvalidEd25519InstructionProgramId:
		return "InvalidEd25519InstructionProgramId"
	case SignatureVerificationError_InvalidEd25519InstructionDataLength:
		return "InvalidEd25519InstructionDataLength"
	case SignatureVerificationError_InvalidSignatureIndex:
		return "InvalidSignatureIndex"
	case SignatureVerificationError_InvalidSignatureOffset:
		return "InvalidSignatureOffset"
	case SignatureVerificationError_InvalidPublicKeyOffset:
		return "InvalidPublicKeyOffset"
	case SignatureVerificationError_InvalidMessageOffset:
		return "InvalidMessageOffset"
	case SignatureVerificationError_InvalidMessageDataSize:
		return "InvalidMessageDataSize"
	case SignatureVerificationError_InvalidInstructionIndex:
		return "InvalidInstructionIndex"
	case SignatureVerificationError_MessageOffsetOverflow:
		return "MessageOffsetOverflow"
	case SignatureVerificationError_InvalidMessageHex:
		return "InvalidMessageHex"
	case SignatureVerificationError_InvalidMessageData:
		return "InvalidMessageData"
	case SignatureVerificationError_LoadInstructionAtFailed:
		return "LoadInstructionAtFailed"
	default:
		return ""
	}
}

type OpenbookV2FulfillmentConfig struct {
	Pubkey                    solanago.PublicKey          `json:"pubkey"`
	OpenbookV2ProgramId       solanago.PublicKey          `json:"openbookV2ProgramId"`
	OpenbookV2Market          solanago.PublicKey          `json:"openbookV2Market"`
	OpenbookV2MarketAuthority solanago.PublicKey          `json:"openbookV2MarketAuthority"`
	OpenbookV2EventHeap       solanago.PublicKey          `json:"openbookV2EventHeap"`
	OpenbookV2Bids            solanago.PublicKey          `json:"openbookV2Bids"`
	OpenbookV2Asks            solanago.PublicKey          `json:"openbookV2Asks"`
	OpenbookV2BaseVault       solanago.PublicKey          `json:"openbookV2BaseVault"`
	OpenbookV2QuoteVault      solanago.PublicKey          `json:"openbookV2QuoteVault"`
	MarketIndex               uint16                      `json:"marketIndex"`
	FulfillmentType           SpotFulfillmentType         `json:"fulfillmentType"`
	Status                    SpotFulfillmentConfigStatus `json:"status"`
	Padding                   [4]uint8                    `json:"padding"`
}

func (obj OpenbookV2FulfillmentConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `OpenbookV2ProgramId`:
	err = encoder.Encode(obj.OpenbookV2ProgramId)
	if err != nil {
		return errors.NewField("OpenbookV2ProgramId", err)
	}
	// Serialize `OpenbookV2Market`:
	err = encoder.Encode(obj.OpenbookV2Market)
	if err != nil {
		return errors.NewField("OpenbookV2Market", err)
	}
	// Serialize `OpenbookV2MarketAuthority`:
	err = encoder.Encode(obj.OpenbookV2MarketAuthority)
	if err != nil {
		return errors.NewField("OpenbookV2MarketAuthority", err)
	}
	// Serialize `OpenbookV2EventHeap`:
	err = encoder.Encode(obj.OpenbookV2EventHeap)
	if err != nil {
		return errors.NewField("OpenbookV2EventHeap", err)
	}
	// Serialize `OpenbookV2Bids`:
	err = encoder.Encode(obj.OpenbookV2Bids)
	if err != nil {
		return errors.NewField("OpenbookV2Bids", err)
	}
	// Serialize `OpenbookV2Asks`:
	err = encoder.Encode(obj.OpenbookV2Asks)
	if err != nil {
		return errors.NewField("OpenbookV2Asks", err)
	}
	// Serialize `OpenbookV2BaseVault`:
	err = encoder.Encode(obj.OpenbookV2BaseVault)
	if err != nil {
		return errors.NewField("OpenbookV2BaseVault", err)
	}
	// Serialize `OpenbookV2QuoteVault`:
	err = encoder.Encode(obj.OpenbookV2QuoteVault)
	if err != nil {
		return errors.NewField("OpenbookV2QuoteVault", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `FulfillmentType`:
	err = encoder.Encode(obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj OpenbookV2FulfillmentConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OpenbookV2FulfillmentConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OpenbookV2FulfillmentConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `OpenbookV2ProgramId`:
	err = decoder.Decode(&obj.OpenbookV2ProgramId)
	if err != nil {
		return errors.NewField("OpenbookV2ProgramId", err)
	}
	// Deserialize `OpenbookV2Market`:
	err = decoder.Decode(&obj.OpenbookV2Market)
	if err != nil {
		return errors.NewField("OpenbookV2Market", err)
	}
	// Deserialize `OpenbookV2MarketAuthority`:
	err = decoder.Decode(&obj.OpenbookV2MarketAuthority)
	if err != nil {
		return errors.NewField("OpenbookV2MarketAuthority", err)
	}
	// Deserialize `OpenbookV2EventHeap`:
	err = decoder.Decode(&obj.OpenbookV2EventHeap)
	if err != nil {
		return errors.NewField("OpenbookV2EventHeap", err)
	}
	// Deserialize `OpenbookV2Bids`:
	err = decoder.Decode(&obj.OpenbookV2Bids)
	if err != nil {
		return errors.NewField("OpenbookV2Bids", err)
	}
	// Deserialize `OpenbookV2Asks`:
	err = decoder.Decode(&obj.OpenbookV2Asks)
	if err != nil {
		return errors.NewField("OpenbookV2Asks", err)
	}
	// Deserialize `OpenbookV2BaseVault`:
	err = decoder.Decode(&obj.OpenbookV2BaseVault)
	if err != nil {
		return errors.NewField("OpenbookV2BaseVault", err)
	}
	// Deserialize `OpenbookV2QuoteVault`:
	err = decoder.Decode(&obj.OpenbookV2QuoteVault)
	if err != nil {
		return errors.NewField("OpenbookV2QuoteVault", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `FulfillmentType`:
	err = decoder.Decode(&obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *OpenbookV2FulfillmentConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OpenbookV2FulfillmentConfig: %w", err)
	}
	return nil
}

func UnmarshalOpenbookV2FulfillmentConfig(buf []byte) (*OpenbookV2FulfillmentConfig, error) {
	obj := new(OpenbookV2FulfillmentConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PhoenixV1FulfillmentConfig struct {
	Pubkey              solanago.PublicKey          `json:"pubkey"`
	PhoenixProgramId    solanago.PublicKey          `json:"phoenixProgramId"`
	PhoenixLogAuthority solanago.PublicKey          `json:"phoenixLogAuthority"`
	PhoenixMarket       solanago.PublicKey          `json:"phoenixMarket"`
	PhoenixBaseVault    solanago.PublicKey          `json:"phoenixBaseVault"`
	PhoenixQuoteVault   solanago.PublicKey          `json:"phoenixQuoteVault"`
	MarketIndex         uint16                      `json:"marketIndex"`
	FulfillmentType     SpotFulfillmentType         `json:"fulfillmentType"`
	Status              SpotFulfillmentConfigStatus `json:"status"`
	Padding             [4]uint8                    `json:"padding"`
}

func (obj PhoenixV1FulfillmentConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `PhoenixProgramId`:
	err = encoder.Encode(obj.PhoenixProgramId)
	if err != nil {
		return errors.NewField("PhoenixProgramId", err)
	}
	// Serialize `PhoenixLogAuthority`:
	err = encoder.Encode(obj.PhoenixLogAuthority)
	if err != nil {
		return errors.NewField("PhoenixLogAuthority", err)
	}
	// Serialize `PhoenixMarket`:
	err = encoder.Encode(obj.PhoenixMarket)
	if err != nil {
		return errors.NewField("PhoenixMarket", err)
	}
	// Serialize `PhoenixBaseVault`:
	err = encoder.Encode(obj.PhoenixBaseVault)
	if err != nil {
		return errors.NewField("PhoenixBaseVault", err)
	}
	// Serialize `PhoenixQuoteVault`:
	err = encoder.Encode(obj.PhoenixQuoteVault)
	if err != nil {
		return errors.NewField("PhoenixQuoteVault", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `FulfillmentType`:
	err = encoder.Encode(obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PhoenixV1FulfillmentConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PhoenixV1FulfillmentConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PhoenixV1FulfillmentConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `PhoenixProgramId`:
	err = decoder.Decode(&obj.PhoenixProgramId)
	if err != nil {
		return errors.NewField("PhoenixProgramId", err)
	}
	// Deserialize `PhoenixLogAuthority`:
	err = decoder.Decode(&obj.PhoenixLogAuthority)
	if err != nil {
		return errors.NewField("PhoenixLogAuthority", err)
	}
	// Deserialize `PhoenixMarket`:
	err = decoder.Decode(&obj.PhoenixMarket)
	if err != nil {
		return errors.NewField("PhoenixMarket", err)
	}
	// Deserialize `PhoenixBaseVault`:
	err = decoder.Decode(&obj.PhoenixBaseVault)
	if err != nil {
		return errors.NewField("PhoenixBaseVault", err)
	}
	// Deserialize `PhoenixQuoteVault`:
	err = decoder.Decode(&obj.PhoenixQuoteVault)
	if err != nil {
		return errors.NewField("PhoenixQuoteVault", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `FulfillmentType`:
	err = decoder.Decode(&obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PhoenixV1FulfillmentConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PhoenixV1FulfillmentConfig: %w", err)
	}
	return nil
}

func UnmarshalPhoenixV1FulfillmentConfig(buf []byte) (*PhoenixV1FulfillmentConfig, error) {
	obj := new(PhoenixV1FulfillmentConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SerumV3FulfillmentConfig struct {
	Pubkey            solanago.PublicKey          `json:"pubkey"`
	SerumProgramId    solanago.PublicKey          `json:"serumProgramId"`
	SerumMarket       solanago.PublicKey          `json:"serumMarket"`
	SerumRequestQueue solanago.PublicKey          `json:"serumRequestQueue"`
	SerumEventQueue   solanago.PublicKey          `json:"serumEventQueue"`
	SerumBids         solanago.PublicKey          `json:"serumBids"`
	SerumAsks         solanago.PublicKey          `json:"serumAsks"`
	SerumBaseVault    solanago.PublicKey          `json:"serumBaseVault"`
	SerumQuoteVault   solanago.PublicKey          `json:"serumQuoteVault"`
	SerumOpenOrders   solanago.PublicKey          `json:"serumOpenOrders"`
	SerumSignerNonce  uint64                      `json:"serumSignerNonce"`
	MarketIndex       uint16                      `json:"marketIndex"`
	FulfillmentType   SpotFulfillmentType         `json:"fulfillmentType"`
	Status            SpotFulfillmentConfigStatus `json:"status"`
	Padding           [4]uint8                    `json:"padding"`
}

func (obj SerumV3FulfillmentConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `SerumProgramId`:
	err = encoder.Encode(obj.SerumProgramId)
	if err != nil {
		return errors.NewField("SerumProgramId", err)
	}
	// Serialize `SerumMarket`:
	err = encoder.Encode(obj.SerumMarket)
	if err != nil {
		return errors.NewField("SerumMarket", err)
	}
	// Serialize `SerumRequestQueue`:
	err = encoder.Encode(obj.SerumRequestQueue)
	if err != nil {
		return errors.NewField("SerumRequestQueue", err)
	}
	// Serialize `SerumEventQueue`:
	err = encoder.Encode(obj.SerumEventQueue)
	if err != nil {
		return errors.NewField("SerumEventQueue", err)
	}
	// Serialize `SerumBids`:
	err = encoder.Encode(obj.SerumBids)
	if err != nil {
		return errors.NewField("SerumBids", err)
	}
	// Serialize `SerumAsks`:
	err = encoder.Encode(obj.SerumAsks)
	if err != nil {
		return errors.NewField("SerumAsks", err)
	}
	// Serialize `SerumBaseVault`:
	err = encoder.Encode(obj.SerumBaseVault)
	if err != nil {
		return errors.NewField("SerumBaseVault", err)
	}
	// Serialize `SerumQuoteVault`:
	err = encoder.Encode(obj.SerumQuoteVault)
	if err != nil {
		return errors.NewField("SerumQuoteVault", err)
	}
	// Serialize `SerumOpenOrders`:
	err = encoder.Encode(obj.SerumOpenOrders)
	if err != nil {
		return errors.NewField("SerumOpenOrders", err)
	}
	// Serialize `SerumSignerNonce`:
	err = encoder.Encode(obj.SerumSignerNonce)
	if err != nil {
		return errors.NewField("SerumSignerNonce", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `FulfillmentType`:
	err = encoder.Encode(obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj SerumV3FulfillmentConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SerumV3FulfillmentConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SerumV3FulfillmentConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `SerumProgramId`:
	err = decoder.Decode(&obj.SerumProgramId)
	if err != nil {
		return errors.NewField("SerumProgramId", err)
	}
	// Deserialize `SerumMarket`:
	err = decoder.Decode(&obj.SerumMarket)
	if err != nil {
		return errors.NewField("SerumMarket", err)
	}
	// Deserialize `SerumRequestQueue`:
	err = decoder.Decode(&obj.SerumRequestQueue)
	if err != nil {
		return errors.NewField("SerumRequestQueue", err)
	}
	// Deserialize `SerumEventQueue`:
	err = decoder.Decode(&obj.SerumEventQueue)
	if err != nil {
		return errors.NewField("SerumEventQueue", err)
	}
	// Deserialize `SerumBids`:
	err = decoder.Decode(&obj.SerumBids)
	if err != nil {
		return errors.NewField("SerumBids", err)
	}
	// Deserialize `SerumAsks`:
	err = decoder.Decode(&obj.SerumAsks)
	if err != nil {
		return errors.NewField("SerumAsks", err)
	}
	// Deserialize `SerumBaseVault`:
	err = decoder.Decode(&obj.SerumBaseVault)
	if err != nil {
		return errors.NewField("SerumBaseVault", err)
	}
	// Deserialize `SerumQuoteVault`:
	err = decoder.Decode(&obj.SerumQuoteVault)
	if err != nil {
		return errors.NewField("SerumQuoteVault", err)
	}
	// Deserialize `SerumOpenOrders`:
	err = decoder.Decode(&obj.SerumOpenOrders)
	if err != nil {
		return errors.NewField("SerumOpenOrders", err)
	}
	// Deserialize `SerumSignerNonce`:
	err = decoder.Decode(&obj.SerumSignerNonce)
	if err != nil {
		return errors.NewField("SerumSignerNonce", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `FulfillmentType`:
	err = decoder.Decode(&obj.FulfillmentType)
	if err != nil {
		return errors.NewField("FulfillmentType", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *SerumV3FulfillmentConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SerumV3FulfillmentConfig: %w", err)
	}
	return nil
}

func UnmarshalSerumV3FulfillmentConfig(buf []byte) (*SerumV3FulfillmentConfig, error) {
	obj := new(SerumV3FulfillmentConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type HighLeverageModeConfig struct {
	MaxUsers                uint32    `json:"maxUsers"`
	CurrentUsers            uint32    `json:"currentUsers"`
	ReduceOnly              uint8     `json:"reduceOnly"`
	Padding1                [3]uint8  `json:"padding1"`
	CurrentMaintenanceUsers uint32    `json:"currentMaintenanceUsers"`
	Padding2                [24]uint8 `json:"padding2"`
}

func (obj HighLeverageModeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxUsers`:
	err = encoder.Encode(obj.MaxUsers)
	if err != nil {
		return errors.NewField("MaxUsers", err)
	}
	// Serialize `CurrentUsers`:
	err = encoder.Encode(obj.CurrentUsers)
	if err != nil {
		return errors.NewField("CurrentUsers", err)
	}
	// Serialize `ReduceOnly`:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `CurrentMaintenanceUsers`:
	err = encoder.Encode(obj.CurrentMaintenanceUsers)
	if err != nil {
		return errors.NewField("CurrentMaintenanceUsers", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj HighLeverageModeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding HighLeverageModeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *HighLeverageModeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxUsers`:
	err = decoder.Decode(&obj.MaxUsers)
	if err != nil {
		return errors.NewField("MaxUsers", err)
	}
	// Deserialize `CurrentUsers`:
	err = decoder.Decode(&obj.CurrentUsers)
	if err != nil {
		return errors.NewField("CurrentUsers", err)
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `CurrentMaintenanceUsers`:
	err = decoder.Decode(&obj.CurrentMaintenanceUsers)
	if err != nil {
		return errors.NewField("CurrentMaintenanceUsers", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *HighLeverageModeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling HighLeverageModeConfig: %w", err)
	}
	return nil
}

func UnmarshalHighLeverageModeConfig(buf []byte) (*HighLeverageModeConfig, error) {
	obj := new(HighLeverageModeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IfRebalanceConfig struct {
	Pubkey solanago.PublicKey `json:"pubkey"`

	// total amount to be sold
	TotalInAmount uint64 `json:"totalInAmount"`

	// amount already sold
	CurrentInAmount uint64 `json:"currentInAmount"`

	// amount already bought
	CurrentOutAmount uint64 `json:"currentOutAmount"`

	// amount already transferred to revenue pool
	CurrentOutAmountTransferred uint64 `json:"currentOutAmountTransferred"`

	// amount already bought in epoch
	CurrentInAmountSinceLastTransfer uint64 `json:"currentInAmountSinceLastTransfer"`

	// start time of epoch
	EpochStartTs int64 `json:"epochStartTs"`

	// amount already bought in epoch
	EpochInAmount uint64 `json:"epochInAmount"`

	// max amount to swap in epoch
	EpochMaxInAmount uint64 `json:"epochMaxInAmount"`

	// duration of epoch
	EpochDuration int64 `json:"epochDuration"`

	// market index to sell
	OutMarketIndex uint16 `json:"outMarketIndex"`

	// market index to buy
	InMarketIndex  uint16    `json:"inMarketIndex"`
	MaxSlippageBps uint16    `json:"maxSlippageBps"`
	SwapMode       uint8     `json:"swapMode"`
	Status         uint8     `json:"status"`
	Padding2       [32]uint8 `json:"padding2"`
}

func (obj IfRebalanceConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `TotalInAmount`:
	err = encoder.Encode(obj.TotalInAmount)
	if err != nil {
		return errors.NewField("TotalInAmount", err)
	}
	// Serialize `CurrentInAmount`:
	err = encoder.Encode(obj.CurrentInAmount)
	if err != nil {
		return errors.NewField("CurrentInAmount", err)
	}
	// Serialize `CurrentOutAmount`:
	err = encoder.Encode(obj.CurrentOutAmount)
	if err != nil {
		return errors.NewField("CurrentOutAmount", err)
	}
	// Serialize `CurrentOutAmountTransferred`:
	err = encoder.Encode(obj.CurrentOutAmountTransferred)
	if err != nil {
		return errors.NewField("CurrentOutAmountTransferred", err)
	}
	// Serialize `CurrentInAmountSinceLastTransfer`:
	err = encoder.Encode(obj.CurrentInAmountSinceLastTransfer)
	if err != nil {
		return errors.NewField("CurrentInAmountSinceLastTransfer", err)
	}
	// Serialize `EpochStartTs`:
	err = encoder.Encode(obj.EpochStartTs)
	if err != nil {
		return errors.NewField("EpochStartTs", err)
	}
	// Serialize `EpochInAmount`:
	err = encoder.Encode(obj.EpochInAmount)
	if err != nil {
		return errors.NewField("EpochInAmount", err)
	}
	// Serialize `EpochMaxInAmount`:
	err = encoder.Encode(obj.EpochMaxInAmount)
	if err != nil {
		return errors.NewField("EpochMaxInAmount", err)
	}
	// Serialize `EpochDuration`:
	err = encoder.Encode(obj.EpochDuration)
	if err != nil {
		return errors.NewField("EpochDuration", err)
	}
	// Serialize `OutMarketIndex`:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Serialize `InMarketIndex`:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Serialize `MaxSlippageBps`:
	err = encoder.Encode(obj.MaxSlippageBps)
	if err != nil {
		return errors.NewField("MaxSlippageBps", err)
	}
	// Serialize `SwapMode`:
	err = encoder.Encode(obj.SwapMode)
	if err != nil {
		return errors.NewField("SwapMode", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `Padding2`:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj IfRebalanceConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IfRebalanceConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IfRebalanceConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `TotalInAmount`:
	err = decoder.Decode(&obj.TotalInAmount)
	if err != nil {
		return errors.NewField("TotalInAmount", err)
	}
	// Deserialize `CurrentInAmount`:
	err = decoder.Decode(&obj.CurrentInAmount)
	if err != nil {
		return errors.NewField("CurrentInAmount", err)
	}
	// Deserialize `CurrentOutAmount`:
	err = decoder.Decode(&obj.CurrentOutAmount)
	if err != nil {
		return errors.NewField("CurrentOutAmount", err)
	}
	// Deserialize `CurrentOutAmountTransferred`:
	err = decoder.Decode(&obj.CurrentOutAmountTransferred)
	if err != nil {
		return errors.NewField("CurrentOutAmountTransferred", err)
	}
	// Deserialize `CurrentInAmountSinceLastTransfer`:
	err = decoder.Decode(&obj.CurrentInAmountSinceLastTransfer)
	if err != nil {
		return errors.NewField("CurrentInAmountSinceLastTransfer", err)
	}
	// Deserialize `EpochStartTs`:
	err = decoder.Decode(&obj.EpochStartTs)
	if err != nil {
		return errors.NewField("EpochStartTs", err)
	}
	// Deserialize `EpochInAmount`:
	err = decoder.Decode(&obj.EpochInAmount)
	if err != nil {
		return errors.NewField("EpochInAmount", err)
	}
	// Deserialize `EpochMaxInAmount`:
	err = decoder.Decode(&obj.EpochMaxInAmount)
	if err != nil {
		return errors.NewField("EpochMaxInAmount", err)
	}
	// Deserialize `EpochDuration`:
	err = decoder.Decode(&obj.EpochDuration)
	if err != nil {
		return errors.NewField("EpochDuration", err)
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Deserialize `MaxSlippageBps`:
	err = decoder.Decode(&obj.MaxSlippageBps)
	if err != nil {
		return errors.NewField("MaxSlippageBps", err)
	}
	// Deserialize `SwapMode`:
	err = decoder.Decode(&obj.SwapMode)
	if err != nil {
		return errors.NewField("SwapMode", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return errors.NewField("Padding2", err)
	}
	return nil
}

func (obj *IfRebalanceConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IfRebalanceConfig: %w", err)
	}
	return nil
}

func UnmarshalIfRebalanceConfig(buf []byte) (*IfRebalanceConfig, error) {
	obj := new(IfRebalanceConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceFundStake struct {
	Authority                 solanago.PublicKey `json:"authority"`
	IfShares                  binary.Uint128     `json:"ifShares"`
	LastWithdrawRequestShares binary.Uint128     `json:"lastWithdrawRequestShares"`
	IfBase                    binary.Uint128     `json:"ifBase"`
	LastValidTs               int64              `json:"lastValidTs"`
	LastWithdrawRequestValue  uint64             `json:"lastWithdrawRequestValue"`
	LastWithdrawRequestTs     int64              `json:"lastWithdrawRequestTs"`
	CostBasis                 int64              `json:"costBasis"`
	MarketIndex               uint16             `json:"marketIndex"`
	Padding                   [14]uint8          `json:"padding"`
}

func (obj InsuranceFundStake) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `IfShares`:
	err = encoder.Encode(obj.IfShares)
	if err != nil {
		return errors.NewField("IfShares", err)
	}
	// Serialize `LastWithdrawRequestShares`:
	err = encoder.Encode(obj.LastWithdrawRequestShares)
	if err != nil {
		return errors.NewField("LastWithdrawRequestShares", err)
	}
	// Serialize `IfBase`:
	err = encoder.Encode(obj.IfBase)
	if err != nil {
		return errors.NewField("IfBase", err)
	}
	// Serialize `LastValidTs`:
	err = encoder.Encode(obj.LastValidTs)
	if err != nil {
		return errors.NewField("LastValidTs", err)
	}
	// Serialize `LastWithdrawRequestValue`:
	err = encoder.Encode(obj.LastWithdrawRequestValue)
	if err != nil {
		return errors.NewField("LastWithdrawRequestValue", err)
	}
	// Serialize `LastWithdrawRequestTs`:
	err = encoder.Encode(obj.LastWithdrawRequestTs)
	if err != nil {
		return errors.NewField("LastWithdrawRequestTs", err)
	}
	// Serialize `CostBasis`:
	err = encoder.Encode(obj.CostBasis)
	if err != nil {
		return errors.NewField("CostBasis", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj InsuranceFundStake) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceFundStake: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceFundStake) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `IfShares`:
	err = decoder.Decode(&obj.IfShares)
	if err != nil {
		return errors.NewField("IfShares", err)
	}
	// Deserialize `LastWithdrawRequestShares`:
	err = decoder.Decode(&obj.LastWithdrawRequestShares)
	if err != nil {
		return errors.NewField("LastWithdrawRequestShares", err)
	}
	// Deserialize `IfBase`:
	err = decoder.Decode(&obj.IfBase)
	if err != nil {
		return errors.NewField("IfBase", err)
	}
	// Deserialize `LastValidTs`:
	err = decoder.Decode(&obj.LastValidTs)
	if err != nil {
		return errors.NewField("LastValidTs", err)
	}
	// Deserialize `LastWithdrawRequestValue`:
	err = decoder.Decode(&obj.LastWithdrawRequestValue)
	if err != nil {
		return errors.NewField("LastWithdrawRequestValue", err)
	}
	// Deserialize `LastWithdrawRequestTs`:
	err = decoder.Decode(&obj.LastWithdrawRequestTs)
	if err != nil {
		return errors.NewField("LastWithdrawRequestTs", err)
	}
	// Deserialize `CostBasis`:
	err = decoder.Decode(&obj.CostBasis)
	if err != nil {
		return errors.NewField("CostBasis", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *InsuranceFundStake) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceFundStake: %w", err)
	}
	return nil
}

func UnmarshalInsuranceFundStake(buf []byte) (*InsuranceFundStake, error) {
	obj := new(InsuranceFundStake)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ProtocolIfSharesTransferConfig struct {
	WhitelistedSigners   [4]solanago.PublicKey `json:"whitelistedSigners"`
	MaxTransferPerEpoch  binary.Uint128        `json:"maxTransferPerEpoch"`
	CurrentEpochTransfer binary.Uint128        `json:"currentEpochTransfer"`
	NextEpochTs          int64                 `json:"nextEpochTs"`
	Padding              [8]binary.Uint128     `json:"padding"`
}

func (obj ProtocolIfSharesTransferConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `WhitelistedSigners`:
	err = encoder.Encode(obj.WhitelistedSigners)
	if err != nil {
		return errors.NewField("WhitelistedSigners", err)
	}
	// Serialize `MaxTransferPerEpoch`:
	err = encoder.Encode(obj.MaxTransferPerEpoch)
	if err != nil {
		return errors.NewField("MaxTransferPerEpoch", err)
	}
	// Serialize `CurrentEpochTransfer`:
	err = encoder.Encode(obj.CurrentEpochTransfer)
	if err != nil {
		return errors.NewField("CurrentEpochTransfer", err)
	}
	// Serialize `NextEpochTs`:
	err = encoder.Encode(obj.NextEpochTs)
	if err != nil {
		return errors.NewField("NextEpochTs", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ProtocolIfSharesTransferConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ProtocolIfSharesTransferConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ProtocolIfSharesTransferConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `WhitelistedSigners`:
	err = decoder.Decode(&obj.WhitelistedSigners)
	if err != nil {
		return errors.NewField("WhitelistedSigners", err)
	}
	// Deserialize `MaxTransferPerEpoch`:
	err = decoder.Decode(&obj.MaxTransferPerEpoch)
	if err != nil {
		return errors.NewField("MaxTransferPerEpoch", err)
	}
	// Deserialize `CurrentEpochTransfer`:
	err = decoder.Decode(&obj.CurrentEpochTransfer)
	if err != nil {
		return errors.NewField("CurrentEpochTransfer", err)
	}
	// Deserialize `NextEpochTs`:
	err = decoder.Decode(&obj.NextEpochTs)
	if err != nil {
		return errors.NewField("NextEpochTs", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ProtocolIfSharesTransferConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ProtocolIfSharesTransferConfig: %w", err)
	}
	return nil
}

func UnmarshalProtocolIfSharesTransferConfig(buf []byte) (*ProtocolIfSharesTransferConfig, error) {
	obj := new(ProtocolIfSharesTransferConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PrelaunchOracle struct {
	Price             int64     `json:"price"`
	MaxPrice          int64     `json:"maxPrice"`
	Confidence        uint64    `json:"confidence"`
	LastUpdateSlot    uint64    `json:"lastUpdateSlot"`
	AmmLastUpdateSlot uint64    `json:"ammLastUpdateSlot"`
	PerpMarketIndex   uint16    `json:"perpMarketIndex"`
	Padding           [70]uint8 `json:"padding"`
}

func (obj PrelaunchOracle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `MaxPrice`:
	err = encoder.Encode(obj.MaxPrice)
	if err != nil {
		return errors.NewField("MaxPrice", err)
	}
	// Serialize `Confidence`:
	err = encoder.Encode(obj.Confidence)
	if err != nil {
		return errors.NewField("Confidence", err)
	}
	// Serialize `LastUpdateSlot`:
	err = encoder.Encode(obj.LastUpdateSlot)
	if err != nil {
		return errors.NewField("LastUpdateSlot", err)
	}
	// Serialize `AmmLastUpdateSlot`:
	err = encoder.Encode(obj.AmmLastUpdateSlot)
	if err != nil {
		return errors.NewField("AmmLastUpdateSlot", err)
	}
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PrelaunchOracle) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PrelaunchOracle: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PrelaunchOracle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `MaxPrice`:
	err = decoder.Decode(&obj.MaxPrice)
	if err != nil {
		return errors.NewField("MaxPrice", err)
	}
	// Deserialize `Confidence`:
	err = decoder.Decode(&obj.Confidence)
	if err != nil {
		return errors.NewField("Confidence", err)
	}
	// Deserialize `LastUpdateSlot`:
	err = decoder.Decode(&obj.LastUpdateSlot)
	if err != nil {
		return errors.NewField("LastUpdateSlot", err)
	}
	// Deserialize `AmmLastUpdateSlot`:
	err = decoder.Decode(&obj.AmmLastUpdateSlot)
	if err != nil {
		return errors.NewField("AmmLastUpdateSlot", err)
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PrelaunchOracle) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PrelaunchOracle: %w", err)
	}
	return nil
}

func UnmarshalPrelaunchOracle(buf []byte) (*PrelaunchOracle, error) {
	obj := new(PrelaunchOracle)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PerpMarket struct {
	// The perp market's address. It is a pda of the market index
	Pubkey solanago.PublicKey `json:"pubkey"`

	// The automated market maker
	Amm Amm `json:"amm"`

	// The market's pnl pool. When users settle negative pnl, the balance increases.
	// When users settle positive pnl, the balance decreases. Can not go negative.
	PnlPool PoolBalance `json:"pnlPool"`

	// Encoded display name for the perp market e.g. SOL-PERP
	Name [32]uint8 `json:"name"`

	// The perp market's claim on the insurance fund
	InsuranceClaim InsuranceClaim `json:"insuranceClaim"`

	// The max pnl imbalance before positive pnl asset weight is discounted
	// pnl imbalance is the difference between long and short pnl. When it's greater than 0,
	// the amm has negative pnl and the initial asset weight for positive pnl is discounted
	// precision = QUOTE_PRECISION
	UnrealizedPnlMaxImbalance uint64 `json:"unrealizedPnlMaxImbalance"`

	// The ts when the market will be expired. Only set if market is in reduce only mode
	ExpiryTs int64 `json:"expiryTs"`

	// The price at which positions will be settled. Only set if market is expired
	// precision = PRICE_PRECISION
	ExpiryPrice int64 `json:"expiryPrice"`

	// Every trade has a fill record id. This is the next id to be used
	NextFillRecordId uint64 `json:"nextFillRecordId"`

	// Every funding rate update has a record id. This is the next id to be used
	NextFundingRateRecordId uint64 `json:"nextFundingRateRecordId"`

	// Every amm k updated has a record id. This is the next id to be used
	NextCurveRecordId uint64 `json:"nextCurveRecordId"`

	// The initial margin fraction factor. Used to increase margin ratio for large positions
	// precision: MARGIN_PRECISION
	ImfFactor uint32 `json:"imfFactor"`

	// The imf factor for unrealized pnl. Used to discount asset weight for large positive pnl
	// precision: MARGIN_PRECISION
	UnrealizedPnlImfFactor uint32 `json:"unrealizedPnlImfFactor"`

	// The fee the liquidator is paid for taking over perp position
	// precision: LIQUIDATOR_FEE_PRECISION
	LiquidatorFee uint32 `json:"liquidatorFee"`

	// The fee the insurance fund receives from liquidation
	// precision: LIQUIDATOR_FEE_PRECISION
	IfLiquidationFee uint32 `json:"ifLiquidationFee"`

	// The margin ratio which determines how much collateral is required to open a position
	// e.g. margin ratio of .1 means a user must have $100 of total collateral to open a $1000 position
	// precision: MARGIN_PRECISION
	MarginRatioInitial uint32 `json:"marginRatioInitial"`

	// The margin ratio which determines when a user will be liquidated
	// e.g. margin ratio of .05 means a user must have $50 of total collateral to maintain a $1000 position
	// else they will be liquidated
	// precision: MARGIN_PRECISION
	MarginRatioMaintenance uint32 `json:"marginRatioMaintenance"`

	// The initial asset weight for positive pnl. Negative pnl always has an asset weight of 1
	// precision: SPOT_WEIGHT_PRECISION
	UnrealizedPnlInitialAssetWeight uint32 `json:"unrealizedPnlInitialAssetWeight"`

	// The maintenance asset weight for positive pnl. Negative pnl always has an asset weight of 1
	// precision: SPOT_WEIGHT_PRECISION
	UnrealizedPnlMaintenanceAssetWeight uint32 `json:"unrealizedPnlMaintenanceAssetWeight"`

	// number of users in a position (base)
	NumberOfUsersWithBase uint32 `json:"numberOfUsersWithBase"`

	// number of users in a position (pnl) or pnl (quote)
	NumberOfUsers uint32 `json:"numberOfUsers"`
	MarketIndex   uint16 `json:"marketIndex"`

	// Whether a market is active, reduce only, expired, etc
	// Affects whether users can open/close positions
	Status MarketStatus `json:"status"`

	// Currently only Perpetual markets are supported
	ContractType ContractType `json:"contractType"`

	// The contract tier determines how much insurance a market can receive, with more speculative markets receiving less insurance
	// It also influences the order perp markets can be liquidated, with less speculative markets being liquidated first
	ContractTier     ContractTier `json:"contractTier"`
	PausedOperations uint8        `json:"pausedOperations"`

	// The spot market that pnl is settled in
	QuoteSpotMarketIndex uint16 `json:"quoteSpotMarketIndex"`

	// Between -100 and 100, represents what % to increase/decrease the fee by
	// E.g. if this is -50 and the fee is 5bps, the new fee will be 2.5bps
	// if this is 50 and the fee is 5bps, the new fee will be 7.5bps
	FeeAdjustment int16 `json:"feeAdjustment"`

	// fuel multiplier for perp funding
	// precision: 10
	FuelBoostPosition uint8 `json:"fuelBoostPosition"`

	// fuel multiplier for perp taker
	// precision: 10
	FuelBoostTaker uint8 `json:"fuelBoostTaker"`

	// fuel multiplier for perp maker
	// precision: 10
	FuelBoostMaker                     uint8     `json:"fuelBoostMaker"`
	PoolId                             uint8     `json:"poolId"`
	HighLeverageMarginRatioInitial     uint16    `json:"highLeverageMarginRatioInitial"`
	HighLeverageMarginRatioMaintenance uint16    `json:"highLeverageMarginRatioMaintenance"`
	ProtectedMakerLimitPriceDivisor    uint8     `json:"protectedMakerLimitPriceDivisor"`
	ProtectedMakerDynamicDivisor       uint8     `json:"protectedMakerDynamicDivisor"`
	Padding1                           uint32    `json:"padding1"`
	LastFillPrice                      uint64    `json:"lastFillPrice"`
	Padding                            [24]uint8 `json:"padding"`
}

func (obj PerpMarket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `Amm`:
	err = encoder.Encode(obj.Amm)
	if err != nil {
		return errors.NewField("Amm", err)
	}
	// Serialize `PnlPool`:
	err = encoder.Encode(obj.PnlPool)
	if err != nil {
		return errors.NewField("PnlPool", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `InsuranceClaim`:
	err = encoder.Encode(obj.InsuranceClaim)
	if err != nil {
		return errors.NewField("InsuranceClaim", err)
	}
	// Serialize `UnrealizedPnlMaxImbalance`:
	err = encoder.Encode(obj.UnrealizedPnlMaxImbalance)
	if err != nil {
		return errors.NewField("UnrealizedPnlMaxImbalance", err)
	}
	// Serialize `ExpiryTs`:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return errors.NewField("ExpiryTs", err)
	}
	// Serialize `ExpiryPrice`:
	err = encoder.Encode(obj.ExpiryPrice)
	if err != nil {
		return errors.NewField("ExpiryPrice", err)
	}
	// Serialize `NextFillRecordId`:
	err = encoder.Encode(obj.NextFillRecordId)
	if err != nil {
		return errors.NewField("NextFillRecordId", err)
	}
	// Serialize `NextFundingRateRecordId`:
	err = encoder.Encode(obj.NextFundingRateRecordId)
	if err != nil {
		return errors.NewField("NextFundingRateRecordId", err)
	}
	// Serialize `NextCurveRecordId`:
	err = encoder.Encode(obj.NextCurveRecordId)
	if err != nil {
		return errors.NewField("NextCurveRecordId", err)
	}
	// Serialize `ImfFactor`:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return errors.NewField("ImfFactor", err)
	}
	// Serialize `UnrealizedPnlImfFactor`:
	err = encoder.Encode(obj.UnrealizedPnlImfFactor)
	if err != nil {
		return errors.NewField("UnrealizedPnlImfFactor", err)
	}
	// Serialize `LiquidatorFee`:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Serialize `IfLiquidationFee`:
	err = encoder.Encode(obj.IfLiquidationFee)
	if err != nil {
		return errors.NewField("IfLiquidationFee", err)
	}
	// Serialize `MarginRatioInitial`:
	err = encoder.Encode(obj.MarginRatioInitial)
	if err != nil {
		return errors.NewField("MarginRatioInitial", err)
	}
	// Serialize `MarginRatioMaintenance`:
	err = encoder.Encode(obj.MarginRatioMaintenance)
	if err != nil {
		return errors.NewField("MarginRatioMaintenance", err)
	}
	// Serialize `UnrealizedPnlInitialAssetWeight`:
	err = encoder.Encode(obj.UnrealizedPnlInitialAssetWeight)
	if err != nil {
		return errors.NewField("UnrealizedPnlInitialAssetWeight", err)
	}
	// Serialize `UnrealizedPnlMaintenanceAssetWeight`:
	err = encoder.Encode(obj.UnrealizedPnlMaintenanceAssetWeight)
	if err != nil {
		return errors.NewField("UnrealizedPnlMaintenanceAssetWeight", err)
	}
	// Serialize `NumberOfUsersWithBase`:
	err = encoder.Encode(obj.NumberOfUsersWithBase)
	if err != nil {
		return errors.NewField("NumberOfUsersWithBase", err)
	}
	// Serialize `NumberOfUsers`:
	err = encoder.Encode(obj.NumberOfUsers)
	if err != nil {
		return errors.NewField("NumberOfUsers", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `ContractType`:
	err = encoder.Encode(obj.ContractType)
	if err != nil {
		return errors.NewField("ContractType", err)
	}
	// Serialize `ContractTier`:
	err = encoder.Encode(obj.ContractTier)
	if err != nil {
		return errors.NewField("ContractTier", err)
	}
	// Serialize `PausedOperations`:
	err = encoder.Encode(obj.PausedOperations)
	if err != nil {
		return errors.NewField("PausedOperations", err)
	}
	// Serialize `QuoteSpotMarketIndex`:
	err = encoder.Encode(obj.QuoteSpotMarketIndex)
	if err != nil {
		return errors.NewField("QuoteSpotMarketIndex", err)
	}
	// Serialize `FeeAdjustment`:
	err = encoder.Encode(obj.FeeAdjustment)
	if err != nil {
		return errors.NewField("FeeAdjustment", err)
	}
	// Serialize `FuelBoostPosition`:
	err = encoder.Encode(obj.FuelBoostPosition)
	if err != nil {
		return errors.NewField("FuelBoostPosition", err)
	}
	// Serialize `FuelBoostTaker`:
	err = encoder.Encode(obj.FuelBoostTaker)
	if err != nil {
		return errors.NewField("FuelBoostTaker", err)
	}
	// Serialize `FuelBoostMaker`:
	err = encoder.Encode(obj.FuelBoostMaker)
	if err != nil {
		return errors.NewField("FuelBoostMaker", err)
	}
	// Serialize `PoolId`:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Serialize `HighLeverageMarginRatioInitial`:
	err = encoder.Encode(obj.HighLeverageMarginRatioInitial)
	if err != nil {
		return errors.NewField("HighLeverageMarginRatioInitial", err)
	}
	// Serialize `HighLeverageMarginRatioMaintenance`:
	err = encoder.Encode(obj.HighLeverageMarginRatioMaintenance)
	if err != nil {
		return errors.NewField("HighLeverageMarginRatioMaintenance", err)
	}
	// Serialize `ProtectedMakerLimitPriceDivisor`:
	err = encoder.Encode(obj.ProtectedMakerLimitPriceDivisor)
	if err != nil {
		return errors.NewField("ProtectedMakerLimitPriceDivisor", err)
	}
	// Serialize `ProtectedMakerDynamicDivisor`:
	err = encoder.Encode(obj.ProtectedMakerDynamicDivisor)
	if err != nil {
		return errors.NewField("ProtectedMakerDynamicDivisor", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `LastFillPrice`:
	err = encoder.Encode(obj.LastFillPrice)
	if err != nil {
		return errors.NewField("LastFillPrice", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PerpMarket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PerpMarket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PerpMarket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `Amm`:
	err = decoder.Decode(&obj.Amm)
	if err != nil {
		return errors.NewField("Amm", err)
	}
	// Deserialize `PnlPool`:
	err = decoder.Decode(&obj.PnlPool)
	if err != nil {
		return errors.NewField("PnlPool", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `InsuranceClaim`:
	err = decoder.Decode(&obj.InsuranceClaim)
	if err != nil {
		return errors.NewField("InsuranceClaim", err)
	}
	// Deserialize `UnrealizedPnlMaxImbalance`:
	err = decoder.Decode(&obj.UnrealizedPnlMaxImbalance)
	if err != nil {
		return errors.NewField("UnrealizedPnlMaxImbalance", err)
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return errors.NewField("ExpiryTs", err)
	}
	// Deserialize `ExpiryPrice`:
	err = decoder.Decode(&obj.ExpiryPrice)
	if err != nil {
		return errors.NewField("ExpiryPrice", err)
	}
	// Deserialize `NextFillRecordId`:
	err = decoder.Decode(&obj.NextFillRecordId)
	if err != nil {
		return errors.NewField("NextFillRecordId", err)
	}
	// Deserialize `NextFundingRateRecordId`:
	err = decoder.Decode(&obj.NextFundingRateRecordId)
	if err != nil {
		return errors.NewField("NextFundingRateRecordId", err)
	}
	// Deserialize `NextCurveRecordId`:
	err = decoder.Decode(&obj.NextCurveRecordId)
	if err != nil {
		return errors.NewField("NextCurveRecordId", err)
	}
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return errors.NewField("ImfFactor", err)
	}
	// Deserialize `UnrealizedPnlImfFactor`:
	err = decoder.Decode(&obj.UnrealizedPnlImfFactor)
	if err != nil {
		return errors.NewField("UnrealizedPnlImfFactor", err)
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Deserialize `IfLiquidationFee`:
	err = decoder.Decode(&obj.IfLiquidationFee)
	if err != nil {
		return errors.NewField("IfLiquidationFee", err)
	}
	// Deserialize `MarginRatioInitial`:
	err = decoder.Decode(&obj.MarginRatioInitial)
	if err != nil {
		return errors.NewField("MarginRatioInitial", err)
	}
	// Deserialize `MarginRatioMaintenance`:
	err = decoder.Decode(&obj.MarginRatioMaintenance)
	if err != nil {
		return errors.NewField("MarginRatioMaintenance", err)
	}
	// Deserialize `UnrealizedPnlInitialAssetWeight`:
	err = decoder.Decode(&obj.UnrealizedPnlInitialAssetWeight)
	if err != nil {
		return errors.NewField("UnrealizedPnlInitialAssetWeight", err)
	}
	// Deserialize `UnrealizedPnlMaintenanceAssetWeight`:
	err = decoder.Decode(&obj.UnrealizedPnlMaintenanceAssetWeight)
	if err != nil {
		return errors.NewField("UnrealizedPnlMaintenanceAssetWeight", err)
	}
	// Deserialize `NumberOfUsersWithBase`:
	err = decoder.Decode(&obj.NumberOfUsersWithBase)
	if err != nil {
		return errors.NewField("NumberOfUsersWithBase", err)
	}
	// Deserialize `NumberOfUsers`:
	err = decoder.Decode(&obj.NumberOfUsers)
	if err != nil {
		return errors.NewField("NumberOfUsers", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `ContractType`:
	err = decoder.Decode(&obj.ContractType)
	if err != nil {
		return errors.NewField("ContractType", err)
	}
	// Deserialize `ContractTier`:
	err = decoder.Decode(&obj.ContractTier)
	if err != nil {
		return errors.NewField("ContractTier", err)
	}
	// Deserialize `PausedOperations`:
	err = decoder.Decode(&obj.PausedOperations)
	if err != nil {
		return errors.NewField("PausedOperations", err)
	}
	// Deserialize `QuoteSpotMarketIndex`:
	err = decoder.Decode(&obj.QuoteSpotMarketIndex)
	if err != nil {
		return errors.NewField("QuoteSpotMarketIndex", err)
	}
	// Deserialize `FeeAdjustment`:
	err = decoder.Decode(&obj.FeeAdjustment)
	if err != nil {
		return errors.NewField("FeeAdjustment", err)
	}
	// Deserialize `FuelBoostPosition`:
	err = decoder.Decode(&obj.FuelBoostPosition)
	if err != nil {
		return errors.NewField("FuelBoostPosition", err)
	}
	// Deserialize `FuelBoostTaker`:
	err = decoder.Decode(&obj.FuelBoostTaker)
	if err != nil {
		return errors.NewField("FuelBoostTaker", err)
	}
	// Deserialize `FuelBoostMaker`:
	err = decoder.Decode(&obj.FuelBoostMaker)
	if err != nil {
		return errors.NewField("FuelBoostMaker", err)
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Deserialize `HighLeverageMarginRatioInitial`:
	err = decoder.Decode(&obj.HighLeverageMarginRatioInitial)
	if err != nil {
		return errors.NewField("HighLeverageMarginRatioInitial", err)
	}
	// Deserialize `HighLeverageMarginRatioMaintenance`:
	err = decoder.Decode(&obj.HighLeverageMarginRatioMaintenance)
	if err != nil {
		return errors.NewField("HighLeverageMarginRatioMaintenance", err)
	}
	// Deserialize `ProtectedMakerLimitPriceDivisor`:
	err = decoder.Decode(&obj.ProtectedMakerLimitPriceDivisor)
	if err != nil {
		return errors.NewField("ProtectedMakerLimitPriceDivisor", err)
	}
	// Deserialize `ProtectedMakerDynamicDivisor`:
	err = decoder.Decode(&obj.ProtectedMakerDynamicDivisor)
	if err != nil {
		return errors.NewField("ProtectedMakerDynamicDivisor", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `LastFillPrice`:
	err = decoder.Decode(&obj.LastFillPrice)
	if err != nil {
		return errors.NewField("LastFillPrice", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PerpMarket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PerpMarket: %w", err)
	}
	return nil
}

func UnmarshalPerpMarket(buf []byte) (*PerpMarket, error) {
	obj := new(PerpMarket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ProtectedMakerModeConfig struct {
	MaxUsers     uint32    `json:"maxUsers"`
	CurrentUsers uint32    `json:"currentUsers"`
	ReduceOnly   uint8     `json:"reduceOnly"`
	Padding      [31]uint8 `json:"padding"`
}

func (obj ProtectedMakerModeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxUsers`:
	err = encoder.Encode(obj.MaxUsers)
	if err != nil {
		return errors.NewField("MaxUsers", err)
	}
	// Serialize `CurrentUsers`:
	err = encoder.Encode(obj.CurrentUsers)
	if err != nil {
		return errors.NewField("CurrentUsers", err)
	}
	// Serialize `ReduceOnly`:
	err = encoder.Encode(obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj ProtectedMakerModeConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ProtectedMakerModeConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ProtectedMakerModeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxUsers`:
	err = decoder.Decode(&obj.MaxUsers)
	if err != nil {
		return errors.NewField("MaxUsers", err)
	}
	// Deserialize `CurrentUsers`:
	err = decoder.Decode(&obj.CurrentUsers)
	if err != nil {
		return errors.NewField("CurrentUsers", err)
	}
	// Deserialize `ReduceOnly`:
	err = decoder.Decode(&obj.ReduceOnly)
	if err != nil {
		return errors.NewField("ReduceOnly", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *ProtectedMakerModeConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ProtectedMakerModeConfig: %w", err)
	}
	return nil
}

func UnmarshalProtectedMakerModeConfig(buf []byte) (*ProtectedMakerModeConfig, error) {
	obj := new(ProtectedMakerModeConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PythLazerOracle struct {
	Price       int64    `json:"price"`
	PublishTime uint64   `json:"publishTime"`
	PostedSlot  uint64   `json:"postedSlot"`
	Exponent    int32    `json:"exponent"`
	Padding     [4]uint8 `json:"padding"`
	Conf        uint64   `json:"conf"`
}

func (obj PythLazerOracle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `PublishTime`:
	err = encoder.Encode(obj.PublishTime)
	if err != nil {
		return errors.NewField("PublishTime", err)
	}
	// Serialize `PostedSlot`:
	err = encoder.Encode(obj.PostedSlot)
	if err != nil {
		return errors.NewField("PostedSlot", err)
	}
	// Serialize `Exponent`:
	err = encoder.Encode(obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `Conf`:
	err = encoder.Encode(obj.Conf)
	if err != nil {
		return errors.NewField("Conf", err)
	}
	return nil
}

func (obj PythLazerOracle) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PythLazerOracle: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PythLazerOracle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `PublishTime`:
	err = decoder.Decode(&obj.PublishTime)
	if err != nil {
		return errors.NewField("PublishTime", err)
	}
	// Deserialize `PostedSlot`:
	err = decoder.Decode(&obj.PostedSlot)
	if err != nil {
		return errors.NewField("PostedSlot", err)
	}
	// Deserialize `Exponent`:
	err = decoder.Decode(&obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `Conf`:
	err = decoder.Decode(&obj.Conf)
	if err != nil {
		return errors.NewField("Conf", err)
	}
	return nil
}

func (obj *PythLazerOracle) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PythLazerOracle: %w", err)
	}
	return nil
}

func UnmarshalPythLazerOracle(buf []byte) (*PythLazerOracle, error) {
	obj := new(PythLazerOracle)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

/*
* This struct is a duplicate of SignedMsgUserOrdersZeroCopy
 * It is used to give anchor an struct to generate the idl for clients
 * The struct SignedMsgUserOrdersZeroCopy is used to load the data in efficiently
*/
type SignedMsgUserOrders struct {
	AuthorityPubkey    solanago.PublicKey `json:"authorityPubkey"`
	Padding            uint32             `json:"padding"`
	SignedMsgOrderData []SignedMsgOrderId `json:"signedMsgOrderData"`
}

func (obj SignedMsgUserOrders) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AuthorityPubkey`:
	err = encoder.Encode(obj.AuthorityPubkey)
	if err != nil {
		return errors.NewField("AuthorityPubkey", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Serialize `SignedMsgOrderData`:
	err = encoder.Encode(obj.SignedMsgOrderData)
	if err != nil {
		return errors.NewField("SignedMsgOrderData", err)
	}
	return nil
}

func (obj SignedMsgUserOrders) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgUserOrders: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgUserOrders) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AuthorityPubkey`:
	err = decoder.Decode(&obj.AuthorityPubkey)
	if err != nil {
		return errors.NewField("AuthorityPubkey", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	// Deserialize `SignedMsgOrderData`:
	err = decoder.Decode(&obj.SignedMsgOrderData)
	if err != nil {
		return errors.NewField("SignedMsgOrderData", err)
	}
	return nil
}

func (obj *SignedMsgUserOrders) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgUserOrders: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgUserOrders(buf []byte) (*SignedMsgUserOrders, error) {
	obj := new(SignedMsgUserOrders)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// * Used to store authenticated delegates for swift-like ws connections
type SignedMsgWsDelegates struct {
	Delegates []solanago.PublicKey `json:"delegates"`
}

func (obj SignedMsgWsDelegates) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Delegates`:
	err = encoder.Encode(obj.Delegates)
	if err != nil {
		return errors.NewField("Delegates", err)
	}
	return nil
}

func (obj SignedMsgWsDelegates) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgWsDelegates: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgWsDelegates) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Delegates`:
	err = decoder.Decode(&obj.Delegates)
	if err != nil {
		return errors.NewField("Delegates", err)
	}
	return nil
}

func (obj *SignedMsgWsDelegates) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgWsDelegates: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgWsDelegates(buf []byte) (*SignedMsgWsDelegates, error) {
	obj := new(SignedMsgWsDelegates)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SpotMarket struct {
	// The address of the spot market. It is a pda of the market index
	Pubkey solanago.PublicKey `json:"pubkey"`

	// The oracle used to price the markets deposits/borrows
	Oracle solanago.PublicKey `json:"oracle"`

	// The token mint of the market
	Mint solanago.PublicKey `json:"mint"`

	// The vault used to store the market's deposits
	// The amount in the vault should be equal to or greater than deposits - borrows
	Vault solanago.PublicKey `json:"vault"`

	// The encoded display name for the market e.g. SOL
	Name                 [32]uint8            `json:"name"`
	HistoricalOracleData HistoricalOracleData `json:"historicalOracleData"`
	HistoricalIndexData  HistoricalIndexData  `json:"historicalIndexData"`

	// Revenue the protocol has collected in this markets token
	// e.g. for SOL-PERP, funds can be settled in usdc and will flow into the USDC revenue pool
	RevenuePool PoolBalance `json:"revenuePool"`

	// The fees collected from swaps between this market and the quote market
	// Is settled to the quote markets revenue pool
	SpotFeePool PoolBalance `json:"spotFeePool"`

	// Details on the insurance fund covering bankruptcies in this markets token
	// Covers bankruptcies for borrows with this markets token and perps settling in this markets token
	InsuranceFund InsuranceFund `json:"insuranceFund"`

	// The total spot fees collected for this market
	// precision: QUOTE_PRECISION
	TotalSpotFee binary.Uint128 `json:"totalSpotFee"`

	// The sum of the scaled balances for deposits across users and pool balances
	// To convert to the deposit token amount, multiply by the cumulative deposit interest
	// precision: SPOT_BALANCE_PRECISION
	DepositBalance binary.Uint128 `json:"depositBalance"`

	// The sum of the scaled balances for borrows across users and pool balances
	// To convert to the borrow token amount, multiply by the cumulative borrow interest
	// precision: SPOT_BALANCE_PRECISION
	BorrowBalance binary.Uint128 `json:"borrowBalance"`

	// The cumulative interest earned by depositors
	// Used to calculate the deposit token amount from the deposit balance
	// precision: SPOT_CUMULATIVE_INTEREST_PRECISION
	CumulativeDepositInterest binary.Uint128 `json:"cumulativeDepositInterest"`

	// The cumulative interest earned by borrowers
	// Used to calculate the borrow token amount from the borrow balance
	// precision: SPOT_CUMULATIVE_INTEREST_PRECISION
	CumulativeBorrowInterest binary.Uint128 `json:"cumulativeBorrowInterest"`

	// The total socialized loss from borrows, in the mint's token
	// precision: token mint precision
	TotalSocialLoss binary.Uint128 `json:"totalSocialLoss"`

	// The total socialized loss from borrows, in the quote market's token
	// preicision: QUOTE_PRECISION
	TotalQuoteSocialLoss binary.Uint128 `json:"totalQuoteSocialLoss"`

	// no withdraw limits/guards when deposits below this threshold
	// precision: token mint precision
	WithdrawGuardThreshold uint64 `json:"withdrawGuardThreshold"`

	// The max amount of token deposits in this market
	// 0 if there is no limit
	// precision: token mint precision
	MaxTokenDeposits uint64 `json:"maxTokenDeposits"`

	// 24hr average of deposit token amount
	// precision: token mint precision
	DepositTokenTwap uint64 `json:"depositTokenTwap"`

	// 24hr average of borrow token amount
	// precision: token mint precision
	BorrowTokenTwap uint64 `json:"borrowTokenTwap"`

	// 24hr average of utilization
	// which is borrow amount over token amount
	// precision: SPOT_UTILIZATION_PRECISION
	UtilizationTwap uint64 `json:"utilizationTwap"`

	// Last time the cumulative deposit and borrow interest was updated
	LastInterestTs uint64 `json:"lastInterestTs"`

	// Last time the deposit/borrow/utilization averages were updated
	LastTwapTs uint64 `json:"lastTwapTs"`

	// The time the market is set to expire. Only set if market is in reduce only mode
	ExpiryTs int64 `json:"expiryTs"`

	// Spot orders must be a multiple of the step size
	// precision: token mint precision
	OrderStepSize uint64 `json:"orderStepSize"`

	// Spot orders must be a multiple of the tick size
	// precision: PRICE_PRECISION
	OrderTickSize uint64 `json:"orderTickSize"`

	// The minimum order size
	// precision: token mint precision
	MinOrderSize uint64 `json:"minOrderSize"`

	// The maximum spot position size
	// if the limit is 0, there is no limit
	// precision: token mint precision
	MaxPositionSize uint64 `json:"maxPositionSize"`

	// Every spot trade has a fill record id. This is the next id to use
	NextFillRecordId uint64 `json:"nextFillRecordId"`

	// Every deposit has a deposit record id. This is the next id to use
	NextDepositRecordId uint64 `json:"nextDepositRecordId"`

	// The initial asset weight used to calculate a deposits contribution to a users initial total collateral
	// e.g. if the asset weight is .8, $100 of deposits contributes $80 to the users initial total collateral
	// precision: SPOT_WEIGHT_PRECISION
	InitialAssetWeight uint32 `json:"initialAssetWeight"`

	// The maintenance asset weight used to calculate a deposits contribution to a users maintenance total collateral
	// e.g. if the asset weight is .9, $100 of deposits contributes $90 to the users maintenance total collateral
	// precision: SPOT_WEIGHT_PRECISION
	MaintenanceAssetWeight uint32 `json:"maintenanceAssetWeight"`

	// The initial liability weight used to calculate a borrows contribution to a users initial margin requirement
	// e.g. if the liability weight is .9, $100 of borrows contributes $90 to the users initial margin requirement
	// precision: SPOT_WEIGHT_PRECISION
	InitialLiabilityWeight uint32 `json:"initialLiabilityWeight"`

	// The maintenance liability weight used to calculate a borrows contribution to a users maintenance margin requirement
	// e.g. if the liability weight is .8, $100 of borrows contributes $80 to the users maintenance margin requirement
	// precision: SPOT_WEIGHT_PRECISION
	MaintenanceLiabilityWeight uint32 `json:"maintenanceLiabilityWeight"`

	// The initial margin fraction factor. Used to increase liability weight/decrease asset weight for large positions
	// precision: MARGIN_PRECISION
	ImfFactor uint32 `json:"imfFactor"`

	// The fee the liquidator is paid for taking over borrow/deposit
	// precision: LIQUIDATOR_FEE_PRECISION
	LiquidatorFee uint32 `json:"liquidatorFee"`

	// The fee the insurance fund receives from liquidation
	// precision: LIQUIDATOR_FEE_PRECISION
	IfLiquidationFee uint32 `json:"ifLiquidationFee"`

	// The optimal utilization rate for this market.
	// Used to determine the markets borrow rate
	// precision: SPOT_UTILIZATION_PRECISION
	OptimalUtilization uint32 `json:"optimalUtilization"`

	// The borrow rate for this market when the market has optimal utilization
	// precision: SPOT_RATE_PRECISION
	OptimalBorrowRate uint32 `json:"optimalBorrowRate"`

	// The borrow rate for this market when the market has 1000 utilization
	// precision: SPOT_RATE_PRECISION
	MaxBorrowRate uint32 `json:"maxBorrowRate"`

	// The market's token mint's decimals. To from decimals to a precision, 10^decimals
	Decimals    uint32 `json:"decimals"`
	MarketIndex uint16 `json:"marketIndex"`

	// Whether or not spot trading is enabled
	OrdersEnabled bool         `json:"ordersEnabled"`
	OracleSource  OracleSource `json:"oracleSource"`
	Status        MarketStatus `json:"status"`

	// The asset tier affects how a deposit can be used as collateral and the priority for a borrow being liquidated
	AssetTier          AssetTier `json:"assetTier"`
	PausedOperations   uint8     `json:"pausedOperations"`
	IfPausedOperations uint8     `json:"ifPausedOperations"`
	FeeAdjustment      int16     `json:"feeAdjustment"`

	// What fraction of max_token_deposits
	// disabled when 0, 1 => 1/10000 => .01% of max_token_deposits
	// precision: X/10000
	MaxTokenBorrowsFraction uint16 `json:"maxTokenBorrowsFraction"`

	// For swaps, the amount of token loaned out in the begin_swap ix
	// precision: token mint precision
	FlashLoanAmount uint64 `json:"flashLoanAmount"`

	// For swaps, the amount in the users token account in the begin_swap ix
	// Used to calculate how much of the token left the system in end_swap ix
	// precision: token mint precision
	FlashLoanInitialTokenAmount uint64 `json:"flashLoanInitialTokenAmount"`

	// The total fees received from swaps
	// precision: token mint precision
	TotalSwapFee uint64 `json:"totalSwapFee"`

	// When to begin scaling down the initial asset weight
	// disabled when 0
	// precision: QUOTE_PRECISION
	ScaleInitialAssetWeightStart uint64 `json:"scaleInitialAssetWeightStart"`

	// The min borrow rate for this market when the market regardless of utilization
	// 1 => 1/200 => .5%
	// precision: X/200
	MinBorrowRate uint8 `json:"minBorrowRate"`

	// fuel multiplier for spot deposits
	// precision: 10
	FuelBoostDeposits uint8 `json:"fuelBoostDeposits"`

	// fuel multiplier for spot borrows
	// precision: 10
	FuelBoostBorrows uint8 `json:"fuelBoostBorrows"`

	// fuel multiplier for spot taker
	// precision: 10
	FuelBoostTaker uint8 `json:"fuelBoostTaker"`

	// fuel multiplier for spot maker
	// precision: 10
	FuelBoostMaker uint8 `json:"fuelBoostMaker"`

	// fuel multiplier for spot insurance stake
	// precision: 10
	FuelBoostInsurance uint8     `json:"fuelBoostInsurance"`
	TokenProgramFlag   uint8     `json:"tokenProgramFlag"`
	PoolId             uint8     `json:"poolId"`
	Padding            [40]uint8 `json:"padding"`
}

func (obj SpotMarket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pubkey`:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `Vault`:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `HistoricalOracleData`:
	err = encoder.Encode(obj.HistoricalOracleData)
	if err != nil {
		return errors.NewField("HistoricalOracleData", err)
	}
	// Serialize `HistoricalIndexData`:
	err = encoder.Encode(obj.HistoricalIndexData)
	if err != nil {
		return errors.NewField("HistoricalIndexData", err)
	}
	// Serialize `RevenuePool`:
	err = encoder.Encode(obj.RevenuePool)
	if err != nil {
		return errors.NewField("RevenuePool", err)
	}
	// Serialize `SpotFeePool`:
	err = encoder.Encode(obj.SpotFeePool)
	if err != nil {
		return errors.NewField("SpotFeePool", err)
	}
	// Serialize `InsuranceFund`:
	err = encoder.Encode(obj.InsuranceFund)
	if err != nil {
		return errors.NewField("InsuranceFund", err)
	}
	// Serialize `TotalSpotFee`:
	err = encoder.Encode(obj.TotalSpotFee)
	if err != nil {
		return errors.NewField("TotalSpotFee", err)
	}
	// Serialize `DepositBalance`:
	err = encoder.Encode(obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Serialize `BorrowBalance`:
	err = encoder.Encode(obj.BorrowBalance)
	if err != nil {
		return errors.NewField("BorrowBalance", err)
	}
	// Serialize `CumulativeDepositInterest`:
	err = encoder.Encode(obj.CumulativeDepositInterest)
	if err != nil {
		return errors.NewField("CumulativeDepositInterest", err)
	}
	// Serialize `CumulativeBorrowInterest`:
	err = encoder.Encode(obj.CumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("CumulativeBorrowInterest", err)
	}
	// Serialize `TotalSocialLoss`:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Serialize `TotalQuoteSocialLoss`:
	err = encoder.Encode(obj.TotalQuoteSocialLoss)
	if err != nil {
		return errors.NewField("TotalQuoteSocialLoss", err)
	}
	// Serialize `WithdrawGuardThreshold`:
	err = encoder.Encode(obj.WithdrawGuardThreshold)
	if err != nil {
		return errors.NewField("WithdrawGuardThreshold", err)
	}
	// Serialize `MaxTokenDeposits`:
	err = encoder.Encode(obj.MaxTokenDeposits)
	if err != nil {
		return errors.NewField("MaxTokenDeposits", err)
	}
	// Serialize `DepositTokenTwap`:
	err = encoder.Encode(obj.DepositTokenTwap)
	if err != nil {
		return errors.NewField("DepositTokenTwap", err)
	}
	// Serialize `BorrowTokenTwap`:
	err = encoder.Encode(obj.BorrowTokenTwap)
	if err != nil {
		return errors.NewField("BorrowTokenTwap", err)
	}
	// Serialize `UtilizationTwap`:
	err = encoder.Encode(obj.UtilizationTwap)
	if err != nil {
		return errors.NewField("UtilizationTwap", err)
	}
	// Serialize `LastInterestTs`:
	err = encoder.Encode(obj.LastInterestTs)
	if err != nil {
		return errors.NewField("LastInterestTs", err)
	}
	// Serialize `LastTwapTs`:
	err = encoder.Encode(obj.LastTwapTs)
	if err != nil {
		return errors.NewField("LastTwapTs", err)
	}
	// Serialize `ExpiryTs`:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return errors.NewField("ExpiryTs", err)
	}
	// Serialize `OrderStepSize`:
	err = encoder.Encode(obj.OrderStepSize)
	if err != nil {
		return errors.NewField("OrderStepSize", err)
	}
	// Serialize `OrderTickSize`:
	err = encoder.Encode(obj.OrderTickSize)
	if err != nil {
		return errors.NewField("OrderTickSize", err)
	}
	// Serialize `MinOrderSize`:
	err = encoder.Encode(obj.MinOrderSize)
	if err != nil {
		return errors.NewField("MinOrderSize", err)
	}
	// Serialize `MaxPositionSize`:
	err = encoder.Encode(obj.MaxPositionSize)
	if err != nil {
		return errors.NewField("MaxPositionSize", err)
	}
	// Serialize `NextFillRecordId`:
	err = encoder.Encode(obj.NextFillRecordId)
	if err != nil {
		return errors.NewField("NextFillRecordId", err)
	}
	// Serialize `NextDepositRecordId`:
	err = encoder.Encode(obj.NextDepositRecordId)
	if err != nil {
		return errors.NewField("NextDepositRecordId", err)
	}
	// Serialize `InitialAssetWeight`:
	err = encoder.Encode(obj.InitialAssetWeight)
	if err != nil {
		return errors.NewField("InitialAssetWeight", err)
	}
	// Serialize `MaintenanceAssetWeight`:
	err = encoder.Encode(obj.MaintenanceAssetWeight)
	if err != nil {
		return errors.NewField("MaintenanceAssetWeight", err)
	}
	// Serialize `InitialLiabilityWeight`:
	err = encoder.Encode(obj.InitialLiabilityWeight)
	if err != nil {
		return errors.NewField("InitialLiabilityWeight", err)
	}
	// Serialize `MaintenanceLiabilityWeight`:
	err = encoder.Encode(obj.MaintenanceLiabilityWeight)
	if err != nil {
		return errors.NewField("MaintenanceLiabilityWeight", err)
	}
	// Serialize `ImfFactor`:
	err = encoder.Encode(obj.ImfFactor)
	if err != nil {
		return errors.NewField("ImfFactor", err)
	}
	// Serialize `LiquidatorFee`:
	err = encoder.Encode(obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Serialize `IfLiquidationFee`:
	err = encoder.Encode(obj.IfLiquidationFee)
	if err != nil {
		return errors.NewField("IfLiquidationFee", err)
	}
	// Serialize `OptimalUtilization`:
	err = encoder.Encode(obj.OptimalUtilization)
	if err != nil {
		return errors.NewField("OptimalUtilization", err)
	}
	// Serialize `OptimalBorrowRate`:
	err = encoder.Encode(obj.OptimalBorrowRate)
	if err != nil {
		return errors.NewField("OptimalBorrowRate", err)
	}
	// Serialize `MaxBorrowRate`:
	err = encoder.Encode(obj.MaxBorrowRate)
	if err != nil {
		return errors.NewField("MaxBorrowRate", err)
	}
	// Serialize `Decimals`:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `OrdersEnabled`:
	err = encoder.Encode(obj.OrdersEnabled)
	if err != nil {
		return errors.NewField("OrdersEnabled", err)
	}
	// Serialize `OracleSource`:
	err = encoder.Encode(obj.OracleSource)
	if err != nil {
		return errors.NewField("OracleSource", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `AssetTier`:
	err = encoder.Encode(obj.AssetTier)
	if err != nil {
		return errors.NewField("AssetTier", err)
	}
	// Serialize `PausedOperations`:
	err = encoder.Encode(obj.PausedOperations)
	if err != nil {
		return errors.NewField("PausedOperations", err)
	}
	// Serialize `IfPausedOperations`:
	err = encoder.Encode(obj.IfPausedOperations)
	if err != nil {
		return errors.NewField("IfPausedOperations", err)
	}
	// Serialize `FeeAdjustment`:
	err = encoder.Encode(obj.FeeAdjustment)
	if err != nil {
		return errors.NewField("FeeAdjustment", err)
	}
	// Serialize `MaxTokenBorrowsFraction`:
	err = encoder.Encode(obj.MaxTokenBorrowsFraction)
	if err != nil {
		return errors.NewField("MaxTokenBorrowsFraction", err)
	}
	// Serialize `FlashLoanAmount`:
	err = encoder.Encode(obj.FlashLoanAmount)
	if err != nil {
		return errors.NewField("FlashLoanAmount", err)
	}
	// Serialize `FlashLoanInitialTokenAmount`:
	err = encoder.Encode(obj.FlashLoanInitialTokenAmount)
	if err != nil {
		return errors.NewField("FlashLoanInitialTokenAmount", err)
	}
	// Serialize `TotalSwapFee`:
	err = encoder.Encode(obj.TotalSwapFee)
	if err != nil {
		return errors.NewField("TotalSwapFee", err)
	}
	// Serialize `ScaleInitialAssetWeightStart`:
	err = encoder.Encode(obj.ScaleInitialAssetWeightStart)
	if err != nil {
		return errors.NewField("ScaleInitialAssetWeightStart", err)
	}
	// Serialize `MinBorrowRate`:
	err = encoder.Encode(obj.MinBorrowRate)
	if err != nil {
		return errors.NewField("MinBorrowRate", err)
	}
	// Serialize `FuelBoostDeposits`:
	err = encoder.Encode(obj.FuelBoostDeposits)
	if err != nil {
		return errors.NewField("FuelBoostDeposits", err)
	}
	// Serialize `FuelBoostBorrows`:
	err = encoder.Encode(obj.FuelBoostBorrows)
	if err != nil {
		return errors.NewField("FuelBoostBorrows", err)
	}
	// Serialize `FuelBoostTaker`:
	err = encoder.Encode(obj.FuelBoostTaker)
	if err != nil {
		return errors.NewField("FuelBoostTaker", err)
	}
	// Serialize `FuelBoostMaker`:
	err = encoder.Encode(obj.FuelBoostMaker)
	if err != nil {
		return errors.NewField("FuelBoostMaker", err)
	}
	// Serialize `FuelBoostInsurance`:
	err = encoder.Encode(obj.FuelBoostInsurance)
	if err != nil {
		return errors.NewField("FuelBoostInsurance", err)
	}
	// Serialize `TokenProgramFlag`:
	err = encoder.Encode(obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Serialize `PoolId`:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj SpotMarket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotMarket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotMarket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return errors.NewField("Pubkey", err)
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return errors.NewField("Vault", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `HistoricalOracleData`:
	err = decoder.Decode(&obj.HistoricalOracleData)
	if err != nil {
		return errors.NewField("HistoricalOracleData", err)
	}
	// Deserialize `HistoricalIndexData`:
	err = decoder.Decode(&obj.HistoricalIndexData)
	if err != nil {
		return errors.NewField("HistoricalIndexData", err)
	}
	// Deserialize `RevenuePool`:
	err = decoder.Decode(&obj.RevenuePool)
	if err != nil {
		return errors.NewField("RevenuePool", err)
	}
	// Deserialize `SpotFeePool`:
	err = decoder.Decode(&obj.SpotFeePool)
	if err != nil {
		return errors.NewField("SpotFeePool", err)
	}
	// Deserialize `InsuranceFund`:
	err = decoder.Decode(&obj.InsuranceFund)
	if err != nil {
		return errors.NewField("InsuranceFund", err)
	}
	// Deserialize `TotalSpotFee`:
	err = decoder.Decode(&obj.TotalSpotFee)
	if err != nil {
		return errors.NewField("TotalSpotFee", err)
	}
	// Deserialize `DepositBalance`:
	err = decoder.Decode(&obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Deserialize `BorrowBalance`:
	err = decoder.Decode(&obj.BorrowBalance)
	if err != nil {
		return errors.NewField("BorrowBalance", err)
	}
	// Deserialize `CumulativeDepositInterest`:
	err = decoder.Decode(&obj.CumulativeDepositInterest)
	if err != nil {
		return errors.NewField("CumulativeDepositInterest", err)
	}
	// Deserialize `CumulativeBorrowInterest`:
	err = decoder.Decode(&obj.CumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("CumulativeBorrowInterest", err)
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Deserialize `TotalQuoteSocialLoss`:
	err = decoder.Decode(&obj.TotalQuoteSocialLoss)
	if err != nil {
		return errors.NewField("TotalQuoteSocialLoss", err)
	}
	// Deserialize `WithdrawGuardThreshold`:
	err = decoder.Decode(&obj.WithdrawGuardThreshold)
	if err != nil {
		return errors.NewField("WithdrawGuardThreshold", err)
	}
	// Deserialize `MaxTokenDeposits`:
	err = decoder.Decode(&obj.MaxTokenDeposits)
	if err != nil {
		return errors.NewField("MaxTokenDeposits", err)
	}
	// Deserialize `DepositTokenTwap`:
	err = decoder.Decode(&obj.DepositTokenTwap)
	if err != nil {
		return errors.NewField("DepositTokenTwap", err)
	}
	// Deserialize `BorrowTokenTwap`:
	err = decoder.Decode(&obj.BorrowTokenTwap)
	if err != nil {
		return errors.NewField("BorrowTokenTwap", err)
	}
	// Deserialize `UtilizationTwap`:
	err = decoder.Decode(&obj.UtilizationTwap)
	if err != nil {
		return errors.NewField("UtilizationTwap", err)
	}
	// Deserialize `LastInterestTs`:
	err = decoder.Decode(&obj.LastInterestTs)
	if err != nil {
		return errors.NewField("LastInterestTs", err)
	}
	// Deserialize `LastTwapTs`:
	err = decoder.Decode(&obj.LastTwapTs)
	if err != nil {
		return errors.NewField("LastTwapTs", err)
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return errors.NewField("ExpiryTs", err)
	}
	// Deserialize `OrderStepSize`:
	err = decoder.Decode(&obj.OrderStepSize)
	if err != nil {
		return errors.NewField("OrderStepSize", err)
	}
	// Deserialize `OrderTickSize`:
	err = decoder.Decode(&obj.OrderTickSize)
	if err != nil {
		return errors.NewField("OrderTickSize", err)
	}
	// Deserialize `MinOrderSize`:
	err = decoder.Decode(&obj.MinOrderSize)
	if err != nil {
		return errors.NewField("MinOrderSize", err)
	}
	// Deserialize `MaxPositionSize`:
	err = decoder.Decode(&obj.MaxPositionSize)
	if err != nil {
		return errors.NewField("MaxPositionSize", err)
	}
	// Deserialize `NextFillRecordId`:
	err = decoder.Decode(&obj.NextFillRecordId)
	if err != nil {
		return errors.NewField("NextFillRecordId", err)
	}
	// Deserialize `NextDepositRecordId`:
	err = decoder.Decode(&obj.NextDepositRecordId)
	if err != nil {
		return errors.NewField("NextDepositRecordId", err)
	}
	// Deserialize `InitialAssetWeight`:
	err = decoder.Decode(&obj.InitialAssetWeight)
	if err != nil {
		return errors.NewField("InitialAssetWeight", err)
	}
	// Deserialize `MaintenanceAssetWeight`:
	err = decoder.Decode(&obj.MaintenanceAssetWeight)
	if err != nil {
		return errors.NewField("MaintenanceAssetWeight", err)
	}
	// Deserialize `InitialLiabilityWeight`:
	err = decoder.Decode(&obj.InitialLiabilityWeight)
	if err != nil {
		return errors.NewField("InitialLiabilityWeight", err)
	}
	// Deserialize `MaintenanceLiabilityWeight`:
	err = decoder.Decode(&obj.MaintenanceLiabilityWeight)
	if err != nil {
		return errors.NewField("MaintenanceLiabilityWeight", err)
	}
	// Deserialize `ImfFactor`:
	err = decoder.Decode(&obj.ImfFactor)
	if err != nil {
		return errors.NewField("ImfFactor", err)
	}
	// Deserialize `LiquidatorFee`:
	err = decoder.Decode(&obj.LiquidatorFee)
	if err != nil {
		return errors.NewField("LiquidatorFee", err)
	}
	// Deserialize `IfLiquidationFee`:
	err = decoder.Decode(&obj.IfLiquidationFee)
	if err != nil {
		return errors.NewField("IfLiquidationFee", err)
	}
	// Deserialize `OptimalUtilization`:
	err = decoder.Decode(&obj.OptimalUtilization)
	if err != nil {
		return errors.NewField("OptimalUtilization", err)
	}
	// Deserialize `OptimalBorrowRate`:
	err = decoder.Decode(&obj.OptimalBorrowRate)
	if err != nil {
		return errors.NewField("OptimalBorrowRate", err)
	}
	// Deserialize `MaxBorrowRate`:
	err = decoder.Decode(&obj.MaxBorrowRate)
	if err != nil {
		return errors.NewField("MaxBorrowRate", err)
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `OrdersEnabled`:
	err = decoder.Decode(&obj.OrdersEnabled)
	if err != nil {
		return errors.NewField("OrdersEnabled", err)
	}
	// Deserialize `OracleSource`:
	err = decoder.Decode(&obj.OracleSource)
	if err != nil {
		return errors.NewField("OracleSource", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `AssetTier`:
	err = decoder.Decode(&obj.AssetTier)
	if err != nil {
		return errors.NewField("AssetTier", err)
	}
	// Deserialize `PausedOperations`:
	err = decoder.Decode(&obj.PausedOperations)
	if err != nil {
		return errors.NewField("PausedOperations", err)
	}
	// Deserialize `IfPausedOperations`:
	err = decoder.Decode(&obj.IfPausedOperations)
	if err != nil {
		return errors.NewField("IfPausedOperations", err)
	}
	// Deserialize `FeeAdjustment`:
	err = decoder.Decode(&obj.FeeAdjustment)
	if err != nil {
		return errors.NewField("FeeAdjustment", err)
	}
	// Deserialize `MaxTokenBorrowsFraction`:
	err = decoder.Decode(&obj.MaxTokenBorrowsFraction)
	if err != nil {
		return errors.NewField("MaxTokenBorrowsFraction", err)
	}
	// Deserialize `FlashLoanAmount`:
	err = decoder.Decode(&obj.FlashLoanAmount)
	if err != nil {
		return errors.NewField("FlashLoanAmount", err)
	}
	// Deserialize `FlashLoanInitialTokenAmount`:
	err = decoder.Decode(&obj.FlashLoanInitialTokenAmount)
	if err != nil {
		return errors.NewField("FlashLoanInitialTokenAmount", err)
	}
	// Deserialize `TotalSwapFee`:
	err = decoder.Decode(&obj.TotalSwapFee)
	if err != nil {
		return errors.NewField("TotalSwapFee", err)
	}
	// Deserialize `ScaleInitialAssetWeightStart`:
	err = decoder.Decode(&obj.ScaleInitialAssetWeightStart)
	if err != nil {
		return errors.NewField("ScaleInitialAssetWeightStart", err)
	}
	// Deserialize `MinBorrowRate`:
	err = decoder.Decode(&obj.MinBorrowRate)
	if err != nil {
		return errors.NewField("MinBorrowRate", err)
	}
	// Deserialize `FuelBoostDeposits`:
	err = decoder.Decode(&obj.FuelBoostDeposits)
	if err != nil {
		return errors.NewField("FuelBoostDeposits", err)
	}
	// Deserialize `FuelBoostBorrows`:
	err = decoder.Decode(&obj.FuelBoostBorrows)
	if err != nil {
		return errors.NewField("FuelBoostBorrows", err)
	}
	// Deserialize `FuelBoostTaker`:
	err = decoder.Decode(&obj.FuelBoostTaker)
	if err != nil {
		return errors.NewField("FuelBoostTaker", err)
	}
	// Deserialize `FuelBoostMaker`:
	err = decoder.Decode(&obj.FuelBoostMaker)
	if err != nil {
		return errors.NewField("FuelBoostMaker", err)
	}
	// Deserialize `FuelBoostInsurance`:
	err = decoder.Decode(&obj.FuelBoostInsurance)
	if err != nil {
		return errors.NewField("FuelBoostInsurance", err)
	}
	// Deserialize `TokenProgramFlag`:
	err = decoder.Decode(&obj.TokenProgramFlag)
	if err != nil {
		return errors.NewField("TokenProgramFlag", err)
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *SpotMarket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotMarket: %w", err)
	}
	return nil
}

func UnmarshalSpotMarket(buf []byte) (*SpotMarket, error) {
	obj := new(SpotMarket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type State struct {
	Admin                         solanago.PublicKey `json:"admin"`
	WhitelistMint                 solanago.PublicKey `json:"whitelistMint"`
	DiscountMint                  solanago.PublicKey `json:"discountMint"`
	Signer                        solanago.PublicKey `json:"signer"`
	SrmVault                      solanago.PublicKey `json:"srmVault"`
	PerpFeeStructure              FeeStructure       `json:"perpFeeStructure"`
	SpotFeeStructure              FeeStructure       `json:"spotFeeStructure"`
	OracleGuardRails              OracleGuardRails   `json:"oracleGuardRails"`
	NumberOfAuthorities           uint64             `json:"numberOfAuthorities"`
	NumberOfSubAccounts           uint64             `json:"numberOfSubAccounts"`
	LpCooldownTime                uint64             `json:"lpCooldownTime"`
	LiquidationMarginBufferRatio  uint32             `json:"liquidationMarginBufferRatio"`
	SettlementDuration            uint16             `json:"settlementDuration"`
	NumberOfMarkets               uint16             `json:"numberOfMarkets"`
	NumberOfSpotMarkets           uint16             `json:"numberOfSpotMarkets"`
	SignerNonce                   uint8              `json:"signerNonce"`
	MinPerpAuctionDuration        uint8              `json:"minPerpAuctionDuration"`
	DefaultMarketOrderTimeInForce uint8              `json:"defaultMarketOrderTimeInForce"`
	DefaultSpotAuctionDuration    uint8              `json:"defaultSpotAuctionDuration"`
	ExchangeStatus                uint8              `json:"exchangeStatus"`
	LiquidationDuration           uint8              `json:"liquidationDuration"`
	InitialPctToLiquidate         uint16             `json:"initialPctToLiquidate"`
	MaxNumberOfSubAccounts        uint16             `json:"maxNumberOfSubAccounts"`
	MaxInitializeUserFee          uint16             `json:"maxInitializeUserFee"`
	FeatureBitFlags               uint8              `json:"featureBitFlags"`
	Padding                       [9]uint8           `json:"padding"`
}

func (obj State) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Serialize `WhitelistMint`:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return errors.NewField("WhitelistMint", err)
	}
	// Serialize `DiscountMint`:
	err = encoder.Encode(obj.DiscountMint)
	if err != nil {
		return errors.NewField("DiscountMint", err)
	}
	// Serialize `Signer`:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Serialize `SrmVault`:
	err = encoder.Encode(obj.SrmVault)
	if err != nil {
		return errors.NewField("SrmVault", err)
	}
	// Serialize `PerpFeeStructure`:
	err = encoder.Encode(obj.PerpFeeStructure)
	if err != nil {
		return errors.NewField("PerpFeeStructure", err)
	}
	// Serialize `SpotFeeStructure`:
	err = encoder.Encode(obj.SpotFeeStructure)
	if err != nil {
		return errors.NewField("SpotFeeStructure", err)
	}
	// Serialize `OracleGuardRails`:
	err = encoder.Encode(obj.OracleGuardRails)
	if err != nil {
		return errors.NewField("OracleGuardRails", err)
	}
	// Serialize `NumberOfAuthorities`:
	err = encoder.Encode(obj.NumberOfAuthorities)
	if err != nil {
		return errors.NewField("NumberOfAuthorities", err)
	}
	// Serialize `NumberOfSubAccounts`:
	err = encoder.Encode(obj.NumberOfSubAccounts)
	if err != nil {
		return errors.NewField("NumberOfSubAccounts", err)
	}
	// Serialize `LpCooldownTime`:
	err = encoder.Encode(obj.LpCooldownTime)
	if err != nil {
		return errors.NewField("LpCooldownTime", err)
	}
	// Serialize `LiquidationMarginBufferRatio`:
	err = encoder.Encode(obj.LiquidationMarginBufferRatio)
	if err != nil {
		return errors.NewField("LiquidationMarginBufferRatio", err)
	}
	// Serialize `SettlementDuration`:
	err = encoder.Encode(obj.SettlementDuration)
	if err != nil {
		return errors.NewField("SettlementDuration", err)
	}
	// Serialize `NumberOfMarkets`:
	err = encoder.Encode(obj.NumberOfMarkets)
	if err != nil {
		return errors.NewField("NumberOfMarkets", err)
	}
	// Serialize `NumberOfSpotMarkets`:
	err = encoder.Encode(obj.NumberOfSpotMarkets)
	if err != nil {
		return errors.NewField("NumberOfSpotMarkets", err)
	}
	// Serialize `SignerNonce`:
	err = encoder.Encode(obj.SignerNonce)
	if err != nil {
		return errors.NewField("SignerNonce", err)
	}
	// Serialize `MinPerpAuctionDuration`:
	err = encoder.Encode(obj.MinPerpAuctionDuration)
	if err != nil {
		return errors.NewField("MinPerpAuctionDuration", err)
	}
	// Serialize `DefaultMarketOrderTimeInForce`:
	err = encoder.Encode(obj.DefaultMarketOrderTimeInForce)
	if err != nil {
		return errors.NewField("DefaultMarketOrderTimeInForce", err)
	}
	// Serialize `DefaultSpotAuctionDuration`:
	err = encoder.Encode(obj.DefaultSpotAuctionDuration)
	if err != nil {
		return errors.NewField("DefaultSpotAuctionDuration", err)
	}
	// Serialize `ExchangeStatus`:
	err = encoder.Encode(obj.ExchangeStatus)
	if err != nil {
		return errors.NewField("ExchangeStatus", err)
	}
	// Serialize `LiquidationDuration`:
	err = encoder.Encode(obj.LiquidationDuration)
	if err != nil {
		return errors.NewField("LiquidationDuration", err)
	}
	// Serialize `InitialPctToLiquidate`:
	err = encoder.Encode(obj.InitialPctToLiquidate)
	if err != nil {
		return errors.NewField("InitialPctToLiquidate", err)
	}
	// Serialize `MaxNumberOfSubAccounts`:
	err = encoder.Encode(obj.MaxNumberOfSubAccounts)
	if err != nil {
		return errors.NewField("MaxNumberOfSubAccounts", err)
	}
	// Serialize `MaxInitializeUserFee`:
	err = encoder.Encode(obj.MaxInitializeUserFee)
	if err != nil {
		return errors.NewField("MaxInitializeUserFee", err)
	}
	// Serialize `FeatureBitFlags`:
	err = encoder.Encode(obj.FeatureBitFlags)
	if err != nil {
		return errors.NewField("FeatureBitFlags", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj State) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding State: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *State) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return errors.NewField("WhitelistMint", err)
	}
	// Deserialize `DiscountMint`:
	err = decoder.Decode(&obj.DiscountMint)
	if err != nil {
		return errors.NewField("DiscountMint", err)
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return errors.NewField("Signer", err)
	}
	// Deserialize `SrmVault`:
	err = decoder.Decode(&obj.SrmVault)
	if err != nil {
		return errors.NewField("SrmVault", err)
	}
	// Deserialize `PerpFeeStructure`:
	err = decoder.Decode(&obj.PerpFeeStructure)
	if err != nil {
		return errors.NewField("PerpFeeStructure", err)
	}
	// Deserialize `SpotFeeStructure`:
	err = decoder.Decode(&obj.SpotFeeStructure)
	if err != nil {
		return errors.NewField("SpotFeeStructure", err)
	}
	// Deserialize `OracleGuardRails`:
	err = decoder.Decode(&obj.OracleGuardRails)
	if err != nil {
		return errors.NewField("OracleGuardRails", err)
	}
	// Deserialize `NumberOfAuthorities`:
	err = decoder.Decode(&obj.NumberOfAuthorities)
	if err != nil {
		return errors.NewField("NumberOfAuthorities", err)
	}
	// Deserialize `NumberOfSubAccounts`:
	err = decoder.Decode(&obj.NumberOfSubAccounts)
	if err != nil {
		return errors.NewField("NumberOfSubAccounts", err)
	}
	// Deserialize `LpCooldownTime`:
	err = decoder.Decode(&obj.LpCooldownTime)
	if err != nil {
		return errors.NewField("LpCooldownTime", err)
	}
	// Deserialize `LiquidationMarginBufferRatio`:
	err = decoder.Decode(&obj.LiquidationMarginBufferRatio)
	if err != nil {
		return errors.NewField("LiquidationMarginBufferRatio", err)
	}
	// Deserialize `SettlementDuration`:
	err = decoder.Decode(&obj.SettlementDuration)
	if err != nil {
		return errors.NewField("SettlementDuration", err)
	}
	// Deserialize `NumberOfMarkets`:
	err = decoder.Decode(&obj.NumberOfMarkets)
	if err != nil {
		return errors.NewField("NumberOfMarkets", err)
	}
	// Deserialize `NumberOfSpotMarkets`:
	err = decoder.Decode(&obj.NumberOfSpotMarkets)
	if err != nil {
		return errors.NewField("NumberOfSpotMarkets", err)
	}
	// Deserialize `SignerNonce`:
	err = decoder.Decode(&obj.SignerNonce)
	if err != nil {
		return errors.NewField("SignerNonce", err)
	}
	// Deserialize `MinPerpAuctionDuration`:
	err = decoder.Decode(&obj.MinPerpAuctionDuration)
	if err != nil {
		return errors.NewField("MinPerpAuctionDuration", err)
	}
	// Deserialize `DefaultMarketOrderTimeInForce`:
	err = decoder.Decode(&obj.DefaultMarketOrderTimeInForce)
	if err != nil {
		return errors.NewField("DefaultMarketOrderTimeInForce", err)
	}
	// Deserialize `DefaultSpotAuctionDuration`:
	err = decoder.Decode(&obj.DefaultSpotAuctionDuration)
	if err != nil {
		return errors.NewField("DefaultSpotAuctionDuration", err)
	}
	// Deserialize `ExchangeStatus`:
	err = decoder.Decode(&obj.ExchangeStatus)
	if err != nil {
		return errors.NewField("ExchangeStatus", err)
	}
	// Deserialize `LiquidationDuration`:
	err = decoder.Decode(&obj.LiquidationDuration)
	if err != nil {
		return errors.NewField("LiquidationDuration", err)
	}
	// Deserialize `InitialPctToLiquidate`:
	err = decoder.Decode(&obj.InitialPctToLiquidate)
	if err != nil {
		return errors.NewField("InitialPctToLiquidate", err)
	}
	// Deserialize `MaxNumberOfSubAccounts`:
	err = decoder.Decode(&obj.MaxNumberOfSubAccounts)
	if err != nil {
		return errors.NewField("MaxNumberOfSubAccounts", err)
	}
	// Deserialize `MaxInitializeUserFee`:
	err = decoder.Decode(&obj.MaxInitializeUserFee)
	if err != nil {
		return errors.NewField("MaxInitializeUserFee", err)
	}
	// Deserialize `FeatureBitFlags`:
	err = decoder.Decode(&obj.FeatureBitFlags)
	if err != nil {
		return errors.NewField("FeatureBitFlags", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *State) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling State: %w", err)
	}
	return nil
}

func UnmarshalState(buf []byte) (*State, error) {
	obj := new(State)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type User struct {
	// The owner/authority of the account
	Authority solanago.PublicKey `json:"authority"`

	// An addresses that can control the account on the authority's behalf. Has limited power, cant withdraw
	Delegate solanago.PublicKey `json:"delegate"`

	// Encoded display name e.g. "toly"
	Name [32]uint8 `json:"name"`

	// The user's spot positions
	SpotPositions [8]SpotPosition `json:"spotPositions"`

	// The user's perp positions
	PerpPositions [8]PerpPosition `json:"perpPositions"`

	// The user's orders
	Orders [32]Order `json:"orders"`

	// The last time the user added perp lp positions
	LastAddPerpLpSharesTs int64 `json:"lastAddPerpLpSharesTs"`

	// The total values of deposits the user has made
	// precision: QUOTE_PRECISION
	TotalDeposits uint64 `json:"totalDeposits"`

	// The total values of withdrawals the user has made
	// precision: QUOTE_PRECISION
	TotalWithdraws uint64 `json:"totalWithdraws"`

	// The total socialized loss the users has incurred upon the protocol
	// precision: QUOTE_PRECISION
	TotalSocialLoss uint64 `json:"totalSocialLoss"`

	// Fees (taker fees, maker rebate, referrer reward, filler reward) and pnl for perps
	// precision: QUOTE_PRECISION
	SettledPerpPnl int64 `json:"settledPerpPnl"`

	// Fees (taker fees, maker rebate, filler reward) for spot
	// precision: QUOTE_PRECISION
	CumulativeSpotFees int64 `json:"cumulativeSpotFees"`

	// Cumulative funding paid/received for perps
	// precision: QUOTE_PRECISION
	CumulativePerpFunding int64 `json:"cumulativePerpFunding"`

	// The amount of margin freed during liquidation. Used to force the liquidation to occur over a period of time
	// Defaults to zero when not being liquidated
	// precision: QUOTE_PRECISION
	LiquidationMarginFreed uint64 `json:"liquidationMarginFreed"`

	// The last slot a user was active. Used to determine if a user is idle
	LastActiveSlot uint64 `json:"lastActiveSlot"`

	// Every user order has an order id. This is the next order id to be used
	NextOrderId uint32 `json:"nextOrderId"`

	// Custom max initial margin ratio for the user
	MaxMarginRatio uint32 `json:"maxMarginRatio"`

	// The next liquidation id to be used for user
	NextLiquidationId uint16 `json:"nextLiquidationId"`

	// The sub account id for this user
	SubAccountId uint16 `json:"subAccountId"`

	// Whether the user is active, being liquidated or bankrupt
	Status uint8 `json:"status"`

	// Whether the user has enabled margin trading
	IsMarginTradingEnabled bool `json:"isMarginTradingEnabled"`

	// User is idle if they haven't interacted with the protocol in 1 week and they have no orders, perp positions or borrows
	// Off-chain keeper bots can ignore users that are idle
	Idle bool `json:"idle"`

	// number of open orders
	OpenOrders uint8 `json:"openOrders"`

	// Whether or not user has open order
	HasOpenOrder bool `json:"hasOpenOrder"`

	// number of open orders with auction
	OpenAuctions uint8 `json:"openAuctions"`

	// Whether or not user has open order with auction
	HasOpenAuction        bool       `json:"hasOpenAuction"`
	MarginMode            MarginMode `json:"marginMode"`
	PoolId                uint8      `json:"poolId"`
	Padding1              [3]uint8   `json:"padding1"`
	LastFuelBonusUpdateTs uint32     `json:"lastFuelBonusUpdateTs"`
	Padding               [12]uint8  `json:"padding"`
}

func (obj User) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Delegate`:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return errors.NewField("Delegate", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `SpotPositions`:
	err = encoder.Encode(obj.SpotPositions)
	if err != nil {
		return errors.NewField("SpotPositions", err)
	}
	// Serialize `PerpPositions`:
	err = encoder.Encode(obj.PerpPositions)
	if err != nil {
		return errors.NewField("PerpPositions", err)
	}
	// Serialize `Orders`:
	err = encoder.Encode(obj.Orders)
	if err != nil {
		return errors.NewField("Orders", err)
	}
	// Serialize `LastAddPerpLpSharesTs`:
	err = encoder.Encode(obj.LastAddPerpLpSharesTs)
	if err != nil {
		return errors.NewField("LastAddPerpLpSharesTs", err)
	}
	// Serialize `TotalDeposits`:
	err = encoder.Encode(obj.TotalDeposits)
	if err != nil {
		return errors.NewField("TotalDeposits", err)
	}
	// Serialize `TotalWithdraws`:
	err = encoder.Encode(obj.TotalWithdraws)
	if err != nil {
		return errors.NewField("TotalWithdraws", err)
	}
	// Serialize `TotalSocialLoss`:
	err = encoder.Encode(obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Serialize `SettledPerpPnl`:
	err = encoder.Encode(obj.SettledPerpPnl)
	if err != nil {
		return errors.NewField("SettledPerpPnl", err)
	}
	// Serialize `CumulativeSpotFees`:
	err = encoder.Encode(obj.CumulativeSpotFees)
	if err != nil {
		return errors.NewField("CumulativeSpotFees", err)
	}
	// Serialize `CumulativePerpFunding`:
	err = encoder.Encode(obj.CumulativePerpFunding)
	if err != nil {
		return errors.NewField("CumulativePerpFunding", err)
	}
	// Serialize `LiquidationMarginFreed`:
	err = encoder.Encode(obj.LiquidationMarginFreed)
	if err != nil {
		return errors.NewField("LiquidationMarginFreed", err)
	}
	// Serialize `LastActiveSlot`:
	err = encoder.Encode(obj.LastActiveSlot)
	if err != nil {
		return errors.NewField("LastActiveSlot", err)
	}
	// Serialize `NextOrderId`:
	err = encoder.Encode(obj.NextOrderId)
	if err != nil {
		return errors.NewField("NextOrderId", err)
	}
	// Serialize `MaxMarginRatio`:
	err = encoder.Encode(obj.MaxMarginRatio)
	if err != nil {
		return errors.NewField("MaxMarginRatio", err)
	}
	// Serialize `NextLiquidationId`:
	err = encoder.Encode(obj.NextLiquidationId)
	if err != nil {
		return errors.NewField("NextLiquidationId", err)
	}
	// Serialize `SubAccountId`:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `IsMarginTradingEnabled`:
	err = encoder.Encode(obj.IsMarginTradingEnabled)
	if err != nil {
		return errors.NewField("IsMarginTradingEnabled", err)
	}
	// Serialize `Idle`:
	err = encoder.Encode(obj.Idle)
	if err != nil {
		return errors.NewField("Idle", err)
	}
	// Serialize `OpenOrders`:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Serialize `HasOpenOrder`:
	err = encoder.Encode(obj.HasOpenOrder)
	if err != nil {
		return errors.NewField("HasOpenOrder", err)
	}
	// Serialize `OpenAuctions`:
	err = encoder.Encode(obj.OpenAuctions)
	if err != nil {
		return errors.NewField("OpenAuctions", err)
	}
	// Serialize `HasOpenAuction`:
	err = encoder.Encode(obj.HasOpenAuction)
	if err != nil {
		return errors.NewField("HasOpenAuction", err)
	}
	// Serialize `MarginMode`:
	err = encoder.Encode(obj.MarginMode)
	if err != nil {
		return errors.NewField("MarginMode", err)
	}
	// Serialize `PoolId`:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `LastFuelBonusUpdateTs`:
	err = encoder.Encode(obj.LastFuelBonusUpdateTs)
	if err != nil {
		return errors.NewField("LastFuelBonusUpdateTs", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj User) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding User: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *User) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return errors.NewField("Delegate", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `SpotPositions`:
	err = decoder.Decode(&obj.SpotPositions)
	if err != nil {
		return errors.NewField("SpotPositions", err)
	}
	// Deserialize `PerpPositions`:
	err = decoder.Decode(&obj.PerpPositions)
	if err != nil {
		return errors.NewField("PerpPositions", err)
	}
	// Deserialize `Orders`:
	err = decoder.Decode(&obj.Orders)
	if err != nil {
		return errors.NewField("Orders", err)
	}
	// Deserialize `LastAddPerpLpSharesTs`:
	err = decoder.Decode(&obj.LastAddPerpLpSharesTs)
	if err != nil {
		return errors.NewField("LastAddPerpLpSharesTs", err)
	}
	// Deserialize `TotalDeposits`:
	err = decoder.Decode(&obj.TotalDeposits)
	if err != nil {
		return errors.NewField("TotalDeposits", err)
	}
	// Deserialize `TotalWithdraws`:
	err = decoder.Decode(&obj.TotalWithdraws)
	if err != nil {
		return errors.NewField("TotalWithdraws", err)
	}
	// Deserialize `TotalSocialLoss`:
	err = decoder.Decode(&obj.TotalSocialLoss)
	if err != nil {
		return errors.NewField("TotalSocialLoss", err)
	}
	// Deserialize `SettledPerpPnl`:
	err = decoder.Decode(&obj.SettledPerpPnl)
	if err != nil {
		return errors.NewField("SettledPerpPnl", err)
	}
	// Deserialize `CumulativeSpotFees`:
	err = decoder.Decode(&obj.CumulativeSpotFees)
	if err != nil {
		return errors.NewField("CumulativeSpotFees", err)
	}
	// Deserialize `CumulativePerpFunding`:
	err = decoder.Decode(&obj.CumulativePerpFunding)
	if err != nil {
		return errors.NewField("CumulativePerpFunding", err)
	}
	// Deserialize `LiquidationMarginFreed`:
	err = decoder.Decode(&obj.LiquidationMarginFreed)
	if err != nil {
		return errors.NewField("LiquidationMarginFreed", err)
	}
	// Deserialize `LastActiveSlot`:
	err = decoder.Decode(&obj.LastActiveSlot)
	if err != nil {
		return errors.NewField("LastActiveSlot", err)
	}
	// Deserialize `NextOrderId`:
	err = decoder.Decode(&obj.NextOrderId)
	if err != nil {
		return errors.NewField("NextOrderId", err)
	}
	// Deserialize `MaxMarginRatio`:
	err = decoder.Decode(&obj.MaxMarginRatio)
	if err != nil {
		return errors.NewField("MaxMarginRatio", err)
	}
	// Deserialize `NextLiquidationId`:
	err = decoder.Decode(&obj.NextLiquidationId)
	if err != nil {
		return errors.NewField("NextLiquidationId", err)
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `IsMarginTradingEnabled`:
	err = decoder.Decode(&obj.IsMarginTradingEnabled)
	if err != nil {
		return errors.NewField("IsMarginTradingEnabled", err)
	}
	// Deserialize `Idle`:
	err = decoder.Decode(&obj.Idle)
	if err != nil {
		return errors.NewField("Idle", err)
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return errors.NewField("OpenOrders", err)
	}
	// Deserialize `HasOpenOrder`:
	err = decoder.Decode(&obj.HasOpenOrder)
	if err != nil {
		return errors.NewField("HasOpenOrder", err)
	}
	// Deserialize `OpenAuctions`:
	err = decoder.Decode(&obj.OpenAuctions)
	if err != nil {
		return errors.NewField("OpenAuctions", err)
	}
	// Deserialize `HasOpenAuction`:
	err = decoder.Decode(&obj.HasOpenAuction)
	if err != nil {
		return errors.NewField("HasOpenAuction", err)
	}
	// Deserialize `MarginMode`:
	err = decoder.Decode(&obj.MarginMode)
	if err != nil {
		return errors.NewField("MarginMode", err)
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return errors.NewField("PoolId", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `LastFuelBonusUpdateTs`:
	err = decoder.Decode(&obj.LastFuelBonusUpdateTs)
	if err != nil {
		return errors.NewField("LastFuelBonusUpdateTs", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *User) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling User: %w", err)
	}
	return nil
}

func UnmarshalUser(buf []byte) (*User, error) {
	obj := new(User)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UserStats struct {
	// The authority for all of a users sub accounts
	Authority solanago.PublicKey `json:"authority"`

	// The address that referred this user
	Referrer solanago.PublicKey `json:"referrer"`

	// Stats on the fees paid by the user
	Fees UserFees `json:"fees"`

	// The timestamp of the next epoch
	// Epoch is used to limit referrer rewards earned in single epoch
	NextEpochTs int64 `json:"nextEpochTs"`

	// Rolling 30day maker volume for user
	// precision: QUOTE_PRECISION
	MakerVolume30D uint64 `json:"makerVolume30D"`

	// Rolling 30day taker volume for user
	// precision: QUOTE_PRECISION
	TakerVolume30D uint64 `json:"takerVolume30D"`

	// Rolling 30day filler volume for user
	// precision: QUOTE_PRECISION
	FillerVolume30D uint64 `json:"fillerVolume30D"`

	// last time the maker volume was updated
	LastMakerVolume30DTs int64 `json:"lastMakerVolume30DTs"`

	// last time the taker volume was updated
	LastTakerVolume30DTs int64 `json:"lastTakerVolume30DTs"`

	// last time the filler volume was updated
	LastFillerVolume30DTs int64 `json:"lastFillerVolume30DTs"`

	// The amount of tokens staked in the quote spot markets if
	IfStakedQuoteAssetAmount uint64 `json:"ifStakedQuoteAssetAmount"`

	// The current number of sub accounts
	NumberOfSubAccounts uint16 `json:"numberOfSubAccounts"`

	// The number of sub accounts created. Can be greater than the number of sub accounts if user
	// has deleted sub accounts
	NumberOfSubAccountsCreated uint16 `json:"numberOfSubAccountsCreated"`

	// Flags for referrer status:
	// First bit (LSB): 1 if user is a referrer, 0 otherwise
	// Second bit: 1 if user was referred, 0 otherwise
	ReferrerStatus              uint8    `json:"referrerStatus"`
	DisableUpdatePerpBidAskTwap bool     `json:"disableUpdatePerpBidAskTwap"`
	Padding1                    [1]uint8 `json:"padding1"`

	// whether the user has a FuelOverflow account
	FuelOverflowStatus uint8 `json:"fuelOverflowStatus"`

	// accumulated fuel for token amounts of insurance
	FuelInsurance uint32 `json:"fuelInsurance"`

	// accumulated fuel for notional of deposits
	FuelDeposits uint32 `json:"fuelDeposits"`

	// accumulate fuel bonus for notional of borrows
	FuelBorrows uint32 `json:"fuelBorrows"`

	// accumulated fuel for perp open interest
	FuelPositions uint32 `json:"fuelPositions"`

	// accumulate fuel bonus for taker volume
	FuelTaker uint32 `json:"fuelTaker"`

	// accumulate fuel bonus for maker volume
	FuelMaker uint32 `json:"fuelMaker"`

	// The amount of tokens staked in the governance spot markets if
	IfStakedGovTokenAmount uint64 `json:"ifStakedGovTokenAmount"`

	// last unix ts user stats data was used to update if fuel (u32 to save space)
	LastFuelIfBonusUpdateTs uint32    `json:"lastFuelIfBonusUpdateTs"`
	Padding                 [12]uint8 `json:"padding"`
}

func (obj UserStats) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `NextEpochTs`:
	err = encoder.Encode(obj.NextEpochTs)
	if err != nil {
		return errors.NewField("NextEpochTs", err)
	}
	// Serialize `MakerVolume30D`:
	err = encoder.Encode(obj.MakerVolume30D)
	if err != nil {
		return errors.NewField("MakerVolume30D", err)
	}
	// Serialize `TakerVolume30D`:
	err = encoder.Encode(obj.TakerVolume30D)
	if err != nil {
		return errors.NewField("TakerVolume30D", err)
	}
	// Serialize `FillerVolume30D`:
	err = encoder.Encode(obj.FillerVolume30D)
	if err != nil {
		return errors.NewField("FillerVolume30D", err)
	}
	// Serialize `LastMakerVolume30DTs`:
	err = encoder.Encode(obj.LastMakerVolume30DTs)
	if err != nil {
		return errors.NewField("LastMakerVolume30DTs", err)
	}
	// Serialize `LastTakerVolume30DTs`:
	err = encoder.Encode(obj.LastTakerVolume30DTs)
	if err != nil {
		return errors.NewField("LastTakerVolume30DTs", err)
	}
	// Serialize `LastFillerVolume30DTs`:
	err = encoder.Encode(obj.LastFillerVolume30DTs)
	if err != nil {
		return errors.NewField("LastFillerVolume30DTs", err)
	}
	// Serialize `IfStakedQuoteAssetAmount`:
	err = encoder.Encode(obj.IfStakedQuoteAssetAmount)
	if err != nil {
		return errors.NewField("IfStakedQuoteAssetAmount", err)
	}
	// Serialize `NumberOfSubAccounts`:
	err = encoder.Encode(obj.NumberOfSubAccounts)
	if err != nil {
		return errors.NewField("NumberOfSubAccounts", err)
	}
	// Serialize `NumberOfSubAccountsCreated`:
	err = encoder.Encode(obj.NumberOfSubAccountsCreated)
	if err != nil {
		return errors.NewField("NumberOfSubAccountsCreated", err)
	}
	// Serialize `ReferrerStatus`:
	err = encoder.Encode(obj.ReferrerStatus)
	if err != nil {
		return errors.NewField("ReferrerStatus", err)
	}
	// Serialize `DisableUpdatePerpBidAskTwap`:
	err = encoder.Encode(obj.DisableUpdatePerpBidAskTwap)
	if err != nil {
		return errors.NewField("DisableUpdatePerpBidAskTwap", err)
	}
	// Serialize `Padding1`:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Serialize `FuelOverflowStatus`:
	err = encoder.Encode(obj.FuelOverflowStatus)
	if err != nil {
		return errors.NewField("FuelOverflowStatus", err)
	}
	// Serialize `FuelInsurance`:
	err = encoder.Encode(obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Serialize `FuelDeposits`:
	err = encoder.Encode(obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Serialize `FuelBorrows`:
	err = encoder.Encode(obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Serialize `FuelPositions`:
	err = encoder.Encode(obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Serialize `FuelTaker`:
	err = encoder.Encode(obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Serialize `FuelMaker`:
	err = encoder.Encode(obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Serialize `IfStakedGovTokenAmount`:
	err = encoder.Encode(obj.IfStakedGovTokenAmount)
	if err != nil {
		return errors.NewField("IfStakedGovTokenAmount", err)
	}
	// Serialize `LastFuelIfBonusUpdateTs`:
	err = encoder.Encode(obj.LastFuelIfBonusUpdateTs)
	if err != nil {
		return errors.NewField("LastFuelIfBonusUpdateTs", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj UserStats) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserStats: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserStats) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `NextEpochTs`:
	err = decoder.Decode(&obj.NextEpochTs)
	if err != nil {
		return errors.NewField("NextEpochTs", err)
	}
	// Deserialize `MakerVolume30D`:
	err = decoder.Decode(&obj.MakerVolume30D)
	if err != nil {
		return errors.NewField("MakerVolume30D", err)
	}
	// Deserialize `TakerVolume30D`:
	err = decoder.Decode(&obj.TakerVolume30D)
	if err != nil {
		return errors.NewField("TakerVolume30D", err)
	}
	// Deserialize `FillerVolume30D`:
	err = decoder.Decode(&obj.FillerVolume30D)
	if err != nil {
		return errors.NewField("FillerVolume30D", err)
	}
	// Deserialize `LastMakerVolume30DTs`:
	err = decoder.Decode(&obj.LastMakerVolume30DTs)
	if err != nil {
		return errors.NewField("LastMakerVolume30DTs", err)
	}
	// Deserialize `LastTakerVolume30DTs`:
	err = decoder.Decode(&obj.LastTakerVolume30DTs)
	if err != nil {
		return errors.NewField("LastTakerVolume30DTs", err)
	}
	// Deserialize `LastFillerVolume30DTs`:
	err = decoder.Decode(&obj.LastFillerVolume30DTs)
	if err != nil {
		return errors.NewField("LastFillerVolume30DTs", err)
	}
	// Deserialize `IfStakedQuoteAssetAmount`:
	err = decoder.Decode(&obj.IfStakedQuoteAssetAmount)
	if err != nil {
		return errors.NewField("IfStakedQuoteAssetAmount", err)
	}
	// Deserialize `NumberOfSubAccounts`:
	err = decoder.Decode(&obj.NumberOfSubAccounts)
	if err != nil {
		return errors.NewField("NumberOfSubAccounts", err)
	}
	// Deserialize `NumberOfSubAccountsCreated`:
	err = decoder.Decode(&obj.NumberOfSubAccountsCreated)
	if err != nil {
		return errors.NewField("NumberOfSubAccountsCreated", err)
	}
	// Deserialize `ReferrerStatus`:
	err = decoder.Decode(&obj.ReferrerStatus)
	if err != nil {
		return errors.NewField("ReferrerStatus", err)
	}
	// Deserialize `DisableUpdatePerpBidAskTwap`:
	err = decoder.Decode(&obj.DisableUpdatePerpBidAskTwap)
	if err != nil {
		return errors.NewField("DisableUpdatePerpBidAskTwap", err)
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return errors.NewField("Padding1", err)
	}
	// Deserialize `FuelOverflowStatus`:
	err = decoder.Decode(&obj.FuelOverflowStatus)
	if err != nil {
		return errors.NewField("FuelOverflowStatus", err)
	}
	// Deserialize `FuelInsurance`:
	err = decoder.Decode(&obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Deserialize `FuelDeposits`:
	err = decoder.Decode(&obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Deserialize `FuelBorrows`:
	err = decoder.Decode(&obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Deserialize `FuelPositions`:
	err = decoder.Decode(&obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Deserialize `FuelTaker`:
	err = decoder.Decode(&obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Deserialize `FuelMaker`:
	err = decoder.Decode(&obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Deserialize `IfStakedGovTokenAmount`:
	err = decoder.Decode(&obj.IfStakedGovTokenAmount)
	if err != nil {
		return errors.NewField("IfStakedGovTokenAmount", err)
	}
	// Deserialize `LastFuelIfBonusUpdateTs`:
	err = decoder.Decode(&obj.LastFuelIfBonusUpdateTs)
	if err != nil {
		return errors.NewField("LastFuelIfBonusUpdateTs", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *UserStats) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserStats: %w", err)
	}
	return nil
}

func UnmarshalUserStats(buf []byte) (*UserStats, error) {
	obj := new(UserStats)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ReferrerName struct {
	Authority solanago.PublicKey `json:"authority"`
	User      solanago.PublicKey `json:"user"`
	UserStats solanago.PublicKey `json:"userStats"`
	Name      [32]uint8          `json:"name"`
}

func (obj ReferrerName) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `UserStats`:
	err = encoder.Encode(obj.UserStats)
	if err != nil {
		return errors.NewField("UserStats", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	return nil
}

func (obj ReferrerName) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ReferrerName: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ReferrerName) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `UserStats`:
	err = decoder.Decode(&obj.UserStats)
	if err != nil {
		return errors.NewField("UserStats", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	return nil
}

func (obj *ReferrerName) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ReferrerName: %w", err)
	}
	return nil
}

func UnmarshalReferrerName(buf []byte) (*ReferrerName, error) {
	obj := new(ReferrerName)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FuelOverflow struct {
	// The authority of this overflow account
	Authority       solanago.PublicKey `json:"authority"`
	FuelInsurance   binary.Uint128     `json:"fuelInsurance"`
	FuelDeposits    binary.Uint128     `json:"fuelDeposits"`
	FuelBorrows     binary.Uint128     `json:"fuelBorrows"`
	FuelPositions   binary.Uint128     `json:"fuelPositions"`
	FuelTaker       binary.Uint128     `json:"fuelTaker"`
	FuelMaker       binary.Uint128     `json:"fuelMaker"`
	LastFuelSweepTs uint32             `json:"lastFuelSweepTs"`
	LastResetTs     uint32             `json:"lastResetTs"`
	Padding         [6]binary.Uint128  `json:"padding"`
}

func (obj FuelOverflow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `FuelInsurance`:
	err = encoder.Encode(obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Serialize `FuelDeposits`:
	err = encoder.Encode(obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Serialize `FuelBorrows`:
	err = encoder.Encode(obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Serialize `FuelPositions`:
	err = encoder.Encode(obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Serialize `FuelTaker`:
	err = encoder.Encode(obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Serialize `FuelMaker`:
	err = encoder.Encode(obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Serialize `LastFuelSweepTs`:
	err = encoder.Encode(obj.LastFuelSweepTs)
	if err != nil {
		return errors.NewField("LastFuelSweepTs", err)
	}
	// Serialize `LastResetTs`:
	err = encoder.Encode(obj.LastResetTs)
	if err != nil {
		return errors.NewField("LastResetTs", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj FuelOverflow) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FuelOverflow: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FuelOverflow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `FuelInsurance`:
	err = decoder.Decode(&obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Deserialize `FuelDeposits`:
	err = decoder.Decode(&obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Deserialize `FuelBorrows`:
	err = decoder.Decode(&obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Deserialize `FuelPositions`:
	err = decoder.Decode(&obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Deserialize `FuelTaker`:
	err = decoder.Decode(&obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Deserialize `FuelMaker`:
	err = decoder.Decode(&obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Deserialize `LastFuelSweepTs`:
	err = decoder.Decode(&obj.LastFuelSweepTs)
	if err != nil {
		return errors.NewField("LastFuelSweepTs", err)
	}
	// Deserialize `LastResetTs`:
	err = decoder.Decode(&obj.LastResetTs)
	if err != nil {
		return errors.NewField("LastResetTs", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *FuelOverflow) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FuelOverflow: %w", err)
	}
	return nil
}

func UnmarshalFuelOverflow(buf []byte) (*FuelOverflow, error) {
	obj := new(FuelOverflow)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type NewUserRecord struct {
	Ts            int64              `json:"ts"`
	UserAuthority solanago.PublicKey `json:"userAuthority"`
	User          solanago.PublicKey `json:"user"`
	SubAccountId  uint16             `json:"subAccountId"`
	Name          [32]uint8          `json:"name"`
	Referrer      solanago.PublicKey `json:"referrer"`
}

func (obj NewUserRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `UserAuthority`:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `SubAccountId`:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Referrer`:
	err = encoder.Encode(obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	return nil
}

func (obj NewUserRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NewUserRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NewUserRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Referrer`:
	err = decoder.Decode(&obj.Referrer)
	if err != nil {
		return errors.NewField("Referrer", err)
	}
	return nil
}

func (obj *NewUserRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NewUserRecord: %w", err)
	}
	return nil
}

func UnmarshalNewUserRecord(buf []byte) (*NewUserRecord, error) {
	obj := new(NewUserRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DepositRecord struct {
	Ts                              int64               `json:"ts"`
	UserAuthority                   solanago.PublicKey  `json:"userAuthority"`
	User                            solanago.PublicKey  `json:"user"`
	Direction                       DepositDirection    `json:"direction"`
	DepositRecordId                 uint64              `json:"depositRecordId"`
	Amount                          uint64              `json:"amount"`
	MarketIndex                     uint16              `json:"marketIndex"`
	OraclePrice                     int64               `json:"oraclePrice"`
	MarketDepositBalance            binary.Uint128      `json:"marketDepositBalance"`
	MarketWithdrawBalance           binary.Uint128      `json:"marketWithdrawBalance"`
	MarketCumulativeDepositInterest binary.Uint128      `json:"marketCumulativeDepositInterest"`
	MarketCumulativeBorrowInterest  binary.Uint128      `json:"marketCumulativeBorrowInterest"`
	TotalDepositsAfter              uint64              `json:"totalDepositsAfter"`
	TotalWithdrawsAfter             uint64              `json:"totalWithdrawsAfter"`
	Explanation                     DepositExplanation  `json:"explanation"`
	TransferUser                    *solanago.PublicKey `bin:"optional" json:"transferUser,omitempty"`
}

func (obj DepositRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `UserAuthority`:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Direction`:
	err = encoder.Encode(obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Serialize `DepositRecordId`:
	err = encoder.Encode(obj.DepositRecordId)
	if err != nil {
		return errors.NewField("DepositRecordId", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `OraclePrice`:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Serialize `MarketDepositBalance`:
	err = encoder.Encode(obj.MarketDepositBalance)
	if err != nil {
		return errors.NewField("MarketDepositBalance", err)
	}
	// Serialize `MarketWithdrawBalance`:
	err = encoder.Encode(obj.MarketWithdrawBalance)
	if err != nil {
		return errors.NewField("MarketWithdrawBalance", err)
	}
	// Serialize `MarketCumulativeDepositInterest`:
	err = encoder.Encode(obj.MarketCumulativeDepositInterest)
	if err != nil {
		return errors.NewField("MarketCumulativeDepositInterest", err)
	}
	// Serialize `MarketCumulativeBorrowInterest`:
	err = encoder.Encode(obj.MarketCumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("MarketCumulativeBorrowInterest", err)
	}
	// Serialize `TotalDepositsAfter`:
	err = encoder.Encode(obj.TotalDepositsAfter)
	if err != nil {
		return errors.NewField("TotalDepositsAfter", err)
	}
	// Serialize `TotalWithdrawsAfter`:
	err = encoder.Encode(obj.TotalWithdrawsAfter)
	if err != nil {
		return errors.NewField("TotalWithdrawsAfter", err)
	}
	// Serialize `Explanation`:
	err = encoder.Encode(obj.Explanation)
	if err != nil {
		return errors.NewField("Explanation", err)
	}
	// Serialize `TransferUser` (optional):
	{
		if obj.TransferUser == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TransferUser", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TransferUser", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TransferUser)
			if err != nil {
				return errors.NewField("TransferUser", err)
			}
		}
	}
	return nil
}

func (obj DepositRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DepositRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DepositRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Direction`:
	err = decoder.Decode(&obj.Direction)
	if err != nil {
		return errors.NewField("Direction", err)
	}
	// Deserialize `DepositRecordId`:
	err = decoder.Decode(&obj.DepositRecordId)
	if err != nil {
		return errors.NewField("DepositRecordId", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Deserialize `MarketDepositBalance`:
	err = decoder.Decode(&obj.MarketDepositBalance)
	if err != nil {
		return errors.NewField("MarketDepositBalance", err)
	}
	// Deserialize `MarketWithdrawBalance`:
	err = decoder.Decode(&obj.MarketWithdrawBalance)
	if err != nil {
		return errors.NewField("MarketWithdrawBalance", err)
	}
	// Deserialize `MarketCumulativeDepositInterest`:
	err = decoder.Decode(&obj.MarketCumulativeDepositInterest)
	if err != nil {
		return errors.NewField("MarketCumulativeDepositInterest", err)
	}
	// Deserialize `MarketCumulativeBorrowInterest`:
	err = decoder.Decode(&obj.MarketCumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("MarketCumulativeBorrowInterest", err)
	}
	// Deserialize `TotalDepositsAfter`:
	err = decoder.Decode(&obj.TotalDepositsAfter)
	if err != nil {
		return errors.NewField("TotalDepositsAfter", err)
	}
	// Deserialize `TotalWithdrawsAfter`:
	err = decoder.Decode(&obj.TotalWithdrawsAfter)
	if err != nil {
		return errors.NewField("TotalWithdrawsAfter", err)
	}
	// Deserialize `Explanation`:
	err = decoder.Decode(&obj.Explanation)
	if err != nil {
		return errors.NewField("Explanation", err)
	}
	// Deserialize `TransferUser` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TransferUser", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TransferUser)
			if err != nil {
				return errors.NewField("TransferUser", err)
			}
		}
	}
	return nil
}

func (obj *DepositRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DepositRecord: %w", err)
	}
	return nil
}

func UnmarshalDepositRecord(buf []byte) (*DepositRecord, error) {
	obj := new(DepositRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SpotInterestRecord struct {
	Ts                        int64          `json:"ts"`
	MarketIndex               uint16         `json:"marketIndex"`
	DepositBalance            binary.Uint128 `json:"depositBalance"`
	CumulativeDepositInterest binary.Uint128 `json:"cumulativeDepositInterest"`
	BorrowBalance             binary.Uint128 `json:"borrowBalance"`
	CumulativeBorrowInterest  binary.Uint128 `json:"cumulativeBorrowInterest"`
	OptimalUtilization        uint32         `json:"optimalUtilization"`
	OptimalBorrowRate         uint32         `json:"optimalBorrowRate"`
	MaxBorrowRate             uint32         `json:"maxBorrowRate"`
}

func (obj SpotInterestRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `DepositBalance`:
	err = encoder.Encode(obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Serialize `CumulativeDepositInterest`:
	err = encoder.Encode(obj.CumulativeDepositInterest)
	if err != nil {
		return errors.NewField("CumulativeDepositInterest", err)
	}
	// Serialize `BorrowBalance`:
	err = encoder.Encode(obj.BorrowBalance)
	if err != nil {
		return errors.NewField("BorrowBalance", err)
	}
	// Serialize `CumulativeBorrowInterest`:
	err = encoder.Encode(obj.CumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("CumulativeBorrowInterest", err)
	}
	// Serialize `OptimalUtilization`:
	err = encoder.Encode(obj.OptimalUtilization)
	if err != nil {
		return errors.NewField("OptimalUtilization", err)
	}
	// Serialize `OptimalBorrowRate`:
	err = encoder.Encode(obj.OptimalBorrowRate)
	if err != nil {
		return errors.NewField("OptimalBorrowRate", err)
	}
	// Serialize `MaxBorrowRate`:
	err = encoder.Encode(obj.MaxBorrowRate)
	if err != nil {
		return errors.NewField("MaxBorrowRate", err)
	}
	return nil
}

func (obj SpotInterestRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotInterestRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotInterestRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `DepositBalance`:
	err = decoder.Decode(&obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Deserialize `CumulativeDepositInterest`:
	err = decoder.Decode(&obj.CumulativeDepositInterest)
	if err != nil {
		return errors.NewField("CumulativeDepositInterest", err)
	}
	// Deserialize `BorrowBalance`:
	err = decoder.Decode(&obj.BorrowBalance)
	if err != nil {
		return errors.NewField("BorrowBalance", err)
	}
	// Deserialize `CumulativeBorrowInterest`:
	err = decoder.Decode(&obj.CumulativeBorrowInterest)
	if err != nil {
		return errors.NewField("CumulativeBorrowInterest", err)
	}
	// Deserialize `OptimalUtilization`:
	err = decoder.Decode(&obj.OptimalUtilization)
	if err != nil {
		return errors.NewField("OptimalUtilization", err)
	}
	// Deserialize `OptimalBorrowRate`:
	err = decoder.Decode(&obj.OptimalBorrowRate)
	if err != nil {
		return errors.NewField("OptimalBorrowRate", err)
	}
	// Deserialize `MaxBorrowRate`:
	err = decoder.Decode(&obj.MaxBorrowRate)
	if err != nil {
		return errors.NewField("MaxBorrowRate", err)
	}
	return nil
}

func (obj *SpotInterestRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotInterestRecord: %w", err)
	}
	return nil
}

func UnmarshalSpotInterestRecord(buf []byte) (*SpotInterestRecord, error) {
	obj := new(SpotInterestRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FundingPaymentRecord struct {
	Ts                        int64              `json:"ts"`
	UserAuthority             solanago.PublicKey `json:"userAuthority"`
	User                      solanago.PublicKey `json:"user"`
	MarketIndex               uint16             `json:"marketIndex"`
	FundingPayment            int64              `json:"fundingPayment"`
	BaseAssetAmount           int64              `json:"baseAssetAmount"`
	UserLastCumulativeFunding int64              `json:"userLastCumulativeFunding"`
	AmmCumulativeFundingLong  binary.Int128      `json:"ammCumulativeFundingLong"`
	AmmCumulativeFundingShort binary.Int128      `json:"ammCumulativeFundingShort"`
}

func (obj FundingPaymentRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `UserAuthority`:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `FundingPayment`:
	err = encoder.Encode(obj.FundingPayment)
	if err != nil {
		return errors.NewField("FundingPayment", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `UserLastCumulativeFunding`:
	err = encoder.Encode(obj.UserLastCumulativeFunding)
	if err != nil {
		return errors.NewField("UserLastCumulativeFunding", err)
	}
	// Serialize `AmmCumulativeFundingLong`:
	err = encoder.Encode(obj.AmmCumulativeFundingLong)
	if err != nil {
		return errors.NewField("AmmCumulativeFundingLong", err)
	}
	// Serialize `AmmCumulativeFundingShort`:
	err = encoder.Encode(obj.AmmCumulativeFundingShort)
	if err != nil {
		return errors.NewField("AmmCumulativeFundingShort", err)
	}
	return nil
}

func (obj FundingPaymentRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FundingPaymentRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FundingPaymentRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `FundingPayment`:
	err = decoder.Decode(&obj.FundingPayment)
	if err != nil {
		return errors.NewField("FundingPayment", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `UserLastCumulativeFunding`:
	err = decoder.Decode(&obj.UserLastCumulativeFunding)
	if err != nil {
		return errors.NewField("UserLastCumulativeFunding", err)
	}
	// Deserialize `AmmCumulativeFundingLong`:
	err = decoder.Decode(&obj.AmmCumulativeFundingLong)
	if err != nil {
		return errors.NewField("AmmCumulativeFundingLong", err)
	}
	// Deserialize `AmmCumulativeFundingShort`:
	err = decoder.Decode(&obj.AmmCumulativeFundingShort)
	if err != nil {
		return errors.NewField("AmmCumulativeFundingShort", err)
	}
	return nil
}

func (obj *FundingPaymentRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FundingPaymentRecord: %w", err)
	}
	return nil
}

func UnmarshalFundingPaymentRecord(buf []byte) (*FundingPaymentRecord, error) {
	obj := new(FundingPaymentRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FundingRateRecord struct {
	Ts                             int64         `json:"ts"`
	RecordId                       uint64        `json:"recordId"`
	MarketIndex                    uint16        `json:"marketIndex"`
	FundingRate                    int64         `json:"fundingRate"`
	FundingRateLong                binary.Int128 `json:"fundingRateLong"`
	FundingRateShort               binary.Int128 `json:"fundingRateShort"`
	CumulativeFundingRateLong      binary.Int128 `json:"cumulativeFundingRateLong"`
	CumulativeFundingRateShort     binary.Int128 `json:"cumulativeFundingRateShort"`
	OraclePriceTwap                int64         `json:"oraclePriceTwap"`
	MarkPriceTwap                  uint64        `json:"markPriceTwap"`
	PeriodRevenue                  int64         `json:"periodRevenue"`
	BaseAssetAmountWithAmm         binary.Int128 `json:"baseAssetAmountWithAmm"`
	BaseAssetAmountWithUnsettledLp binary.Int128 `json:"baseAssetAmountWithUnsettledLp"`
}

func (obj FundingRateRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `RecordId`:
	err = encoder.Encode(obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `FundingRate`:
	err = encoder.Encode(obj.FundingRate)
	if err != nil {
		return errors.NewField("FundingRate", err)
	}
	// Serialize `FundingRateLong`:
	err = encoder.Encode(obj.FundingRateLong)
	if err != nil {
		return errors.NewField("FundingRateLong", err)
	}
	// Serialize `FundingRateShort`:
	err = encoder.Encode(obj.FundingRateShort)
	if err != nil {
		return errors.NewField("FundingRateShort", err)
	}
	// Serialize `CumulativeFundingRateLong`:
	err = encoder.Encode(obj.CumulativeFundingRateLong)
	if err != nil {
		return errors.NewField("CumulativeFundingRateLong", err)
	}
	// Serialize `CumulativeFundingRateShort`:
	err = encoder.Encode(obj.CumulativeFundingRateShort)
	if err != nil {
		return errors.NewField("CumulativeFundingRateShort", err)
	}
	// Serialize `OraclePriceTwap`:
	err = encoder.Encode(obj.OraclePriceTwap)
	if err != nil {
		return errors.NewField("OraclePriceTwap", err)
	}
	// Serialize `MarkPriceTwap`:
	err = encoder.Encode(obj.MarkPriceTwap)
	if err != nil {
		return errors.NewField("MarkPriceTwap", err)
	}
	// Serialize `PeriodRevenue`:
	err = encoder.Encode(obj.PeriodRevenue)
	if err != nil {
		return errors.NewField("PeriodRevenue", err)
	}
	// Serialize `BaseAssetAmountWithAmm`:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Serialize `BaseAssetAmountWithUnsettledLp`:
	err = encoder.Encode(obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithUnsettledLp", err)
	}
	return nil
}

func (obj FundingRateRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FundingRateRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FundingRateRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `RecordId`:
	err = decoder.Decode(&obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `FundingRate`:
	err = decoder.Decode(&obj.FundingRate)
	if err != nil {
		return errors.NewField("FundingRate", err)
	}
	// Deserialize `FundingRateLong`:
	err = decoder.Decode(&obj.FundingRateLong)
	if err != nil {
		return errors.NewField("FundingRateLong", err)
	}
	// Deserialize `FundingRateShort`:
	err = decoder.Decode(&obj.FundingRateShort)
	if err != nil {
		return errors.NewField("FundingRateShort", err)
	}
	// Deserialize `CumulativeFundingRateLong`:
	err = decoder.Decode(&obj.CumulativeFundingRateLong)
	if err != nil {
		return errors.NewField("CumulativeFundingRateLong", err)
	}
	// Deserialize `CumulativeFundingRateShort`:
	err = decoder.Decode(&obj.CumulativeFundingRateShort)
	if err != nil {
		return errors.NewField("CumulativeFundingRateShort", err)
	}
	// Deserialize `OraclePriceTwap`:
	err = decoder.Decode(&obj.OraclePriceTwap)
	if err != nil {
		return errors.NewField("OraclePriceTwap", err)
	}
	// Deserialize `MarkPriceTwap`:
	err = decoder.Decode(&obj.MarkPriceTwap)
	if err != nil {
		return errors.NewField("MarkPriceTwap", err)
	}
	// Deserialize `PeriodRevenue`:
	err = decoder.Decode(&obj.PeriodRevenue)
	if err != nil {
		return errors.NewField("PeriodRevenue", err)
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Deserialize `BaseAssetAmountWithUnsettledLp`:
	err = decoder.Decode(&obj.BaseAssetAmountWithUnsettledLp)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithUnsettledLp", err)
	}
	return nil
}

func (obj *FundingRateRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FundingRateRecord: %w", err)
	}
	return nil
}

func UnmarshalFundingRateRecord(buf []byte) (*FundingRateRecord, error) {
	obj := new(FundingRateRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CurveRecord struct {
	Ts                         int64          `json:"ts"`
	RecordId                   uint64         `json:"recordId"`
	PegMultiplierBefore        binary.Uint128 `json:"pegMultiplierBefore"`
	BaseAssetReserveBefore     binary.Uint128 `json:"baseAssetReserveBefore"`
	QuoteAssetReserveBefore    binary.Uint128 `json:"quoteAssetReserveBefore"`
	SqrtKBefore                binary.Uint128 `json:"sqrtKBefore"`
	PegMultiplierAfter         binary.Uint128 `json:"pegMultiplierAfter"`
	BaseAssetReserveAfter      binary.Uint128 `json:"baseAssetReserveAfter"`
	QuoteAssetReserveAfter     binary.Uint128 `json:"quoteAssetReserveAfter"`
	SqrtKAfter                 binary.Uint128 `json:"sqrtKAfter"`
	BaseAssetAmountLong        binary.Uint128 `json:"baseAssetAmountLong"`
	BaseAssetAmountShort       binary.Uint128 `json:"baseAssetAmountShort"`
	BaseAssetAmountWithAmm     binary.Int128  `json:"baseAssetAmountWithAmm"`
	TotalFee                   binary.Int128  `json:"totalFee"`
	TotalFeeMinusDistributions binary.Int128  `json:"totalFeeMinusDistributions"`
	AdjustmentCost             binary.Int128  `json:"adjustmentCost"`
	OraclePrice                int64          `json:"oraclePrice"`
	FillRecord                 binary.Uint128 `json:"fillRecord"`
	NumberOfUsers              uint32         `json:"numberOfUsers"`
	MarketIndex                uint16         `json:"marketIndex"`
}

func (obj CurveRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `RecordId`:
	err = encoder.Encode(obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Serialize `PegMultiplierBefore`:
	err = encoder.Encode(obj.PegMultiplierBefore)
	if err != nil {
		return errors.NewField("PegMultiplierBefore", err)
	}
	// Serialize `BaseAssetReserveBefore`:
	err = encoder.Encode(obj.BaseAssetReserveBefore)
	if err != nil {
		return errors.NewField("BaseAssetReserveBefore", err)
	}
	// Serialize `QuoteAssetReserveBefore`:
	err = encoder.Encode(obj.QuoteAssetReserveBefore)
	if err != nil {
		return errors.NewField("QuoteAssetReserveBefore", err)
	}
	// Serialize `SqrtKBefore`:
	err = encoder.Encode(obj.SqrtKBefore)
	if err != nil {
		return errors.NewField("SqrtKBefore", err)
	}
	// Serialize `PegMultiplierAfter`:
	err = encoder.Encode(obj.PegMultiplierAfter)
	if err != nil {
		return errors.NewField("PegMultiplierAfter", err)
	}
	// Serialize `BaseAssetReserveAfter`:
	err = encoder.Encode(obj.BaseAssetReserveAfter)
	if err != nil {
		return errors.NewField("BaseAssetReserveAfter", err)
	}
	// Serialize `QuoteAssetReserveAfter`:
	err = encoder.Encode(obj.QuoteAssetReserveAfter)
	if err != nil {
		return errors.NewField("QuoteAssetReserveAfter", err)
	}
	// Serialize `SqrtKAfter`:
	err = encoder.Encode(obj.SqrtKAfter)
	if err != nil {
		return errors.NewField("SqrtKAfter", err)
	}
	// Serialize `BaseAssetAmountLong`:
	err = encoder.Encode(obj.BaseAssetAmountLong)
	if err != nil {
		return errors.NewField("BaseAssetAmountLong", err)
	}
	// Serialize `BaseAssetAmountShort`:
	err = encoder.Encode(obj.BaseAssetAmountShort)
	if err != nil {
		return errors.NewField("BaseAssetAmountShort", err)
	}
	// Serialize `BaseAssetAmountWithAmm`:
	err = encoder.Encode(obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Serialize `TotalFee`:
	err = encoder.Encode(obj.TotalFee)
	if err != nil {
		return errors.NewField("TotalFee", err)
	}
	// Serialize `TotalFeeMinusDistributions`:
	err = encoder.Encode(obj.TotalFeeMinusDistributions)
	if err != nil {
		return errors.NewField("TotalFeeMinusDistributions", err)
	}
	// Serialize `AdjustmentCost`:
	err = encoder.Encode(obj.AdjustmentCost)
	if err != nil {
		return errors.NewField("AdjustmentCost", err)
	}
	// Serialize `OraclePrice`:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Serialize `FillRecord`:
	err = encoder.Encode(obj.FillRecord)
	if err != nil {
		return errors.NewField("FillRecord", err)
	}
	// Serialize `NumberOfUsers`:
	err = encoder.Encode(obj.NumberOfUsers)
	if err != nil {
		return errors.NewField("NumberOfUsers", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	return nil
}

func (obj CurveRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurveRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurveRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `RecordId`:
	err = decoder.Decode(&obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Deserialize `PegMultiplierBefore`:
	err = decoder.Decode(&obj.PegMultiplierBefore)
	if err != nil {
		return errors.NewField("PegMultiplierBefore", err)
	}
	// Deserialize `BaseAssetReserveBefore`:
	err = decoder.Decode(&obj.BaseAssetReserveBefore)
	if err != nil {
		return errors.NewField("BaseAssetReserveBefore", err)
	}
	// Deserialize `QuoteAssetReserveBefore`:
	err = decoder.Decode(&obj.QuoteAssetReserveBefore)
	if err != nil {
		return errors.NewField("QuoteAssetReserveBefore", err)
	}
	// Deserialize `SqrtKBefore`:
	err = decoder.Decode(&obj.SqrtKBefore)
	if err != nil {
		return errors.NewField("SqrtKBefore", err)
	}
	// Deserialize `PegMultiplierAfter`:
	err = decoder.Decode(&obj.PegMultiplierAfter)
	if err != nil {
		return errors.NewField("PegMultiplierAfter", err)
	}
	// Deserialize `BaseAssetReserveAfter`:
	err = decoder.Decode(&obj.BaseAssetReserveAfter)
	if err != nil {
		return errors.NewField("BaseAssetReserveAfter", err)
	}
	// Deserialize `QuoteAssetReserveAfter`:
	err = decoder.Decode(&obj.QuoteAssetReserveAfter)
	if err != nil {
		return errors.NewField("QuoteAssetReserveAfter", err)
	}
	// Deserialize `SqrtKAfter`:
	err = decoder.Decode(&obj.SqrtKAfter)
	if err != nil {
		return errors.NewField("SqrtKAfter", err)
	}
	// Deserialize `BaseAssetAmountLong`:
	err = decoder.Decode(&obj.BaseAssetAmountLong)
	if err != nil {
		return errors.NewField("BaseAssetAmountLong", err)
	}
	// Deserialize `BaseAssetAmountShort`:
	err = decoder.Decode(&obj.BaseAssetAmountShort)
	if err != nil {
		return errors.NewField("BaseAssetAmountShort", err)
	}
	// Deserialize `BaseAssetAmountWithAmm`:
	err = decoder.Decode(&obj.BaseAssetAmountWithAmm)
	if err != nil {
		return errors.NewField("BaseAssetAmountWithAmm", err)
	}
	// Deserialize `TotalFee`:
	err = decoder.Decode(&obj.TotalFee)
	if err != nil {
		return errors.NewField("TotalFee", err)
	}
	// Deserialize `TotalFeeMinusDistributions`:
	err = decoder.Decode(&obj.TotalFeeMinusDistributions)
	if err != nil {
		return errors.NewField("TotalFeeMinusDistributions", err)
	}
	// Deserialize `AdjustmentCost`:
	err = decoder.Decode(&obj.AdjustmentCost)
	if err != nil {
		return errors.NewField("AdjustmentCost", err)
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Deserialize `FillRecord`:
	err = decoder.Decode(&obj.FillRecord)
	if err != nil {
		return errors.NewField("FillRecord", err)
	}
	// Deserialize `NumberOfUsers`:
	err = decoder.Decode(&obj.NumberOfUsers)
	if err != nil {
		return errors.NewField("NumberOfUsers", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	return nil
}

func (obj *CurveRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurveRecord: %w", err)
	}
	return nil
}

func UnmarshalCurveRecord(buf []byte) (*CurveRecord, error) {
	obj := new(CurveRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SignedMsgOrderRecord struct {
	User                  solanago.PublicKey `json:"user"`
	Hash                  string             `json:"hash"`
	MatchingOrderParams   OrderParams        `json:"matchingOrderParams"`
	UserOrderId           uint32             `json:"userOrderId"`
	SignedMsgOrderMaxSlot uint64             `json:"signedMsgOrderMaxSlot"`
	SignedMsgOrderUuid    [8]uint8           `json:"signedMsgOrderUuid"`
	Ts                    int64              `json:"ts"`
}

func (obj SignedMsgOrderRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Hash`:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return errors.NewField("Hash", err)
	}
	// Serialize `MatchingOrderParams`:
	err = encoder.Encode(obj.MatchingOrderParams)
	if err != nil {
		return errors.NewField("MatchingOrderParams", err)
	}
	// Serialize `UserOrderId`:
	err = encoder.Encode(obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Serialize `SignedMsgOrderMaxSlot`:
	err = encoder.Encode(obj.SignedMsgOrderMaxSlot)
	if err != nil {
		return errors.NewField("SignedMsgOrderMaxSlot", err)
	}
	// Serialize `SignedMsgOrderUuid`:
	err = encoder.Encode(obj.SignedMsgOrderUuid)
	if err != nil {
		return errors.NewField("SignedMsgOrderUuid", err)
	}
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	return nil
}

func (obj SignedMsgOrderRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SignedMsgOrderRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SignedMsgOrderRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return errors.NewField("Hash", err)
	}
	// Deserialize `MatchingOrderParams`:
	err = decoder.Decode(&obj.MatchingOrderParams)
	if err != nil {
		return errors.NewField("MatchingOrderParams", err)
	}
	// Deserialize `UserOrderId`:
	err = decoder.Decode(&obj.UserOrderId)
	if err != nil {
		return errors.NewField("UserOrderId", err)
	}
	// Deserialize `SignedMsgOrderMaxSlot`:
	err = decoder.Decode(&obj.SignedMsgOrderMaxSlot)
	if err != nil {
		return errors.NewField("SignedMsgOrderMaxSlot", err)
	}
	// Deserialize `SignedMsgOrderUuid`:
	err = decoder.Decode(&obj.SignedMsgOrderUuid)
	if err != nil {
		return errors.NewField("SignedMsgOrderUuid", err)
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	return nil
}

func (obj *SignedMsgOrderRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SignedMsgOrderRecord: %w", err)
	}
	return nil
}

func UnmarshalSignedMsgOrderRecord(buf []byte) (*SignedMsgOrderRecord, error) {
	obj := new(SignedMsgOrderRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OrderRecord struct {
	Ts    int64              `json:"ts"`
	User  solanago.PublicKey `json:"user"`
	Order Order              `json:"order"`
}

func (obj OrderRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Order`:
	err = encoder.Encode(obj.Order)
	if err != nil {
		return errors.NewField("Order", err)
	}
	return nil
}

func (obj OrderRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OrderRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OrderRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Order`:
	err = decoder.Decode(&obj.Order)
	if err != nil {
		return errors.NewField("Order", err)
	}
	return nil
}

func (obj *OrderRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OrderRecord: %w", err)
	}
	return nil
}

func UnmarshalOrderRecord(buf []byte) (*OrderRecord, error) {
	obj := new(OrderRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OrderActionRecord struct {
	Ts                                         int64                  `json:"ts"`
	Action                                     OrderAction            `json:"action"`
	ActionExplanation                          OrderActionExplanation `json:"actionExplanation"`
	MarketIndex                                uint16                 `json:"marketIndex"`
	MarketType                                 MarketType             `json:"marketType"`
	Filler                                     *solanago.PublicKey    `bin:"optional" json:"filler,omitempty"`
	FillerReward                               *uint64                `bin:"optional" json:"fillerReward,omitempty"`
	FillRecordId                               *uint64                `bin:"optional" json:"fillRecordId,omitempty"`
	BaseAssetAmountFilled                      *uint64                `bin:"optional" json:"baseAssetAmountFilled,omitempty"`
	QuoteAssetAmountFilled                     *uint64                `bin:"optional" json:"quoteAssetAmountFilled,omitempty"`
	TakerFee                                   *uint64                `bin:"optional" json:"takerFee,omitempty"`
	MakerFee                                   *int64                 `bin:"optional" json:"makerFee,omitempty"`
	ReferrerReward                             *uint32                `bin:"optional" json:"referrerReward,omitempty"`
	QuoteAssetAmountSurplus                    *int64                 `bin:"optional" json:"quoteAssetAmountSurplus,omitempty"`
	SpotFulfillmentMethodFee                   *uint64                `bin:"optional" json:"spotFulfillmentMethodFee,omitempty"`
	Taker                                      *solanago.PublicKey    `bin:"optional" json:"taker,omitempty"`
	TakerOrderId                               *uint32                `bin:"optional" json:"takerOrderId,omitempty"`
	TakerOrderDirection                        *PositionDirection     `bin:"optional" json:"takerOrderDirection,omitempty"`
	TakerOrderBaseAssetAmount                  *uint64                `bin:"optional" json:"takerOrderBaseAssetAmount,omitempty"`
	TakerOrderCumulativeBaseAssetAmountFilled  *uint64                `bin:"optional" json:"takerOrderCumulativeBaseAssetAmountFilled,omitempty"`
	TakerOrderCumulativeQuoteAssetAmountFilled *uint64                `bin:"optional" json:"takerOrderCumulativeQuoteAssetAmountFilled,omitempty"`
	Maker                                      *solanago.PublicKey    `bin:"optional" json:"maker,omitempty"`
	MakerOrderId                               *uint32                `bin:"optional" json:"makerOrderId,omitempty"`
	MakerOrderDirection                        *PositionDirection     `bin:"optional" json:"makerOrderDirection,omitempty"`
	MakerOrderBaseAssetAmount                  *uint64                `bin:"optional" json:"makerOrderBaseAssetAmount,omitempty"`
	MakerOrderCumulativeBaseAssetAmountFilled  *uint64                `bin:"optional" json:"makerOrderCumulativeBaseAssetAmountFilled,omitempty"`
	MakerOrderCumulativeQuoteAssetAmountFilled *uint64                `bin:"optional" json:"makerOrderCumulativeQuoteAssetAmountFilled,omitempty"`
	OraclePrice                                int64                  `json:"oraclePrice"`
	BitFlags                                   uint8                  `json:"bitFlags"`
	TakerExistingQuoteEntryAmount              *uint64                `bin:"optional" json:"takerExistingQuoteEntryAmount,omitempty"`
	TakerExistingBaseAssetAmount               *uint64                `bin:"optional" json:"takerExistingBaseAssetAmount,omitempty"`
	MakerExistingQuoteEntryAmount              *uint64                `bin:"optional" json:"makerExistingQuoteEntryAmount,omitempty"`
	MakerExistingBaseAssetAmount               *uint64                `bin:"optional" json:"makerExistingBaseAssetAmount,omitempty"`
	TriggerPrice                               *uint64                `bin:"optional" json:"triggerPrice,omitempty"`
}

func (obj OrderActionRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Action`:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Serialize `ActionExplanation`:
	err = encoder.Encode(obj.ActionExplanation)
	if err != nil {
		return errors.NewField("ActionExplanation", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `MarketType`:
	err = encoder.Encode(obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Serialize `Filler` (optional):
	{
		if obj.Filler == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Filler", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Filler", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Filler)
			if err != nil {
				return errors.NewField("Filler", err)
			}
		}
	}
	// Serialize `FillerReward` (optional):
	{
		if obj.FillerReward == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("FillerReward", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("FillerReward", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.FillerReward)
			if err != nil {
				return errors.NewField("FillerReward", err)
			}
		}
	}
	// Serialize `FillRecordId` (optional):
	{
		if obj.FillRecordId == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("FillRecordId", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("FillRecordId", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.FillRecordId)
			if err != nil {
				return errors.NewField("FillRecordId", err)
			}
		}
	}
	// Serialize `BaseAssetAmountFilled` (optional):
	{
		if obj.BaseAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("BaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("BaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.BaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("BaseAssetAmountFilled", err)
			}
		}
	}
	// Serialize `QuoteAssetAmountFilled` (optional):
	{
		if obj.QuoteAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.QuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("QuoteAssetAmountFilled", err)
			}
		}
	}
	// Serialize `TakerFee` (optional):
	{
		if obj.TakerFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerFee)
			if err != nil {
				return errors.NewField("TakerFee", err)
			}
		}
	}
	// Serialize `MakerFee` (optional):
	{
		if obj.MakerFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerFee)
			if err != nil {
				return errors.NewField("MakerFee", err)
			}
		}
	}
	// Serialize `ReferrerReward` (optional):
	{
		if obj.ReferrerReward == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("ReferrerReward", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("ReferrerReward", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.ReferrerReward)
			if err != nil {
				return errors.NewField("ReferrerReward", err)
			}
		}
	}
	// Serialize `QuoteAssetAmountSurplus` (optional):
	{
		if obj.QuoteAssetAmountSurplus == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountSurplus", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("QuoteAssetAmountSurplus", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.QuoteAssetAmountSurplus)
			if err != nil {
				return errors.NewField("QuoteAssetAmountSurplus", err)
			}
		}
	}
	// Serialize `SpotFulfillmentMethodFee` (optional):
	{
		if obj.SpotFulfillmentMethodFee == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("SpotFulfillmentMethodFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("SpotFulfillmentMethodFee", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.SpotFulfillmentMethodFee)
			if err != nil {
				return errors.NewField("SpotFulfillmentMethodFee", err)
			}
		}
	}
	// Serialize `Taker` (optional):
	{
		if obj.Taker == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Taker", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Taker", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Taker)
			if err != nil {
				return errors.NewField("Taker", err)
			}
		}
	}
	// Serialize `TakerOrderId` (optional):
	{
		if obj.TakerOrderId == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerOrderId", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerOrderId", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerOrderId)
			if err != nil {
				return errors.NewField("TakerOrderId", err)
			}
		}
	}
	// Serialize `TakerOrderDirection` (optional):
	{
		if obj.TakerOrderDirection == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerOrderDirection", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerOrderDirection", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerOrderDirection)
			if err != nil {
				return errors.NewField("TakerOrderDirection", err)
			}
		}
	}
	// Serialize `TakerOrderBaseAssetAmount` (optional):
	{
		if obj.TakerOrderBaseAssetAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerOrderBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerOrderBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerOrderBaseAssetAmount)
			if err != nil {
				return errors.NewField("TakerOrderBaseAssetAmount", err)
			}
		}
	}
	// Serialize `TakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		if obj.TakerOrderCumulativeBaseAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("TakerOrderCumulativeBaseAssetAmountFilled", err)
			}
		}
	}
	// Serialize `TakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		if obj.TakerOrderCumulativeQuoteAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("TakerOrderCumulativeQuoteAssetAmountFilled", err)
			}
		}
	}
	// Serialize `Maker` (optional):
	{
		if obj.Maker == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Maker", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Maker", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Maker)
			if err != nil {
				return errors.NewField("Maker", err)
			}
		}
	}
	// Serialize `MakerOrderId` (optional):
	{
		if obj.MakerOrderId == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerOrderId", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerOrderId", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerOrderId)
			if err != nil {
				return errors.NewField("MakerOrderId", err)
			}
		}
	}
	// Serialize `MakerOrderDirection` (optional):
	{
		if obj.MakerOrderDirection == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerOrderDirection", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerOrderDirection", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerOrderDirection)
			if err != nil {
				return errors.NewField("MakerOrderDirection", err)
			}
		}
	}
	// Serialize `MakerOrderBaseAssetAmount` (optional):
	{
		if obj.MakerOrderBaseAssetAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerOrderBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerOrderBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerOrderBaseAssetAmount)
			if err != nil {
				return errors.NewField("MakerOrderBaseAssetAmount", err)
			}
		}
	}
	// Serialize `MakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		if obj.MakerOrderCumulativeBaseAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("MakerOrderCumulativeBaseAssetAmountFilled", err)
			}
		}
	}
	// Serialize `MakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		if obj.MakerOrderCumulativeQuoteAssetAmountFilled == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("MakerOrderCumulativeQuoteAssetAmountFilled", err)
			}
		}
	}
	// Serialize `OraclePrice`:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Serialize `BitFlags`:
	err = encoder.Encode(obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Serialize `TakerExistingQuoteEntryAmount` (optional):
	{
		if obj.TakerExistingQuoteEntryAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerExistingQuoteEntryAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerExistingQuoteEntryAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerExistingQuoteEntryAmount)
			if err != nil {
				return errors.NewField("TakerExistingQuoteEntryAmount", err)
			}
		}
	}
	// Serialize `TakerExistingBaseAssetAmount` (optional):
	{
		if obj.TakerExistingBaseAssetAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TakerExistingBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TakerExistingBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TakerExistingBaseAssetAmount)
			if err != nil {
				return errors.NewField("TakerExistingBaseAssetAmount", err)
			}
		}
	}
	// Serialize `MakerExistingQuoteEntryAmount` (optional):
	{
		if obj.MakerExistingQuoteEntryAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerExistingQuoteEntryAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerExistingQuoteEntryAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerExistingQuoteEntryAmount)
			if err != nil {
				return errors.NewField("MakerExistingQuoteEntryAmount", err)
			}
		}
	}
	// Serialize `MakerExistingBaseAssetAmount` (optional):
	{
		if obj.MakerExistingBaseAssetAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("MakerExistingBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("MakerExistingBaseAssetAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.MakerExistingBaseAssetAmount)
			if err != nil {
				return errors.NewField("MakerExistingBaseAssetAmount", err)
			}
		}
	}
	// Serialize `TriggerPrice` (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	return nil
}

func (obj OrderActionRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OrderActionRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OrderActionRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Deserialize `ActionExplanation`:
	err = decoder.Decode(&obj.ActionExplanation)
	if err != nil {
		return errors.NewField("ActionExplanation", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `MarketType`:
	err = decoder.Decode(&obj.MarketType)
	if err != nil {
		return errors.NewField("MarketType", err)
	}
	// Deserialize `Filler` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Filler", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Filler)
			if err != nil {
				return errors.NewField("Filler", err)
			}
		}
	}
	// Deserialize `FillerReward` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("FillerReward", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.FillerReward)
			if err != nil {
				return errors.NewField("FillerReward", err)
			}
		}
	}
	// Deserialize `FillRecordId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("FillRecordId", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.FillRecordId)
			if err != nil {
				return errors.NewField("FillRecordId", err)
			}
		}
	}
	// Deserialize `BaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("BaseAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.BaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("BaseAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `QuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("QuoteAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.QuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("QuoteAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `TakerFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerFee)
			if err != nil {
				return errors.NewField("TakerFee", err)
			}
		}
	}
	// Deserialize `MakerFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerFee)
			if err != nil {
				return errors.NewField("MakerFee", err)
			}
		}
	}
	// Deserialize `ReferrerReward` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("ReferrerReward", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.ReferrerReward)
			if err != nil {
				return errors.NewField("ReferrerReward", err)
			}
		}
	}
	// Deserialize `QuoteAssetAmountSurplus` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("QuoteAssetAmountSurplus", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.QuoteAssetAmountSurplus)
			if err != nil {
				return errors.NewField("QuoteAssetAmountSurplus", err)
			}
		}
	}
	// Deserialize `SpotFulfillmentMethodFee` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("SpotFulfillmentMethodFee", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.SpotFulfillmentMethodFee)
			if err != nil {
				return errors.NewField("SpotFulfillmentMethodFee", err)
			}
		}
	}
	// Deserialize `Taker` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Taker", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Taker)
			if err != nil {
				return errors.NewField("Taker", err)
			}
		}
	}
	// Deserialize `TakerOrderId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerOrderId", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderId)
			if err != nil {
				return errors.NewField("TakerOrderId", err)
			}
		}
	}
	// Deserialize `TakerOrderDirection` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerOrderDirection", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderDirection)
			if err != nil {
				return errors.NewField("TakerOrderDirection", err)
			}
		}
	}
	// Deserialize `TakerOrderBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerOrderBaseAssetAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderBaseAssetAmount)
			if err != nil {
				return errors.NewField("TakerOrderBaseAssetAmount", err)
			}
		}
	}
	// Deserialize `TakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("TakerOrderCumulativeBaseAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `TakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("TakerOrderCumulativeQuoteAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `Maker` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Maker", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Maker)
			if err != nil {
				return errors.NewField("Maker", err)
			}
		}
	}
	// Deserialize `MakerOrderId` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerOrderId", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderId)
			if err != nil {
				return errors.NewField("MakerOrderId", err)
			}
		}
	}
	// Deserialize `MakerOrderDirection` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerOrderDirection", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderDirection)
			if err != nil {
				return errors.NewField("MakerOrderDirection", err)
			}
		}
	}
	// Deserialize `MakerOrderBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerOrderBaseAssetAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderBaseAssetAmount)
			if err != nil {
				return errors.NewField("MakerOrderBaseAssetAmount", err)
			}
		}
	}
	// Deserialize `MakerOrderCumulativeBaseAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerOrderCumulativeBaseAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderCumulativeBaseAssetAmountFilled)
			if err != nil {
				return errors.NewField("MakerOrderCumulativeBaseAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `MakerOrderCumulativeQuoteAssetAmountFilled` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerOrderCumulativeQuoteAssetAmountFilled", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerOrderCumulativeQuoteAssetAmountFilled)
			if err != nil {
				return errors.NewField("MakerOrderCumulativeQuoteAssetAmountFilled", err)
			}
		}
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Deserialize `BitFlags`:
	err = decoder.Decode(&obj.BitFlags)
	if err != nil {
		return errors.NewField("BitFlags", err)
	}
	// Deserialize `TakerExistingQuoteEntryAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerExistingQuoteEntryAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerExistingQuoteEntryAmount)
			if err != nil {
				return errors.NewField("TakerExistingQuoteEntryAmount", err)
			}
		}
	}
	// Deserialize `TakerExistingBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TakerExistingBaseAssetAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TakerExistingBaseAssetAmount)
			if err != nil {
				return errors.NewField("TakerExistingBaseAssetAmount", err)
			}
		}
	}
	// Deserialize `MakerExistingQuoteEntryAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerExistingQuoteEntryAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerExistingQuoteEntryAmount)
			if err != nil {
				return errors.NewField("MakerExistingQuoteEntryAmount", err)
			}
		}
	}
	// Deserialize `MakerExistingBaseAssetAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("MakerExistingBaseAssetAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.MakerExistingBaseAssetAmount)
			if err != nil {
				return errors.NewField("MakerExistingBaseAssetAmount", err)
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	return nil
}

func (obj *OrderActionRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OrderActionRecord: %w", err)
	}
	return nil
}

func UnmarshalOrderActionRecord(buf []byte) (*OrderActionRecord, error) {
	obj := new(OrderActionRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LpRecord struct {
	Ts                    int64              `json:"ts"`
	User                  solanago.PublicKey `json:"user"`
	Action                LpAction           `json:"action"`
	NShares               uint64             `json:"nShares"`
	MarketIndex           uint16             `json:"marketIndex"`
	DeltaBaseAssetAmount  int64              `json:"deltaBaseAssetAmount"`
	DeltaQuoteAssetAmount int64              `json:"deltaQuoteAssetAmount"`
	Pnl                   int64              `json:"pnl"`
}

func (obj LpRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Action`:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Serialize `NShares`:
	err = encoder.Encode(obj.NShares)
	if err != nil {
		return errors.NewField("NShares", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `DeltaBaseAssetAmount`:
	err = encoder.Encode(obj.DeltaBaseAssetAmount)
	if err != nil {
		return errors.NewField("DeltaBaseAssetAmount", err)
	}
	// Serialize `DeltaQuoteAssetAmount`:
	err = encoder.Encode(obj.DeltaQuoteAssetAmount)
	if err != nil {
		return errors.NewField("DeltaQuoteAssetAmount", err)
	}
	// Serialize `Pnl`:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	return nil
}

func (obj LpRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LpRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LpRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Deserialize `NShares`:
	err = decoder.Decode(&obj.NShares)
	if err != nil {
		return errors.NewField("NShares", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `DeltaBaseAssetAmount`:
	err = decoder.Decode(&obj.DeltaBaseAssetAmount)
	if err != nil {
		return errors.NewField("DeltaBaseAssetAmount", err)
	}
	// Deserialize `DeltaQuoteAssetAmount`:
	err = decoder.Decode(&obj.DeltaQuoteAssetAmount)
	if err != nil {
		return errors.NewField("DeltaQuoteAssetAmount", err)
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	return nil
}

func (obj *LpRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LpRecord: %w", err)
	}
	return nil
}

func UnmarshalLpRecord(buf []byte) (*LpRecord, error) {
	obj := new(LpRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidationRecord struct {
	Ts                         int64                            `json:"ts"`
	LiquidationType            LiquidationType                  `json:"liquidationType"`
	User                       solanago.PublicKey               `json:"user"`
	Liquidator                 solanago.PublicKey               `json:"liquidator"`
	MarginRequirement          binary.Uint128                   `json:"marginRequirement"`
	TotalCollateral            binary.Int128                    `json:"totalCollateral"`
	MarginFreed                uint64                           `json:"marginFreed"`
	LiquidationId              uint16                           `json:"liquidationId"`
	Bankrupt                   bool                             `json:"bankrupt"`
	CanceledOrderIds           []uint32                         `json:"canceledOrderIds"`
	LiquidatePerp              LiquidatePerpRecord              `json:"liquidatePerp"`
	LiquidateSpot              LiquidateSpotRecord              `json:"liquidateSpot"`
	LiquidateBorrowForPerpPnl  LiquidateBorrowForPerpPnlRecord  `json:"liquidateBorrowForPerpPnl"`
	LiquidatePerpPnlForDeposit LiquidatePerpPnlForDepositRecord `json:"liquidatePerpPnlForDeposit"`
	PerpBankruptcy             PerpBankruptcyRecord             `json:"perpBankruptcy"`
	SpotBankruptcy             SpotBankruptcyRecord             `json:"spotBankruptcy"`
}

func (obj LiquidationRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `LiquidationType`:
	err = encoder.Encode(obj.LiquidationType)
	if err != nil {
		return errors.NewField("LiquidationType", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Liquidator`:
	err = encoder.Encode(obj.Liquidator)
	if err != nil {
		return errors.NewField("Liquidator", err)
	}
	// Serialize `MarginRequirement`:
	err = encoder.Encode(obj.MarginRequirement)
	if err != nil {
		return errors.NewField("MarginRequirement", err)
	}
	// Serialize `TotalCollateral`:
	err = encoder.Encode(obj.TotalCollateral)
	if err != nil {
		return errors.NewField("TotalCollateral", err)
	}
	// Serialize `MarginFreed`:
	err = encoder.Encode(obj.MarginFreed)
	if err != nil {
		return errors.NewField("MarginFreed", err)
	}
	// Serialize `LiquidationId`:
	err = encoder.Encode(obj.LiquidationId)
	if err != nil {
		return errors.NewField("LiquidationId", err)
	}
	// Serialize `Bankrupt`:
	err = encoder.Encode(obj.Bankrupt)
	if err != nil {
		return errors.NewField("Bankrupt", err)
	}
	// Serialize `CanceledOrderIds`:
	err = encoder.Encode(obj.CanceledOrderIds)
	if err != nil {
		return errors.NewField("CanceledOrderIds", err)
	}
	// Serialize `LiquidatePerp`:
	err = encoder.Encode(obj.LiquidatePerp)
	if err != nil {
		return errors.NewField("LiquidatePerp", err)
	}
	// Serialize `LiquidateSpot`:
	err = encoder.Encode(obj.LiquidateSpot)
	if err != nil {
		return errors.NewField("LiquidateSpot", err)
	}
	// Serialize `LiquidateBorrowForPerpPnl`:
	err = encoder.Encode(obj.LiquidateBorrowForPerpPnl)
	if err != nil {
		return errors.NewField("LiquidateBorrowForPerpPnl", err)
	}
	// Serialize `LiquidatePerpPnlForDeposit`:
	err = encoder.Encode(obj.LiquidatePerpPnlForDeposit)
	if err != nil {
		return errors.NewField("LiquidatePerpPnlForDeposit", err)
	}
	// Serialize `PerpBankruptcy`:
	err = encoder.Encode(obj.PerpBankruptcy)
	if err != nil {
		return errors.NewField("PerpBankruptcy", err)
	}
	// Serialize `SpotBankruptcy`:
	err = encoder.Encode(obj.SpotBankruptcy)
	if err != nil {
		return errors.NewField("SpotBankruptcy", err)
	}
	return nil
}

func (obj LiquidationRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidationRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidationRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `LiquidationType`:
	err = decoder.Decode(&obj.LiquidationType)
	if err != nil {
		return errors.NewField("LiquidationType", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Liquidator`:
	err = decoder.Decode(&obj.Liquidator)
	if err != nil {
		return errors.NewField("Liquidator", err)
	}
	// Deserialize `MarginRequirement`:
	err = decoder.Decode(&obj.MarginRequirement)
	if err != nil {
		return errors.NewField("MarginRequirement", err)
	}
	// Deserialize `TotalCollateral`:
	err = decoder.Decode(&obj.TotalCollateral)
	if err != nil {
		return errors.NewField("TotalCollateral", err)
	}
	// Deserialize `MarginFreed`:
	err = decoder.Decode(&obj.MarginFreed)
	if err != nil {
		return errors.NewField("MarginFreed", err)
	}
	// Deserialize `LiquidationId`:
	err = decoder.Decode(&obj.LiquidationId)
	if err != nil {
		return errors.NewField("LiquidationId", err)
	}
	// Deserialize `Bankrupt`:
	err = decoder.Decode(&obj.Bankrupt)
	if err != nil {
		return errors.NewField("Bankrupt", err)
	}
	// Deserialize `CanceledOrderIds`:
	err = decoder.Decode(&obj.CanceledOrderIds)
	if err != nil {
		return errors.NewField("CanceledOrderIds", err)
	}
	// Deserialize `LiquidatePerp`:
	err = decoder.Decode(&obj.LiquidatePerp)
	if err != nil {
		return errors.NewField("LiquidatePerp", err)
	}
	// Deserialize `LiquidateSpot`:
	err = decoder.Decode(&obj.LiquidateSpot)
	if err != nil {
		return errors.NewField("LiquidateSpot", err)
	}
	// Deserialize `LiquidateBorrowForPerpPnl`:
	err = decoder.Decode(&obj.LiquidateBorrowForPerpPnl)
	if err != nil {
		return errors.NewField("LiquidateBorrowForPerpPnl", err)
	}
	// Deserialize `LiquidatePerpPnlForDeposit`:
	err = decoder.Decode(&obj.LiquidatePerpPnlForDeposit)
	if err != nil {
		return errors.NewField("LiquidatePerpPnlForDeposit", err)
	}
	// Deserialize `PerpBankruptcy`:
	err = decoder.Decode(&obj.PerpBankruptcy)
	if err != nil {
		return errors.NewField("PerpBankruptcy", err)
	}
	// Deserialize `SpotBankruptcy`:
	err = decoder.Decode(&obj.SpotBankruptcy)
	if err != nil {
		return errors.NewField("SpotBankruptcy", err)
	}
	return nil
}

func (obj *LiquidationRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidationRecord: %w", err)
	}
	return nil
}

func UnmarshalLiquidationRecord(buf []byte) (*LiquidationRecord, error) {
	obj := new(LiquidationRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SettlePnlRecord struct {
	Ts                    int64                `json:"ts"`
	User                  solanago.PublicKey   `json:"user"`
	MarketIndex           uint16               `json:"marketIndex"`
	Pnl                   binary.Int128        `json:"pnl"`
	BaseAssetAmount       int64                `json:"baseAssetAmount"`
	QuoteAssetAmountAfter int64                `json:"quoteAssetAmountAfter"`
	QuoteEntryAmount      int64                `json:"quoteEntryAmount"`
	SettlePrice           int64                `json:"settlePrice"`
	Explanation           SettlePnlExplanation `json:"explanation"`
}

func (obj SettlePnlRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Pnl`:
	err = encoder.Encode(obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	// Serialize `BaseAssetAmount`:
	err = encoder.Encode(obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Serialize `QuoteAssetAmountAfter`:
	err = encoder.Encode(obj.QuoteAssetAmountAfter)
	if err != nil {
		return errors.NewField("QuoteAssetAmountAfter", err)
	}
	// Serialize `QuoteEntryAmount`:
	err = encoder.Encode(obj.QuoteEntryAmount)
	if err != nil {
		return errors.NewField("QuoteEntryAmount", err)
	}
	// Serialize `SettlePrice`:
	err = encoder.Encode(obj.SettlePrice)
	if err != nil {
		return errors.NewField("SettlePrice", err)
	}
	// Serialize `Explanation`:
	err = encoder.Encode(obj.Explanation)
	if err != nil {
		return errors.NewField("Explanation", err)
	}
	return nil
}

func (obj SettlePnlRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SettlePnlRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SettlePnlRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Pnl`:
	err = decoder.Decode(&obj.Pnl)
	if err != nil {
		return errors.NewField("Pnl", err)
	}
	// Deserialize `BaseAssetAmount`:
	err = decoder.Decode(&obj.BaseAssetAmount)
	if err != nil {
		return errors.NewField("BaseAssetAmount", err)
	}
	// Deserialize `QuoteAssetAmountAfter`:
	err = decoder.Decode(&obj.QuoteAssetAmountAfter)
	if err != nil {
		return errors.NewField("QuoteAssetAmountAfter", err)
	}
	// Deserialize `QuoteEntryAmount`:
	err = decoder.Decode(&obj.QuoteEntryAmount)
	if err != nil {
		return errors.NewField("QuoteEntryAmount", err)
	}
	// Deserialize `SettlePrice`:
	err = decoder.Decode(&obj.SettlePrice)
	if err != nil {
		return errors.NewField("SettlePrice", err)
	}
	// Deserialize `Explanation`:
	err = decoder.Decode(&obj.Explanation)
	if err != nil {
		return errors.NewField("Explanation", err)
	}
	return nil
}

func (obj *SettlePnlRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SettlePnlRecord: %w", err)
	}
	return nil
}

func UnmarshalSettlePnlRecord(buf []byte) (*SettlePnlRecord, error) {
	obj := new(SettlePnlRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceFundRecord struct {
	Ts                         int64          `json:"ts"`
	SpotMarketIndex            uint16         `json:"spotMarketIndex"`
	PerpMarketIndex            uint16         `json:"perpMarketIndex"`
	UserIfFactor               uint32         `json:"userIfFactor"`
	TotalIfFactor              uint32         `json:"totalIfFactor"`
	VaultAmountBefore          uint64         `json:"vaultAmountBefore"`
	InsuranceVaultAmountBefore uint64         `json:"insuranceVaultAmountBefore"`
	TotalIfSharesBefore        binary.Uint128 `json:"totalIfSharesBefore"`
	TotalIfSharesAfter         binary.Uint128 `json:"totalIfSharesAfter"`
	Amount                     int64          `json:"amount"`
}

func (obj InsuranceFundRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `SpotMarketIndex`:
	err = encoder.Encode(obj.SpotMarketIndex)
	if err != nil {
		return errors.NewField("SpotMarketIndex", err)
	}
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `UserIfFactor`:
	err = encoder.Encode(obj.UserIfFactor)
	if err != nil {
		return errors.NewField("UserIfFactor", err)
	}
	// Serialize `TotalIfFactor`:
	err = encoder.Encode(obj.TotalIfFactor)
	if err != nil {
		return errors.NewField("TotalIfFactor", err)
	}
	// Serialize `VaultAmountBefore`:
	err = encoder.Encode(obj.VaultAmountBefore)
	if err != nil {
		return errors.NewField("VaultAmountBefore", err)
	}
	// Serialize `InsuranceVaultAmountBefore`:
	err = encoder.Encode(obj.InsuranceVaultAmountBefore)
	if err != nil {
		return errors.NewField("InsuranceVaultAmountBefore", err)
	}
	// Serialize `TotalIfSharesBefore`:
	err = encoder.Encode(obj.TotalIfSharesBefore)
	if err != nil {
		return errors.NewField("TotalIfSharesBefore", err)
	}
	// Serialize `TotalIfSharesAfter`:
	err = encoder.Encode(obj.TotalIfSharesAfter)
	if err != nil {
		return errors.NewField("TotalIfSharesAfter", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj InsuranceFundRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceFundRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceFundRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `SpotMarketIndex`:
	err = decoder.Decode(&obj.SpotMarketIndex)
	if err != nil {
		return errors.NewField("SpotMarketIndex", err)
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `UserIfFactor`:
	err = decoder.Decode(&obj.UserIfFactor)
	if err != nil {
		return errors.NewField("UserIfFactor", err)
	}
	// Deserialize `TotalIfFactor`:
	err = decoder.Decode(&obj.TotalIfFactor)
	if err != nil {
		return errors.NewField("TotalIfFactor", err)
	}
	// Deserialize `VaultAmountBefore`:
	err = decoder.Decode(&obj.VaultAmountBefore)
	if err != nil {
		return errors.NewField("VaultAmountBefore", err)
	}
	// Deserialize `InsuranceVaultAmountBefore`:
	err = decoder.Decode(&obj.InsuranceVaultAmountBefore)
	if err != nil {
		return errors.NewField("InsuranceVaultAmountBefore", err)
	}
	// Deserialize `TotalIfSharesBefore`:
	err = decoder.Decode(&obj.TotalIfSharesBefore)
	if err != nil {
		return errors.NewField("TotalIfSharesBefore", err)
	}
	// Deserialize `TotalIfSharesAfter`:
	err = decoder.Decode(&obj.TotalIfSharesAfter)
	if err != nil {
		return errors.NewField("TotalIfSharesAfter", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *InsuranceFundRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceFundRecord: %w", err)
	}
	return nil
}

func UnmarshalInsuranceFundRecord(buf []byte) (*InsuranceFundRecord, error) {
	obj := new(InsuranceFundRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceFundStakeRecord struct {
	Ts                         int64              `json:"ts"`
	UserAuthority              solanago.PublicKey `json:"userAuthority"`
	Action                     StakeAction        `json:"action"`
	Amount                     uint64             `json:"amount"`
	MarketIndex                uint16             `json:"marketIndex"`
	InsuranceVaultAmountBefore uint64             `json:"insuranceVaultAmountBefore"`
	IfSharesBefore             binary.Uint128     `json:"ifSharesBefore"`
	UserIfSharesBefore         binary.Uint128     `json:"userIfSharesBefore"`
	TotalIfSharesBefore        binary.Uint128     `json:"totalIfSharesBefore"`
	IfSharesAfter              binary.Uint128     `json:"ifSharesAfter"`
	UserIfSharesAfter          binary.Uint128     `json:"userIfSharesAfter"`
	TotalIfSharesAfter         binary.Uint128     `json:"totalIfSharesAfter"`
}

func (obj InsuranceFundStakeRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `UserAuthority`:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Serialize `Action`:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `InsuranceVaultAmountBefore`:
	err = encoder.Encode(obj.InsuranceVaultAmountBefore)
	if err != nil {
		return errors.NewField("InsuranceVaultAmountBefore", err)
	}
	// Serialize `IfSharesBefore`:
	err = encoder.Encode(obj.IfSharesBefore)
	if err != nil {
		return errors.NewField("IfSharesBefore", err)
	}
	// Serialize `UserIfSharesBefore`:
	err = encoder.Encode(obj.UserIfSharesBefore)
	if err != nil {
		return errors.NewField("UserIfSharesBefore", err)
	}
	// Serialize `TotalIfSharesBefore`:
	err = encoder.Encode(obj.TotalIfSharesBefore)
	if err != nil {
		return errors.NewField("TotalIfSharesBefore", err)
	}
	// Serialize `IfSharesAfter`:
	err = encoder.Encode(obj.IfSharesAfter)
	if err != nil {
		return errors.NewField("IfSharesAfter", err)
	}
	// Serialize `UserIfSharesAfter`:
	err = encoder.Encode(obj.UserIfSharesAfter)
	if err != nil {
		return errors.NewField("UserIfSharesAfter", err)
	}
	// Serialize `TotalIfSharesAfter`:
	err = encoder.Encode(obj.TotalIfSharesAfter)
	if err != nil {
		return errors.NewField("TotalIfSharesAfter", err)
	}
	return nil
}

func (obj InsuranceFundStakeRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceFundStakeRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceFundStakeRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return errors.NewField("Action", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `InsuranceVaultAmountBefore`:
	err = decoder.Decode(&obj.InsuranceVaultAmountBefore)
	if err != nil {
		return errors.NewField("InsuranceVaultAmountBefore", err)
	}
	// Deserialize `IfSharesBefore`:
	err = decoder.Decode(&obj.IfSharesBefore)
	if err != nil {
		return errors.NewField("IfSharesBefore", err)
	}
	// Deserialize `UserIfSharesBefore`:
	err = decoder.Decode(&obj.UserIfSharesBefore)
	if err != nil {
		return errors.NewField("UserIfSharesBefore", err)
	}
	// Deserialize `TotalIfSharesBefore`:
	err = decoder.Decode(&obj.TotalIfSharesBefore)
	if err != nil {
		return errors.NewField("TotalIfSharesBefore", err)
	}
	// Deserialize `IfSharesAfter`:
	err = decoder.Decode(&obj.IfSharesAfter)
	if err != nil {
		return errors.NewField("IfSharesAfter", err)
	}
	// Deserialize `UserIfSharesAfter`:
	err = decoder.Decode(&obj.UserIfSharesAfter)
	if err != nil {
		return errors.NewField("UserIfSharesAfter", err)
	}
	// Deserialize `TotalIfSharesAfter`:
	err = decoder.Decode(&obj.TotalIfSharesAfter)
	if err != nil {
		return errors.NewField("TotalIfSharesAfter", err)
	}
	return nil
}

func (obj *InsuranceFundStakeRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceFundStakeRecord: %w", err)
	}
	return nil
}

func UnmarshalInsuranceFundStakeRecord(buf []byte) (*InsuranceFundStakeRecord, error) {
	obj := new(InsuranceFundStakeRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InsuranceFundSwapRecord struct {
	RebalanceConfig         solanago.PublicKey `json:"rebalanceConfig"`
	InIfTotalSharesBefore   binary.Uint128     `json:"inIfTotalSharesBefore"`
	OutIfTotalSharesBefore  binary.Uint128     `json:"outIfTotalSharesBefore"`
	InIfUserSharesBefore    binary.Uint128     `json:"inIfUserSharesBefore"`
	OutIfUserSharesBefore   binary.Uint128     `json:"outIfUserSharesBefore"`
	InIfTotalSharesAfter    binary.Uint128     `json:"inIfTotalSharesAfter"`
	OutIfTotalSharesAfter   binary.Uint128     `json:"outIfTotalSharesAfter"`
	InIfUserSharesAfter     binary.Uint128     `json:"inIfUserSharesAfter"`
	OutIfUserSharesAfter    binary.Uint128     `json:"outIfUserSharesAfter"`
	Ts                      int64              `json:"ts"`
	InAmount                uint64             `json:"inAmount"`
	OutAmount               uint64             `json:"outAmount"`
	OutOraclePrice          uint64             `json:"outOraclePrice"`
	OutOraclePriceTwap      int64              `json:"outOraclePriceTwap"`
	InVaultAmountBefore     uint64             `json:"inVaultAmountBefore"`
	OutVaultAmountBefore    uint64             `json:"outVaultAmountBefore"`
	InFundVaultAmountAfter  uint64             `json:"inFundVaultAmountAfter"`
	OutFundVaultAmountAfter uint64             `json:"outFundVaultAmountAfter"`
	InMarketIndex           uint16             `json:"inMarketIndex"`
	OutMarketIndex          uint16             `json:"outMarketIndex"`
}

func (obj InsuranceFundSwapRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RebalanceConfig`:
	err = encoder.Encode(obj.RebalanceConfig)
	if err != nil {
		return errors.NewField("RebalanceConfig", err)
	}
	// Serialize `InIfTotalSharesBefore`:
	err = encoder.Encode(obj.InIfTotalSharesBefore)
	if err != nil {
		return errors.NewField("InIfTotalSharesBefore", err)
	}
	// Serialize `OutIfTotalSharesBefore`:
	err = encoder.Encode(obj.OutIfTotalSharesBefore)
	if err != nil {
		return errors.NewField("OutIfTotalSharesBefore", err)
	}
	// Serialize `InIfUserSharesBefore`:
	err = encoder.Encode(obj.InIfUserSharesBefore)
	if err != nil {
		return errors.NewField("InIfUserSharesBefore", err)
	}
	// Serialize `OutIfUserSharesBefore`:
	err = encoder.Encode(obj.OutIfUserSharesBefore)
	if err != nil {
		return errors.NewField("OutIfUserSharesBefore", err)
	}
	// Serialize `InIfTotalSharesAfter`:
	err = encoder.Encode(obj.InIfTotalSharesAfter)
	if err != nil {
		return errors.NewField("InIfTotalSharesAfter", err)
	}
	// Serialize `OutIfTotalSharesAfter`:
	err = encoder.Encode(obj.OutIfTotalSharesAfter)
	if err != nil {
		return errors.NewField("OutIfTotalSharesAfter", err)
	}
	// Serialize `InIfUserSharesAfter`:
	err = encoder.Encode(obj.InIfUserSharesAfter)
	if err != nil {
		return errors.NewField("InIfUserSharesAfter", err)
	}
	// Serialize `OutIfUserSharesAfter`:
	err = encoder.Encode(obj.OutIfUserSharesAfter)
	if err != nil {
		return errors.NewField("OutIfUserSharesAfter", err)
	}
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `InAmount`:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Serialize `OutAmount`:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Serialize `OutOraclePrice`:
	err = encoder.Encode(obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Serialize `OutOraclePriceTwap`:
	err = encoder.Encode(obj.OutOraclePriceTwap)
	if err != nil {
		return errors.NewField("OutOraclePriceTwap", err)
	}
	// Serialize `InVaultAmountBefore`:
	err = encoder.Encode(obj.InVaultAmountBefore)
	if err != nil {
		return errors.NewField("InVaultAmountBefore", err)
	}
	// Serialize `OutVaultAmountBefore`:
	err = encoder.Encode(obj.OutVaultAmountBefore)
	if err != nil {
		return errors.NewField("OutVaultAmountBefore", err)
	}
	// Serialize `InFundVaultAmountAfter`:
	err = encoder.Encode(obj.InFundVaultAmountAfter)
	if err != nil {
		return errors.NewField("InFundVaultAmountAfter", err)
	}
	// Serialize `OutFundVaultAmountAfter`:
	err = encoder.Encode(obj.OutFundVaultAmountAfter)
	if err != nil {
		return errors.NewField("OutFundVaultAmountAfter", err)
	}
	// Serialize `InMarketIndex`:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Serialize `OutMarketIndex`:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	return nil
}

func (obj InsuranceFundSwapRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InsuranceFundSwapRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InsuranceFundSwapRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RebalanceConfig`:
	err = decoder.Decode(&obj.RebalanceConfig)
	if err != nil {
		return errors.NewField("RebalanceConfig", err)
	}
	// Deserialize `InIfTotalSharesBefore`:
	err = decoder.Decode(&obj.InIfTotalSharesBefore)
	if err != nil {
		return errors.NewField("InIfTotalSharesBefore", err)
	}
	// Deserialize `OutIfTotalSharesBefore`:
	err = decoder.Decode(&obj.OutIfTotalSharesBefore)
	if err != nil {
		return errors.NewField("OutIfTotalSharesBefore", err)
	}
	// Deserialize `InIfUserSharesBefore`:
	err = decoder.Decode(&obj.InIfUserSharesBefore)
	if err != nil {
		return errors.NewField("InIfUserSharesBefore", err)
	}
	// Deserialize `OutIfUserSharesBefore`:
	err = decoder.Decode(&obj.OutIfUserSharesBefore)
	if err != nil {
		return errors.NewField("OutIfUserSharesBefore", err)
	}
	// Deserialize `InIfTotalSharesAfter`:
	err = decoder.Decode(&obj.InIfTotalSharesAfter)
	if err != nil {
		return errors.NewField("InIfTotalSharesAfter", err)
	}
	// Deserialize `OutIfTotalSharesAfter`:
	err = decoder.Decode(&obj.OutIfTotalSharesAfter)
	if err != nil {
		return errors.NewField("OutIfTotalSharesAfter", err)
	}
	// Deserialize `InIfUserSharesAfter`:
	err = decoder.Decode(&obj.InIfUserSharesAfter)
	if err != nil {
		return errors.NewField("InIfUserSharesAfter", err)
	}
	// Deserialize `OutIfUserSharesAfter`:
	err = decoder.Decode(&obj.OutIfUserSharesAfter)
	if err != nil {
		return errors.NewField("OutIfUserSharesAfter", err)
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Deserialize `OutOraclePrice`:
	err = decoder.Decode(&obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Deserialize `OutOraclePriceTwap`:
	err = decoder.Decode(&obj.OutOraclePriceTwap)
	if err != nil {
		return errors.NewField("OutOraclePriceTwap", err)
	}
	// Deserialize `InVaultAmountBefore`:
	err = decoder.Decode(&obj.InVaultAmountBefore)
	if err != nil {
		return errors.NewField("InVaultAmountBefore", err)
	}
	// Deserialize `OutVaultAmountBefore`:
	err = decoder.Decode(&obj.OutVaultAmountBefore)
	if err != nil {
		return errors.NewField("OutVaultAmountBefore", err)
	}
	// Deserialize `InFundVaultAmountAfter`:
	err = decoder.Decode(&obj.InFundVaultAmountAfter)
	if err != nil {
		return errors.NewField("InFundVaultAmountAfter", err)
	}
	// Deserialize `OutFundVaultAmountAfter`:
	err = decoder.Decode(&obj.OutFundVaultAmountAfter)
	if err != nil {
		return errors.NewField("OutFundVaultAmountAfter", err)
	}
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	return nil
}

func (obj *InsuranceFundSwapRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InsuranceFundSwapRecord: %w", err)
	}
	return nil
}

func UnmarshalInsuranceFundSwapRecord(buf []byte) (*InsuranceFundSwapRecord, error) {
	obj := new(InsuranceFundSwapRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TransferProtocolIfSharesToRevenuePoolRecord struct {
	Ts                   int64          `json:"ts"`
	MarketIndex          uint16         `json:"marketIndex"`
	Amount               uint64         `json:"amount"`
	Shares               binary.Uint128 `json:"shares"`
	IfVaultAmountBefore  uint64         `json:"ifVaultAmountBefore"`
	ProtocolSharesBefore binary.Uint128 `json:"protocolSharesBefore"`
	TransferAmount       uint64         `json:"transferAmount"`
}

func (obj TransferProtocolIfSharesToRevenuePoolRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `Shares`:
	err = encoder.Encode(obj.Shares)
	if err != nil {
		return errors.NewField("Shares", err)
	}
	// Serialize `IfVaultAmountBefore`:
	err = encoder.Encode(obj.IfVaultAmountBefore)
	if err != nil {
		return errors.NewField("IfVaultAmountBefore", err)
	}
	// Serialize `ProtocolSharesBefore`:
	err = encoder.Encode(obj.ProtocolSharesBefore)
	if err != nil {
		return errors.NewField("ProtocolSharesBefore", err)
	}
	// Serialize `TransferAmount`:
	err = encoder.Encode(obj.TransferAmount)
	if err != nil {
		return errors.NewField("TransferAmount", err)
	}
	return nil
}

func (obj TransferProtocolIfSharesToRevenuePoolRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TransferProtocolIfSharesToRevenuePoolRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TransferProtocolIfSharesToRevenuePoolRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `Shares`:
	err = decoder.Decode(&obj.Shares)
	if err != nil {
		return errors.NewField("Shares", err)
	}
	// Deserialize `IfVaultAmountBefore`:
	err = decoder.Decode(&obj.IfVaultAmountBefore)
	if err != nil {
		return errors.NewField("IfVaultAmountBefore", err)
	}
	// Deserialize `ProtocolSharesBefore`:
	err = decoder.Decode(&obj.ProtocolSharesBefore)
	if err != nil {
		return errors.NewField("ProtocolSharesBefore", err)
	}
	// Deserialize `TransferAmount`:
	err = decoder.Decode(&obj.TransferAmount)
	if err != nil {
		return errors.NewField("TransferAmount", err)
	}
	return nil
}

func (obj *TransferProtocolIfSharesToRevenuePoolRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TransferProtocolIfSharesToRevenuePoolRecord: %w", err)
	}
	return nil
}

func UnmarshalTransferProtocolIfSharesToRevenuePoolRecord(buf []byte) (*TransferProtocolIfSharesToRevenuePoolRecord, error) {
	obj := new(TransferProtocolIfSharesToRevenuePoolRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SwapRecord struct {
	Ts             int64              `json:"ts"`
	User           solanago.PublicKey `json:"user"`
	AmountOut      uint64             `json:"amountOut"`
	AmountIn       uint64             `json:"amountIn"`
	OutMarketIndex uint16             `json:"outMarketIndex"`
	InMarketIndex  uint16             `json:"inMarketIndex"`
	OutOraclePrice int64              `json:"outOraclePrice"`
	InOraclePrice  int64              `json:"inOraclePrice"`
	Fee            uint64             `json:"fee"`
}

func (obj SwapRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `AmountOut`:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `OutMarketIndex`:
	err = encoder.Encode(obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Serialize `InMarketIndex`:
	err = encoder.Encode(obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Serialize `OutOraclePrice`:
	err = encoder.Encode(obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Serialize `InOraclePrice`:
	err = encoder.Encode(obj.InOraclePrice)
	if err != nil {
		return errors.NewField("InOraclePrice", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	return nil
}

func (obj SwapRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SwapRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SwapRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `OutMarketIndex`:
	err = decoder.Decode(&obj.OutMarketIndex)
	if err != nil {
		return errors.NewField("OutMarketIndex", err)
	}
	// Deserialize `InMarketIndex`:
	err = decoder.Decode(&obj.InMarketIndex)
	if err != nil {
		return errors.NewField("InMarketIndex", err)
	}
	// Deserialize `OutOraclePrice`:
	err = decoder.Decode(&obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Deserialize `InOraclePrice`:
	err = decoder.Decode(&obj.InOraclePrice)
	if err != nil {
		return errors.NewField("InOraclePrice", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	return nil
}

func (obj *SwapRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SwapRecord: %w", err)
	}
	return nil
}

func UnmarshalSwapRecord(buf []byte) (*SwapRecord, error) {
	obj := new(SwapRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SpotMarketVaultDepositRecord struct {
	Ts                              int64          `json:"ts"`
	MarketIndex                     uint16         `json:"marketIndex"`
	DepositBalance                  binary.Uint128 `json:"depositBalance"`
	CumulativeDepositInterestBefore binary.Uint128 `json:"cumulativeDepositInterestBefore"`
	CumulativeDepositInterestAfter  binary.Uint128 `json:"cumulativeDepositInterestAfter"`
	DepositTokenAmountBefore        uint64         `json:"depositTokenAmountBefore"`
	Amount                          uint64         `json:"amount"`
}

func (obj SpotMarketVaultDepositRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `MarketIndex`:
	err = encoder.Encode(obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Serialize `DepositBalance`:
	err = encoder.Encode(obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Serialize `CumulativeDepositInterestBefore`:
	err = encoder.Encode(obj.CumulativeDepositInterestBefore)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestBefore", err)
	}
	// Serialize `CumulativeDepositInterestAfter`:
	err = encoder.Encode(obj.CumulativeDepositInterestAfter)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestAfter", err)
	}
	// Serialize `DepositTokenAmountBefore`:
	err = encoder.Encode(obj.DepositTokenAmountBefore)
	if err != nil {
		return errors.NewField("DepositTokenAmountBefore", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj SpotMarketVaultDepositRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SpotMarketVaultDepositRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SpotMarketVaultDepositRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `MarketIndex`:
	err = decoder.Decode(&obj.MarketIndex)
	if err != nil {
		return errors.NewField("MarketIndex", err)
	}
	// Deserialize `DepositBalance`:
	err = decoder.Decode(&obj.DepositBalance)
	if err != nil {
		return errors.NewField("DepositBalance", err)
	}
	// Deserialize `CumulativeDepositInterestBefore`:
	err = decoder.Decode(&obj.CumulativeDepositInterestBefore)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestBefore", err)
	}
	// Deserialize `CumulativeDepositInterestAfter`:
	err = decoder.Decode(&obj.CumulativeDepositInterestAfter)
	if err != nil {
		return errors.NewField("CumulativeDepositInterestAfter", err)
	}
	// Deserialize `DepositTokenAmountBefore`:
	err = decoder.Decode(&obj.DepositTokenAmountBefore)
	if err != nil {
		return errors.NewField("DepositTokenAmountBefore", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *SpotMarketVaultDepositRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SpotMarketVaultDepositRecord: %w", err)
	}
	return nil
}

func UnmarshalSpotMarketVaultDepositRecord(buf []byte) (*SpotMarketVaultDepositRecord, error) {
	obj := new(SpotMarketVaultDepositRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DeleteUserRecord struct {
	Ts            int64               `json:"ts"`
	UserAuthority solanago.PublicKey  `json:"userAuthority"`
	User          solanago.PublicKey  `json:"user"`
	SubAccountId  uint16              `json:"subAccountId"`
	Keeper        *solanago.PublicKey `bin:"optional" json:"keeper,omitempty"`
}

func (obj DeleteUserRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `UserAuthority`:
	err = encoder.Encode(obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `SubAccountId`:
	err = encoder.Encode(obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Serialize `Keeper` (optional):
	{
		if obj.Keeper == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Keeper", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Keeper", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Keeper)
			if err != nil {
				return errors.NewField("Keeper", err)
			}
		}
	}
	return nil
}

func (obj DeleteUserRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DeleteUserRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DeleteUserRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `UserAuthority`:
	err = decoder.Decode(&obj.UserAuthority)
	if err != nil {
		return errors.NewField("UserAuthority", err)
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `SubAccountId`:
	err = decoder.Decode(&obj.SubAccountId)
	if err != nil {
		return errors.NewField("SubAccountId", err)
	}
	// Deserialize `Keeper` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Keeper", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Keeper)
			if err != nil {
				return errors.NewField("Keeper", err)
			}
		}
	}
	return nil
}

func (obj *DeleteUserRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DeleteUserRecord: %w", err)
	}
	return nil
}

func UnmarshalDeleteUserRecord(buf []byte) (*DeleteUserRecord, error) {
	obj := new(DeleteUserRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FuelSweepRecord struct {
	Ts                        int64              `json:"ts"`
	Authority                 solanago.PublicKey `json:"authority"`
	UserStatsFuelInsurance    uint32             `json:"userStatsFuelInsurance"`
	UserStatsFuelDeposits     uint32             `json:"userStatsFuelDeposits"`
	UserStatsFuelBorrows      uint32             `json:"userStatsFuelBorrows"`
	UserStatsFuelPositions    uint32             `json:"userStatsFuelPositions"`
	UserStatsFuelTaker        uint32             `json:"userStatsFuelTaker"`
	UserStatsFuelMaker        uint32             `json:"userStatsFuelMaker"`
	FuelOverflowFuelInsurance binary.Uint128     `json:"fuelOverflowFuelInsurance"`
	FuelOverflowFuelDeposits  binary.Uint128     `json:"fuelOverflowFuelDeposits"`
	FuelOverflowFuelBorrows   binary.Uint128     `json:"fuelOverflowFuelBorrows"`
	FuelOverflowFuelPositions binary.Uint128     `json:"fuelOverflowFuelPositions"`
	FuelOverflowFuelTaker     binary.Uint128     `json:"fuelOverflowFuelTaker"`
	FuelOverflowFuelMaker     binary.Uint128     `json:"fuelOverflowFuelMaker"`
}

func (obj FuelSweepRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `UserStatsFuelInsurance`:
	err = encoder.Encode(obj.UserStatsFuelInsurance)
	if err != nil {
		return errors.NewField("UserStatsFuelInsurance", err)
	}
	// Serialize `UserStatsFuelDeposits`:
	err = encoder.Encode(obj.UserStatsFuelDeposits)
	if err != nil {
		return errors.NewField("UserStatsFuelDeposits", err)
	}
	// Serialize `UserStatsFuelBorrows`:
	err = encoder.Encode(obj.UserStatsFuelBorrows)
	if err != nil {
		return errors.NewField("UserStatsFuelBorrows", err)
	}
	// Serialize `UserStatsFuelPositions`:
	err = encoder.Encode(obj.UserStatsFuelPositions)
	if err != nil {
		return errors.NewField("UserStatsFuelPositions", err)
	}
	// Serialize `UserStatsFuelTaker`:
	err = encoder.Encode(obj.UserStatsFuelTaker)
	if err != nil {
		return errors.NewField("UserStatsFuelTaker", err)
	}
	// Serialize `UserStatsFuelMaker`:
	err = encoder.Encode(obj.UserStatsFuelMaker)
	if err != nil {
		return errors.NewField("UserStatsFuelMaker", err)
	}
	// Serialize `FuelOverflowFuelInsurance`:
	err = encoder.Encode(obj.FuelOverflowFuelInsurance)
	if err != nil {
		return errors.NewField("FuelOverflowFuelInsurance", err)
	}
	// Serialize `FuelOverflowFuelDeposits`:
	err = encoder.Encode(obj.FuelOverflowFuelDeposits)
	if err != nil {
		return errors.NewField("FuelOverflowFuelDeposits", err)
	}
	// Serialize `FuelOverflowFuelBorrows`:
	err = encoder.Encode(obj.FuelOverflowFuelBorrows)
	if err != nil {
		return errors.NewField("FuelOverflowFuelBorrows", err)
	}
	// Serialize `FuelOverflowFuelPositions`:
	err = encoder.Encode(obj.FuelOverflowFuelPositions)
	if err != nil {
		return errors.NewField("FuelOverflowFuelPositions", err)
	}
	// Serialize `FuelOverflowFuelTaker`:
	err = encoder.Encode(obj.FuelOverflowFuelTaker)
	if err != nil {
		return errors.NewField("FuelOverflowFuelTaker", err)
	}
	// Serialize `FuelOverflowFuelMaker`:
	err = encoder.Encode(obj.FuelOverflowFuelMaker)
	if err != nil {
		return errors.NewField("FuelOverflowFuelMaker", err)
	}
	return nil
}

func (obj FuelSweepRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FuelSweepRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FuelSweepRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `UserStatsFuelInsurance`:
	err = decoder.Decode(&obj.UserStatsFuelInsurance)
	if err != nil {
		return errors.NewField("UserStatsFuelInsurance", err)
	}
	// Deserialize `UserStatsFuelDeposits`:
	err = decoder.Decode(&obj.UserStatsFuelDeposits)
	if err != nil {
		return errors.NewField("UserStatsFuelDeposits", err)
	}
	// Deserialize `UserStatsFuelBorrows`:
	err = decoder.Decode(&obj.UserStatsFuelBorrows)
	if err != nil {
		return errors.NewField("UserStatsFuelBorrows", err)
	}
	// Deserialize `UserStatsFuelPositions`:
	err = decoder.Decode(&obj.UserStatsFuelPositions)
	if err != nil {
		return errors.NewField("UserStatsFuelPositions", err)
	}
	// Deserialize `UserStatsFuelTaker`:
	err = decoder.Decode(&obj.UserStatsFuelTaker)
	if err != nil {
		return errors.NewField("UserStatsFuelTaker", err)
	}
	// Deserialize `UserStatsFuelMaker`:
	err = decoder.Decode(&obj.UserStatsFuelMaker)
	if err != nil {
		return errors.NewField("UserStatsFuelMaker", err)
	}
	// Deserialize `FuelOverflowFuelInsurance`:
	err = decoder.Decode(&obj.FuelOverflowFuelInsurance)
	if err != nil {
		return errors.NewField("FuelOverflowFuelInsurance", err)
	}
	// Deserialize `FuelOverflowFuelDeposits`:
	err = decoder.Decode(&obj.FuelOverflowFuelDeposits)
	if err != nil {
		return errors.NewField("FuelOverflowFuelDeposits", err)
	}
	// Deserialize `FuelOverflowFuelBorrows`:
	err = decoder.Decode(&obj.FuelOverflowFuelBorrows)
	if err != nil {
		return errors.NewField("FuelOverflowFuelBorrows", err)
	}
	// Deserialize `FuelOverflowFuelPositions`:
	err = decoder.Decode(&obj.FuelOverflowFuelPositions)
	if err != nil {
		return errors.NewField("FuelOverflowFuelPositions", err)
	}
	// Deserialize `FuelOverflowFuelTaker`:
	err = decoder.Decode(&obj.FuelOverflowFuelTaker)
	if err != nil {
		return errors.NewField("FuelOverflowFuelTaker", err)
	}
	// Deserialize `FuelOverflowFuelMaker`:
	err = decoder.Decode(&obj.FuelOverflowFuelMaker)
	if err != nil {
		return errors.NewField("FuelOverflowFuelMaker", err)
	}
	return nil
}

func (obj *FuelSweepRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FuelSweepRecord: %w", err)
	}
	return nil
}

func UnmarshalFuelSweepRecord(buf []byte) (*FuelSweepRecord, error) {
	obj := new(FuelSweepRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FuelSeasonRecord struct {
	Ts            int64              `json:"ts"`
	Authority     solanago.PublicKey `json:"authority"`
	FuelInsurance binary.Uint128     `json:"fuelInsurance"`
	FuelDeposits  binary.Uint128     `json:"fuelDeposits"`
	FuelBorrows   binary.Uint128     `json:"fuelBorrows"`
	FuelPositions binary.Uint128     `json:"fuelPositions"`
	FuelTaker     binary.Uint128     `json:"fuelTaker"`
	FuelMaker     binary.Uint128     `json:"fuelMaker"`
	FuelTotal     binary.Uint128     `json:"fuelTotal"`
}

func (obj FuelSeasonRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `FuelInsurance`:
	err = encoder.Encode(obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Serialize `FuelDeposits`:
	err = encoder.Encode(obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Serialize `FuelBorrows`:
	err = encoder.Encode(obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Serialize `FuelPositions`:
	err = encoder.Encode(obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Serialize `FuelTaker`:
	err = encoder.Encode(obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Serialize `FuelMaker`:
	err = encoder.Encode(obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Serialize `FuelTotal`:
	err = encoder.Encode(obj.FuelTotal)
	if err != nil {
		return errors.NewField("FuelTotal", err)
	}
	return nil
}

func (obj FuelSeasonRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FuelSeasonRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FuelSeasonRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `FuelInsurance`:
	err = decoder.Decode(&obj.FuelInsurance)
	if err != nil {
		return errors.NewField("FuelInsurance", err)
	}
	// Deserialize `FuelDeposits`:
	err = decoder.Decode(&obj.FuelDeposits)
	if err != nil {
		return errors.NewField("FuelDeposits", err)
	}
	// Deserialize `FuelBorrows`:
	err = decoder.Decode(&obj.FuelBorrows)
	if err != nil {
		return errors.NewField("FuelBorrows", err)
	}
	// Deserialize `FuelPositions`:
	err = decoder.Decode(&obj.FuelPositions)
	if err != nil {
		return errors.NewField("FuelPositions", err)
	}
	// Deserialize `FuelTaker`:
	err = decoder.Decode(&obj.FuelTaker)
	if err != nil {
		return errors.NewField("FuelTaker", err)
	}
	// Deserialize `FuelMaker`:
	err = decoder.Decode(&obj.FuelMaker)
	if err != nil {
		return errors.NewField("FuelMaker", err)
	}
	// Deserialize `FuelTotal`:
	err = decoder.Decode(&obj.FuelTotal)
	if err != nil {
		return errors.NewField("FuelTotal", err)
	}
	return nil
}

func (obj *FuelSeasonRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FuelSeasonRecord: %w", err)
	}
	return nil
}

func UnmarshalFuelSeasonRecord(buf []byte) (*FuelSeasonRecord, error) {
	obj := new(FuelSeasonRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LpSettleRecord struct {
	RecordId          uint64         `json:"recordId"`
	LastTs            int64          `json:"lastTs"`
	LastSlot          uint64         `json:"lastSlot"`
	Ts                int64          `json:"ts"`
	Slot              uint64         `json:"slot"`
	PerpMarketIndex   uint16         `json:"perpMarketIndex"`
	SettleToLpAmount  int64          `json:"settleToLpAmount"`
	PerpAmmPnlDelta   int64          `json:"perpAmmPnlDelta"`
	PerpAmmExFeeDelta int64          `json:"perpAmmExFeeDelta"`
	LpAum             binary.Uint128 `json:"lpAum"`
	LpPrice           binary.Uint128 `json:"lpPrice"`
}

func (obj LpSettleRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RecordId`:
	err = encoder.Encode(obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Serialize `LastTs`:
	err = encoder.Encode(obj.LastTs)
	if err != nil {
		return errors.NewField("LastTs", err)
	}
	// Serialize `LastSlot`:
	err = encoder.Encode(obj.LastSlot)
	if err != nil {
		return errors.NewField("LastSlot", err)
	}
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `PerpMarketIndex`:
	err = encoder.Encode(obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Serialize `SettleToLpAmount`:
	err = encoder.Encode(obj.SettleToLpAmount)
	if err != nil {
		return errors.NewField("SettleToLpAmount", err)
	}
	// Serialize `PerpAmmPnlDelta`:
	err = encoder.Encode(obj.PerpAmmPnlDelta)
	if err != nil {
		return errors.NewField("PerpAmmPnlDelta", err)
	}
	// Serialize `PerpAmmExFeeDelta`:
	err = encoder.Encode(obj.PerpAmmExFeeDelta)
	if err != nil {
		return errors.NewField("PerpAmmExFeeDelta", err)
	}
	// Serialize `LpAum`:
	err = encoder.Encode(obj.LpAum)
	if err != nil {
		return errors.NewField("LpAum", err)
	}
	// Serialize `LpPrice`:
	err = encoder.Encode(obj.LpPrice)
	if err != nil {
		return errors.NewField("LpPrice", err)
	}
	return nil
}

func (obj LpSettleRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LpSettleRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LpSettleRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RecordId`:
	err = decoder.Decode(&obj.RecordId)
	if err != nil {
		return errors.NewField("RecordId", err)
	}
	// Deserialize `LastTs`:
	err = decoder.Decode(&obj.LastTs)
	if err != nil {
		return errors.NewField("LastTs", err)
	}
	// Deserialize `LastSlot`:
	err = decoder.Decode(&obj.LastSlot)
	if err != nil {
		return errors.NewField("LastSlot", err)
	}
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `PerpMarketIndex`:
	err = decoder.Decode(&obj.PerpMarketIndex)
	if err != nil {
		return errors.NewField("PerpMarketIndex", err)
	}
	// Deserialize `SettleToLpAmount`:
	err = decoder.Decode(&obj.SettleToLpAmount)
	if err != nil {
		return errors.NewField("SettleToLpAmount", err)
	}
	// Deserialize `PerpAmmPnlDelta`:
	err = decoder.Decode(&obj.PerpAmmPnlDelta)
	if err != nil {
		return errors.NewField("PerpAmmPnlDelta", err)
	}
	// Deserialize `PerpAmmExFeeDelta`:
	err = decoder.Decode(&obj.PerpAmmExFeeDelta)
	if err != nil {
		return errors.NewField("PerpAmmExFeeDelta", err)
	}
	// Deserialize `LpAum`:
	err = decoder.Decode(&obj.LpAum)
	if err != nil {
		return errors.NewField("LpAum", err)
	}
	// Deserialize `LpPrice`:
	err = decoder.Decode(&obj.LpPrice)
	if err != nil {
		return errors.NewField("LpPrice", err)
	}
	return nil
}

func (obj *LpSettleRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LpSettleRecord: %w", err)
	}
	return nil
}

func UnmarshalLpSettleRecord(buf []byte) (*LpSettleRecord, error) {
	obj := new(LpSettleRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LpSwapRecord struct {
	Ts                     int64              `json:"ts"`
	Slot                   uint64             `json:"slot"`
	Authority              solanago.PublicKey `json:"authority"`
	OutAmount              binary.Uint128     `json:"outAmount"`
	InAmount               binary.Uint128     `json:"inAmount"`
	OutFee                 binary.Int128      `json:"outFee"`
	InFee                  binary.Int128      `json:"inFee"`
	OutSpotMarketIndex     uint16             `json:"outSpotMarketIndex"`
	InSpotMarketIndex      uint16             `json:"inSpotMarketIndex"`
	OutConstituentIndex    uint16             `json:"outConstituentIndex"`
	InConstituentIndex     uint16             `json:"inConstituentIndex"`
	OutOraclePrice         int64              `json:"outOraclePrice"`
	InOraclePrice          int64              `json:"inOraclePrice"`
	LastAum                binary.Uint128     `json:"lastAum"`
	LastAumSlot            uint64             `json:"lastAumSlot"`
	InMarketCurrentWeight  int64              `json:"inMarketCurrentWeight"`
	OutMarketCurrentWeight int64              `json:"outMarketCurrentWeight"`
	InMarketTargetWeight   int64              `json:"inMarketTargetWeight"`
	OutMarketTargetWeight  int64              `json:"outMarketTargetWeight"`
	InSwapId               uint64             `json:"inSwapId"`
	OutSwapId              uint64             `json:"outSwapId"`
}

func (obj LpSwapRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `OutAmount`:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Serialize `InAmount`:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Serialize `OutFee`:
	err = encoder.Encode(obj.OutFee)
	if err != nil {
		return errors.NewField("OutFee", err)
	}
	// Serialize `InFee`:
	err = encoder.Encode(obj.InFee)
	if err != nil {
		return errors.NewField("InFee", err)
	}
	// Serialize `OutSpotMarketIndex`:
	err = encoder.Encode(obj.OutSpotMarketIndex)
	if err != nil {
		return errors.NewField("OutSpotMarketIndex", err)
	}
	// Serialize `InSpotMarketIndex`:
	err = encoder.Encode(obj.InSpotMarketIndex)
	if err != nil {
		return errors.NewField("InSpotMarketIndex", err)
	}
	// Serialize `OutConstituentIndex`:
	err = encoder.Encode(obj.OutConstituentIndex)
	if err != nil {
		return errors.NewField("OutConstituentIndex", err)
	}
	// Serialize `InConstituentIndex`:
	err = encoder.Encode(obj.InConstituentIndex)
	if err != nil {
		return errors.NewField("InConstituentIndex", err)
	}
	// Serialize `OutOraclePrice`:
	err = encoder.Encode(obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Serialize `InOraclePrice`:
	err = encoder.Encode(obj.InOraclePrice)
	if err != nil {
		return errors.NewField("InOraclePrice", err)
	}
	// Serialize `LastAum`:
	err = encoder.Encode(obj.LastAum)
	if err != nil {
		return errors.NewField("LastAum", err)
	}
	// Serialize `LastAumSlot`:
	err = encoder.Encode(obj.LastAumSlot)
	if err != nil {
		return errors.NewField("LastAumSlot", err)
	}
	// Serialize `InMarketCurrentWeight`:
	err = encoder.Encode(obj.InMarketCurrentWeight)
	if err != nil {
		return errors.NewField("InMarketCurrentWeight", err)
	}
	// Serialize `OutMarketCurrentWeight`:
	err = encoder.Encode(obj.OutMarketCurrentWeight)
	if err != nil {
		return errors.NewField("OutMarketCurrentWeight", err)
	}
	// Serialize `InMarketTargetWeight`:
	err = encoder.Encode(obj.InMarketTargetWeight)
	if err != nil {
		return errors.NewField("InMarketTargetWeight", err)
	}
	// Serialize `OutMarketTargetWeight`:
	err = encoder.Encode(obj.OutMarketTargetWeight)
	if err != nil {
		return errors.NewField("OutMarketTargetWeight", err)
	}
	// Serialize `InSwapId`:
	err = encoder.Encode(obj.InSwapId)
	if err != nil {
		return errors.NewField("InSwapId", err)
	}
	// Serialize `OutSwapId`:
	err = encoder.Encode(obj.OutSwapId)
	if err != nil {
		return errors.NewField("OutSwapId", err)
	}
	return nil
}

func (obj LpSwapRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LpSwapRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LpSwapRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return errors.NewField("OutAmount", err)
	}
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return errors.NewField("InAmount", err)
	}
	// Deserialize `OutFee`:
	err = decoder.Decode(&obj.OutFee)
	if err != nil {
		return errors.NewField("OutFee", err)
	}
	// Deserialize `InFee`:
	err = decoder.Decode(&obj.InFee)
	if err != nil {
		return errors.NewField("InFee", err)
	}
	// Deserialize `OutSpotMarketIndex`:
	err = decoder.Decode(&obj.OutSpotMarketIndex)
	if err != nil {
		return errors.NewField("OutSpotMarketIndex", err)
	}
	// Deserialize `InSpotMarketIndex`:
	err = decoder.Decode(&obj.InSpotMarketIndex)
	if err != nil {
		return errors.NewField("InSpotMarketIndex", err)
	}
	// Deserialize `OutConstituentIndex`:
	err = decoder.Decode(&obj.OutConstituentIndex)
	if err != nil {
		return errors.NewField("OutConstituentIndex", err)
	}
	// Deserialize `InConstituentIndex`:
	err = decoder.Decode(&obj.InConstituentIndex)
	if err != nil {
		return errors.NewField("InConstituentIndex", err)
	}
	// Deserialize `OutOraclePrice`:
	err = decoder.Decode(&obj.OutOraclePrice)
	if err != nil {
		return errors.NewField("OutOraclePrice", err)
	}
	// Deserialize `InOraclePrice`:
	err = decoder.Decode(&obj.InOraclePrice)
	if err != nil {
		return errors.NewField("InOraclePrice", err)
	}
	// Deserialize `LastAum`:
	err = decoder.Decode(&obj.LastAum)
	if err != nil {
		return errors.NewField("LastAum", err)
	}
	// Deserialize `LastAumSlot`:
	err = decoder.Decode(&obj.LastAumSlot)
	if err != nil {
		return errors.NewField("LastAumSlot", err)
	}
	// Deserialize `InMarketCurrentWeight`:
	err = decoder.Decode(&obj.InMarketCurrentWeight)
	if err != nil {
		return errors.NewField("InMarketCurrentWeight", err)
	}
	// Deserialize `OutMarketCurrentWeight`:
	err = decoder.Decode(&obj.OutMarketCurrentWeight)
	if err != nil {
		return errors.NewField("OutMarketCurrentWeight", err)
	}
	// Deserialize `InMarketTargetWeight`:
	err = decoder.Decode(&obj.InMarketTargetWeight)
	if err != nil {
		return errors.NewField("InMarketTargetWeight", err)
	}
	// Deserialize `OutMarketTargetWeight`:
	err = decoder.Decode(&obj.OutMarketTargetWeight)
	if err != nil {
		return errors.NewField("OutMarketTargetWeight", err)
	}
	// Deserialize `InSwapId`:
	err = decoder.Decode(&obj.InSwapId)
	if err != nil {
		return errors.NewField("InSwapId", err)
	}
	// Deserialize `OutSwapId`:
	err = decoder.Decode(&obj.OutSwapId)
	if err != nil {
		return errors.NewField("OutSwapId", err)
	}
	return nil
}

func (obj *LpSwapRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LpSwapRecord: %w", err)
	}
	return nil
}

func UnmarshalLpSwapRecord(buf []byte) (*LpSwapRecord, error) {
	obj := new(LpSwapRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LpMintRedeemRecord struct {
	Ts                    int64              `json:"ts"`
	Slot                  uint64             `json:"slot"`
	Authority             solanago.PublicKey `json:"authority"`
	Description           uint8              `json:"description"`
	Amount                binary.Uint128     `json:"amount"`
	Fee                   binary.Int128      `json:"fee"`
	SpotMarketIndex       uint16             `json:"spotMarketIndex"`
	ConstituentIndex      uint16             `json:"constituentIndex"`
	OraclePrice           int64              `json:"oraclePrice"`
	Mint                  solanago.PublicKey `json:"mint"`
	LpAmount              uint64             `json:"lpAmount"`
	LpFee                 int64              `json:"lpFee"`
	LpPrice               binary.Uint128     `json:"lpPrice"`
	MintRedeemId          uint64             `json:"mintRedeemId"`
	LastAum               binary.Uint128     `json:"lastAum"`
	LastAumSlot           uint64             `json:"lastAumSlot"`
	InMarketCurrentWeight int64              `json:"inMarketCurrentWeight"`
	InMarketTargetWeight  int64              `json:"inMarketTargetWeight"`
}

func (obj LpMintRedeemRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Ts`:
	err = encoder.Encode(obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Serialize `Slot`:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Description`:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Serialize `SpotMarketIndex`:
	err = encoder.Encode(obj.SpotMarketIndex)
	if err != nil {
		return errors.NewField("SpotMarketIndex", err)
	}
	// Serialize `ConstituentIndex`:
	err = encoder.Encode(obj.ConstituentIndex)
	if err != nil {
		return errors.NewField("ConstituentIndex", err)
	}
	// Serialize `OraclePrice`:
	err = encoder.Encode(obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `LpAmount`:
	err = encoder.Encode(obj.LpAmount)
	if err != nil {
		return errors.NewField("LpAmount", err)
	}
	// Serialize `LpFee`:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return errors.NewField("LpFee", err)
	}
	// Serialize `LpPrice`:
	err = encoder.Encode(obj.LpPrice)
	if err != nil {
		return errors.NewField("LpPrice", err)
	}
	// Serialize `MintRedeemId`:
	err = encoder.Encode(obj.MintRedeemId)
	if err != nil {
		return errors.NewField("MintRedeemId", err)
	}
	// Serialize `LastAum`:
	err = encoder.Encode(obj.LastAum)
	if err != nil {
		return errors.NewField("LastAum", err)
	}
	// Serialize `LastAumSlot`:
	err = encoder.Encode(obj.LastAumSlot)
	if err != nil {
		return errors.NewField("LastAumSlot", err)
	}
	// Serialize `InMarketCurrentWeight`:
	err = encoder.Encode(obj.InMarketCurrentWeight)
	if err != nil {
		return errors.NewField("InMarketCurrentWeight", err)
	}
	// Serialize `InMarketTargetWeight`:
	err = encoder.Encode(obj.InMarketTargetWeight)
	if err != nil {
		return errors.NewField("InMarketTargetWeight", err)
	}
	return nil
}

func (obj LpMintRedeemRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LpMintRedeemRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LpMintRedeemRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Ts`:
	err = decoder.Decode(&obj.Ts)
	if err != nil {
		return errors.NewField("Ts", err)
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return errors.NewField("Slot", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return errors.NewField("Description", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Deserialize `SpotMarketIndex`:
	err = decoder.Decode(&obj.SpotMarketIndex)
	if err != nil {
		return errors.NewField("SpotMarketIndex", err)
	}
	// Deserialize `ConstituentIndex`:
	err = decoder.Decode(&obj.ConstituentIndex)
	if err != nil {
		return errors.NewField("ConstituentIndex", err)
	}
	// Deserialize `OraclePrice`:
	err = decoder.Decode(&obj.OraclePrice)
	if err != nil {
		return errors.NewField("OraclePrice", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `LpAmount`:
	err = decoder.Decode(&obj.LpAmount)
	if err != nil {
		return errors.NewField("LpAmount", err)
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return errors.NewField("LpFee", err)
	}
	// Deserialize `LpPrice`:
	err = decoder.Decode(&obj.LpPrice)
	if err != nil {
		return errors.NewField("LpPrice", err)
	}
	// Deserialize `MintRedeemId`:
	err = decoder.Decode(&obj.MintRedeemId)
	if err != nil {
		return errors.NewField("MintRedeemId", err)
	}
	// Deserialize `LastAum`:
	err = decoder.Decode(&obj.LastAum)
	if err != nil {
		return errors.NewField("LastAum", err)
	}
	// Deserialize `LastAumSlot`:
	err = decoder.Decode(&obj.LastAumSlot)
	if err != nil {
		return errors.NewField("LastAumSlot", err)
	}
	// Deserialize `InMarketCurrentWeight`:
	err = decoder.Decode(&obj.InMarketCurrentWeight)
	if err != nil {
		return errors.NewField("InMarketCurrentWeight", err)
	}
	// Deserialize `InMarketTargetWeight`:
	err = decoder.Decode(&obj.InMarketTargetWeight)
	if err != nil {
		return errors.NewField("InMarketTargetWeight", err)
	}
	return nil
}

func (obj *LpMintRedeemRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LpMintRedeemRecord: %w", err)
	}
	return nil
}

func UnmarshalLpMintRedeemRecord(buf []byte) (*LpMintRedeemRecord, error) {
	obj := new(LpMintRedeemRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
