// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package drift

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_NewUserRecord:
		value := new(NewUserRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as NewUserRecord: %w", err)
		}
		return value, nil
	case Event_DepositRecord:
		value := new(DepositRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DepositRecord: %w", err)
		}
		return value, nil
	case Event_SpotInterestRecord:
		value := new(SpotInterestRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SpotInterestRecord: %w", err)
		}
		return value, nil
	case Event_FundingPaymentRecord:
		value := new(FundingPaymentRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FundingPaymentRecord: %w", err)
		}
		return value, nil
	case Event_FundingRateRecord:
		value := new(FundingRateRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FundingRateRecord: %w", err)
		}
		return value, nil
	case Event_CurveRecord:
		value := new(CurveRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CurveRecord: %w", err)
		}
		return value, nil
	case Event_SignedMsgOrderRecord:
		value := new(SignedMsgOrderRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SignedMsgOrderRecord: %w", err)
		}
		return value, nil
	case Event_OrderRecord:
		value := new(OrderRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as OrderRecord: %w", err)
		}
		return value, nil
	case Event_OrderActionRecord:
		value := new(OrderActionRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as OrderActionRecord: %w", err)
		}
		return value, nil
	case Event_LpRecord:
		value := new(LpRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LpRecord: %w", err)
		}
		return value, nil
	case Event_LiquidationRecord:
		value := new(LiquidationRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LiquidationRecord: %w", err)
		}
		return value, nil
	case Event_SettlePnlRecord:
		value := new(SettlePnlRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SettlePnlRecord: %w", err)
		}
		return value, nil
	case Event_InsuranceFundRecord:
		value := new(InsuranceFundRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InsuranceFundRecord: %w", err)
		}
		return value, nil
	case Event_InsuranceFundStakeRecord:
		value := new(InsuranceFundStakeRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InsuranceFundStakeRecord: %w", err)
		}
		return value, nil
	case Event_InsuranceFundSwapRecord:
		value := new(InsuranceFundSwapRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InsuranceFundSwapRecord: %w", err)
		}
		return value, nil
	case Event_TransferProtocolIfSharesToRevenuePoolRecord:
		value := new(TransferProtocolIfSharesToRevenuePoolRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as TransferProtocolIfSharesToRevenuePoolRecord: %w", err)
		}
		return value, nil
	case Event_SwapRecord:
		value := new(SwapRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SwapRecord: %w", err)
		}
		return value, nil
	case Event_SpotMarketVaultDepositRecord:
		value := new(SpotMarketVaultDepositRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SpotMarketVaultDepositRecord: %w", err)
		}
		return value, nil
	case Event_DeleteUserRecord:
		value := new(DeleteUserRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DeleteUserRecord: %w", err)
		}
		return value, nil
	case Event_FuelSweepRecord:
		value := new(FuelSweepRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FuelSweepRecord: %w", err)
		}
		return value, nil
	case Event_FuelSeasonRecord:
		value := new(FuelSeasonRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as FuelSeasonRecord: %w", err)
		}
		return value, nil
	case Event_LpSettleRecord:
		value := new(LpSettleRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LpSettleRecord: %w", err)
		}
		return value, nil
	case Event_LpSwapRecord:
		value := new(LpSwapRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LpSwapRecord: %w", err)
		}
		return value, nil
	case Event_LpMintRedeemRecord:
		value := new(LpMintRedeemRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LpMintRedeemRecord: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_NewUserRecord(eventData []byte) (*NewUserRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_NewUserRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_NewUserRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(NewUserRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type NewUserRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_DepositRecord(eventData []byte) (*DepositRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DepositRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DepositRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(DepositRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DepositRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_SpotInterestRecord(eventData []byte) (*SpotInterestRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SpotInterestRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SpotInterestRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(SpotInterestRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SpotInterestRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_FundingPaymentRecord(eventData []byte) (*FundingPaymentRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FundingPaymentRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FundingPaymentRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(FundingPaymentRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FundingPaymentRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_FundingRateRecord(eventData []byte) (*FundingRateRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FundingRateRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FundingRateRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(FundingRateRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FundingRateRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_CurveRecord(eventData []byte) (*CurveRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CurveRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CurveRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(CurveRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CurveRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_SignedMsgOrderRecord(eventData []byte) (*SignedMsgOrderRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SignedMsgOrderRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SignedMsgOrderRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(SignedMsgOrderRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SignedMsgOrderRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_OrderRecord(eventData []byte) (*OrderRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_OrderRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_OrderRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(OrderRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type OrderRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_OrderActionRecord(eventData []byte) (*OrderActionRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_OrderActionRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_OrderActionRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(OrderActionRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type OrderActionRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_LpRecord(eventData []byte) (*LpRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LpRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LpRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(LpRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LpRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_LiquidationRecord(eventData []byte) (*LiquidationRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LiquidationRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LiquidationRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(LiquidationRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LiquidationRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_SettlePnlRecord(eventData []byte) (*SettlePnlRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SettlePnlRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SettlePnlRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(SettlePnlRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SettlePnlRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_InsuranceFundRecord(eventData []byte) (*InsuranceFundRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InsuranceFundRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InsuranceFundRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(InsuranceFundRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InsuranceFundRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_InsuranceFundStakeRecord(eventData []byte) (*InsuranceFundStakeRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InsuranceFundStakeRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InsuranceFundStakeRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(InsuranceFundStakeRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InsuranceFundStakeRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_InsuranceFundSwapRecord(eventData []byte) (*InsuranceFundSwapRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InsuranceFundSwapRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InsuranceFundSwapRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(InsuranceFundSwapRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InsuranceFundSwapRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_TransferProtocolIfSharesToRevenuePoolRecord(eventData []byte) (*TransferProtocolIfSharesToRevenuePoolRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_TransferProtocolIfSharesToRevenuePoolRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_TransferProtocolIfSharesToRevenuePoolRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(TransferProtocolIfSharesToRevenuePoolRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type TransferProtocolIfSharesToRevenuePoolRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_SwapRecord(eventData []byte) (*SwapRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SwapRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SwapRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(SwapRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SwapRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_SpotMarketVaultDepositRecord(eventData []byte) (*SpotMarketVaultDepositRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SpotMarketVaultDepositRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SpotMarketVaultDepositRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(SpotMarketVaultDepositRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SpotMarketVaultDepositRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_DeleteUserRecord(eventData []byte) (*DeleteUserRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DeleteUserRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DeleteUserRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(DeleteUserRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DeleteUserRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_FuelSweepRecord(eventData []byte) (*FuelSweepRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FuelSweepRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FuelSweepRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(FuelSweepRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FuelSweepRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_FuelSeasonRecord(eventData []byte) (*FuelSeasonRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_FuelSeasonRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_FuelSeasonRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(FuelSeasonRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type FuelSeasonRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_LpSettleRecord(eventData []byte) (*LpSettleRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LpSettleRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LpSettleRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(LpSettleRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LpSettleRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_LpSwapRecord(eventData []byte) (*LpSwapRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LpSwapRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LpSwapRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(LpSwapRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LpSwapRecord: %w", err)
	}
	return event, nil
}

func ParseEvent_LpMintRedeemRecord(eventData []byte) (*LpMintRedeemRecord, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LpMintRedeemRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LpMintRedeemRecord, binary.FormatDiscriminator(discriminator))
	}
	event := new(LpMintRedeemRecord)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LpMintRedeemRecord: %w", err)
	}
	return event, nil
}
