// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package drift

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_OpenbookV2FulfillmentConfig:
		value := new(OpenbookV2FulfillmentConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as OpenbookV2FulfillmentConfig: %w", err)
		}
		return value, nil
	case Account_PhoenixV1FulfillmentConfig:
		value := new(PhoenixV1FulfillmentConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PhoenixV1FulfillmentConfig: %w", err)
		}
		return value, nil
	case Account_SerumV3FulfillmentConfig:
		value := new(SerumV3FulfillmentConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as SerumV3FulfillmentConfig: %w", err)
		}
		return value, nil
	case Account_HighLeverageModeConfig:
		value := new(HighLeverageModeConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as HighLeverageModeConfig: %w", err)
		}
		return value, nil
	case Account_IfRebalanceConfig:
		value := new(IfRebalanceConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as IfRebalanceConfig: %w", err)
		}
		return value, nil
	case Account_InsuranceFundStake:
		value := new(InsuranceFundStake)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as InsuranceFundStake: %w", err)
		}
		return value, nil
	case Account_ProtocolIfSharesTransferConfig:
		value := new(ProtocolIfSharesTransferConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ProtocolIfSharesTransferConfig: %w", err)
		}
		return value, nil
	case Account_PrelaunchOracle:
		value := new(PrelaunchOracle)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PrelaunchOracle: %w", err)
		}
		return value, nil
	case Account_PerpMarket:
		value := new(PerpMarket)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PerpMarket: %w", err)
		}
		return value, nil
	case Account_ProtectedMakerModeConfig:
		value := new(ProtectedMakerModeConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ProtectedMakerModeConfig: %w", err)
		}
		return value, nil
	case Account_PythLazerOracle:
		value := new(PythLazerOracle)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PythLazerOracle: %w", err)
		}
		return value, nil
	case Account_SignedMsgUserOrders:
		value := new(SignedMsgUserOrders)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as SignedMsgUserOrders: %w", err)
		}
		return value, nil
	case Account_SignedMsgWsDelegates:
		value := new(SignedMsgWsDelegates)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as SignedMsgWsDelegates: %w", err)
		}
		return value, nil
	case Account_SpotMarket:
		value := new(SpotMarket)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as SpotMarket: %w", err)
		}
		return value, nil
	case Account_State:
		value := new(State)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as State: %w", err)
		}
		return value, nil
	case Account_User:
		value := new(User)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as User: %w", err)
		}
		return value, nil
	case Account_UserStats:
		value := new(UserStats)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as UserStats: %w", err)
		}
		return value, nil
	case Account_ReferrerName:
		value := new(ReferrerName)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ReferrerName: %w", err)
		}
		return value, nil
	case Account_FuelOverflow:
		value := new(FuelOverflow)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as FuelOverflow: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_OpenbookV2FulfillmentConfig(accountData []byte) (*OpenbookV2FulfillmentConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_OpenbookV2FulfillmentConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_OpenbookV2FulfillmentConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(OpenbookV2FulfillmentConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type OpenbookV2FulfillmentConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_PhoenixV1FulfillmentConfig(accountData []byte) (*PhoenixV1FulfillmentConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PhoenixV1FulfillmentConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PhoenixV1FulfillmentConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PhoenixV1FulfillmentConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PhoenixV1FulfillmentConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_SerumV3FulfillmentConfig(accountData []byte) (*SerumV3FulfillmentConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_SerumV3FulfillmentConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_SerumV3FulfillmentConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(SerumV3FulfillmentConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type SerumV3FulfillmentConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_HighLeverageModeConfig(accountData []byte) (*HighLeverageModeConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_HighLeverageModeConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_HighLeverageModeConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(HighLeverageModeConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type HighLeverageModeConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_IfRebalanceConfig(accountData []byte) (*IfRebalanceConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_IfRebalanceConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_IfRebalanceConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(IfRebalanceConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type IfRebalanceConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_InsuranceFundStake(accountData []byte) (*InsuranceFundStake, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_InsuranceFundStake {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_InsuranceFundStake, binary.FormatDiscriminator(discriminator))
	}
	acc := new(InsuranceFundStake)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type InsuranceFundStake: %w", err)
	}
	return acc, nil
}

func ParseAccount_ProtocolIfSharesTransferConfig(accountData []byte) (*ProtocolIfSharesTransferConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ProtocolIfSharesTransferConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ProtocolIfSharesTransferConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ProtocolIfSharesTransferConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ProtocolIfSharesTransferConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_PrelaunchOracle(accountData []byte) (*PrelaunchOracle, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PrelaunchOracle {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PrelaunchOracle, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PrelaunchOracle)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PrelaunchOracle: %w", err)
	}
	return acc, nil
}

func ParseAccount_PerpMarket(accountData []byte) (*PerpMarket, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PerpMarket {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PerpMarket, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PerpMarket)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PerpMarket: %w", err)
	}
	return acc, nil
}

func ParseAccount_ProtectedMakerModeConfig(accountData []byte) (*ProtectedMakerModeConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ProtectedMakerModeConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ProtectedMakerModeConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ProtectedMakerModeConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ProtectedMakerModeConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_PythLazerOracle(accountData []byte) (*PythLazerOracle, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PythLazerOracle {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PythLazerOracle, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PythLazerOracle)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PythLazerOracle: %w", err)
	}
	return acc, nil
}

func ParseAccount_SignedMsgUserOrders(accountData []byte) (*SignedMsgUserOrders, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_SignedMsgUserOrders {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_SignedMsgUserOrders, binary.FormatDiscriminator(discriminator))
	}
	acc := new(SignedMsgUserOrders)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type SignedMsgUserOrders: %w", err)
	}
	return acc, nil
}

func ParseAccount_SignedMsgWsDelegates(accountData []byte) (*SignedMsgWsDelegates, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_SignedMsgWsDelegates {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_SignedMsgWsDelegates, binary.FormatDiscriminator(discriminator))
	}
	acc := new(SignedMsgWsDelegates)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type SignedMsgWsDelegates: %w", err)
	}
	return acc, nil
}

func ParseAccount_SpotMarket(accountData []byte) (*SpotMarket, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_SpotMarket {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_SpotMarket, binary.FormatDiscriminator(discriminator))
	}
	acc := new(SpotMarket)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type SpotMarket: %w", err)
	}
	return acc, nil
}

func ParseAccount_State(accountData []byte) (*State, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_State {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_State, binary.FormatDiscriminator(discriminator))
	}
	acc := new(State)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type State: %w", err)
	}
	return acc, nil
}

func ParseAccount_User(accountData []byte) (*User, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_User {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_User, binary.FormatDiscriminator(discriminator))
	}
	acc := new(User)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type User: %w", err)
	}
	return acc, nil
}

func ParseAccount_UserStats(accountData []byte) (*UserStats, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_UserStats {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_UserStats, binary.FormatDiscriminator(discriminator))
	}
	acc := new(UserStats)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type UserStats: %w", err)
	}
	return acc, nil
}

func ParseAccount_ReferrerName(accountData []byte) (*ReferrerName, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ReferrerName {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ReferrerName, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ReferrerName)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ReferrerName: %w", err)
	}
	return acc, nil
}

func ParseAccount_FuelOverflow(accountData []byte) (*FuelOverflow, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_FuelOverflow {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_FuelOverflow, binary.FormatDiscriminator(discriminator))
	}
	acc := new(FuelOverflow)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type FuelOverflow: %w", err)
	}
	return acc, nil
}
