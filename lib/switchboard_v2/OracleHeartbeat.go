// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OracleHeartbeat is the `oracleHeartbeat` instruction.
type OracleHeartbeat struct {
	Params *OracleHeartbeatParams

	// [0] = [WRITE] oracle
	//
	// [1] = [SIGNER] oracleAuthority
	//
	// [2] = [] tokenAccount
	//
	// [3] = [WRITE] gcOracle
	//
	// [4] = [WRITE] oracleQueue
	//
	// [5] = [] permission
	//
	// [6] = [WRITE] dataBuffer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOracleHeartbeatInstructionBuilder creates a new `OracleHeartbeat` instruction builder.
func NewOracleHeartbeatInstructionBuilder() *OracleHeartbeat {
	nd := &OracleHeartbeat{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *OracleHeartbeat) SetParams(params OracleHeartbeatParams) *OracleHeartbeat {
	inst.Params = &params
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *OracleHeartbeat) SetOracleAccount(oracle ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *OracleHeartbeat) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAuthorityAccount sets the "oracleAuthority" account.
func (inst *OracleHeartbeat) SetOracleAuthorityAccount(oracleAuthority ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracleAuthority).SIGNER()
	return inst
}

// GetOracleAuthorityAccount gets the "oracleAuthority" account.
func (inst *OracleHeartbeat) GetOracleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *OracleHeartbeat) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAccount)
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *OracleHeartbeat) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGcOracleAccount sets the "gcOracle" account.
func (inst *OracleHeartbeat) SetGcOracleAccount(gcOracle ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(gcOracle).WRITE()
	return inst
}

// GetGcOracleAccount gets the "gcOracle" account.
func (inst *OracleHeartbeat) GetGcOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *OracleHeartbeat) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(oracleQueue).WRITE()
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *OracleHeartbeat) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPermissionAccount sets the "permission" account.
func (inst *OracleHeartbeat) SetPermissionAccount(permission ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(permission)
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *OracleHeartbeat) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDataBufferAccount sets the "dataBuffer" account.
func (inst *OracleHeartbeat) SetDataBufferAccount(dataBuffer ag_solanago.PublicKey) *OracleHeartbeat {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(dataBuffer).WRITE()
	return inst
}

// GetDataBufferAccount gets the "dataBuffer" account.
func (inst *OracleHeartbeat) GetDataBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst OracleHeartbeat) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OracleHeartbeat,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OracleHeartbeat) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OracleHeartbeat) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OracleAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GcOracle is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Permission is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DataBuffer is not set")
		}
	}
	return nil
}

func (inst *OracleHeartbeat) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OracleHeartbeat")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("oracleAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       gcOracle", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    oracleQueue", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     permission", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     dataBuffer", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj OracleHeartbeat) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OracleHeartbeat) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewOracleHeartbeatInstruction declares a new OracleHeartbeat instruction with the provided parameters and accounts.
func NewOracleHeartbeatInstruction(
	// Parameters:
	params OracleHeartbeatParams,
	// Accounts:
	oracle ag_solanago.PublicKey,
	oracleAuthority ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	gcOracle ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	permission ag_solanago.PublicKey,
	dataBuffer ag_solanago.PublicKey) *OracleHeartbeat {
	return NewOracleHeartbeatInstructionBuilder().
		SetParams(params).
		SetOracleAccount(oracle).
		SetOracleAuthorityAccount(oracleAuthority).
		SetTokenAccountAccount(tokenAccount).
		SetGcOracleAccount(gcOracle).
		SetOracleQueueAccount(oracleQueue).
		SetPermissionAccount(permission).
		SetDataBufferAccount(dataBuffer)
}
