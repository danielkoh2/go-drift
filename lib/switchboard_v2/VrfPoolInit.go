// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfPoolInit is the `vrfPoolInit` instruction.
type VrfPoolInit struct {
	Params *VrfPoolInitParams

	// [0] = [] authority
	//
	// [1] = [WRITE] vrfPool
	//
	// [2] = [] queue
	//
	// [3] = [] mint
	//
	// [4] = [WRITE] escrow
	//
	// [5] = [] programState
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] associatedTokenProgram
	//
	// [9] = [] systemProgram
	//
	// [10] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfPoolInitInstructionBuilder creates a new `VrfPoolInit` instruction builder.
func NewVrfPoolInitInstructionBuilder() *VrfPoolInit {
	nd := &VrfPoolInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfPoolInit) SetParams(params VrfPoolInitParams) *VrfPoolInit {
	inst.Params = &params
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *VrfPoolInit) SetAuthorityAccount(authority ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *VrfPoolInit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVrfPoolAccount sets the "vrfPool" account.
func (inst *VrfPoolInit) SetVrfPoolAccount(vrfPool ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vrfPool).WRITE()
	return inst
}

// GetVrfPoolAccount gets the "vrfPool" account.
func (inst *VrfPoolInit) GetVrfPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQueueAccount sets the "queue" account.
func (inst *VrfPoolInit) SetQueueAccount(queue ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(queue)
	return inst
}

// GetQueueAccount gets the "queue" account.
func (inst *VrfPoolInit) GetQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *VrfPoolInit) SetMintAccount(mint ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *VrfPoolInit) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *VrfPoolInit) SetEscrowAccount(escrow ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *VrfPoolInit) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *VrfPoolInit) SetProgramStateAccount(programState ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *VrfPoolInit) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *VrfPoolInit) SetPayerAccount(payer ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *VrfPoolInit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *VrfPoolInit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *VrfPoolInit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *VrfPoolInit) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *VrfPoolInit) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *VrfPoolInit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *VrfPoolInit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentAccount sets the "rent" account.
func (inst *VrfPoolInit) SetRentAccount(rent ag_solanago.PublicKey) *VrfPoolInit {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *VrfPoolInit) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst VrfPoolInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfPoolInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfPoolInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfPoolInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VrfPool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Queue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *VrfPoolInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfPoolInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               vrfPool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 queue", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                escrow", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          programState", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj VrfPoolInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfPoolInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfPoolInitInstruction declares a new VrfPoolInit instruction with the provided parameters and accounts.
func NewVrfPoolInitInstruction(
	// Parameters:
	params VrfPoolInitParams,
	// Accounts:
	authority ag_solanago.PublicKey,
	vrfPool ag_solanago.PublicKey,
	queue ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *VrfPoolInit {
	return NewVrfPoolInitInstructionBuilder().
		SetParams(params).
		SetAuthorityAccount(authority).
		SetVrfPoolAccount(vrfPool).
		SetQueueAccount(queue).
		SetMintAccount(mint).
		SetEscrowAccount(escrow).
		SetProgramStateAccount(programState).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
