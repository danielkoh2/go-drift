// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ProgramConfig is the `programConfig` instruction.
type ProgramConfig struct {
	Params *ProgramConfigParams

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] programState
	//
	// [2] = [] daoMint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProgramConfigInstructionBuilder creates a new `ProgramConfig` instruction builder.
func NewProgramConfigInstructionBuilder() *ProgramConfig {
	nd := &ProgramConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *ProgramConfig) SetParams(params ProgramConfigParams) *ProgramConfig {
	inst.Params = &params
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ProgramConfig) SetAuthorityAccount(authority ag_solanago.PublicKey) *ProgramConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ProgramConfig) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *ProgramConfig) SetProgramStateAccount(programState ag_solanago.PublicKey) *ProgramConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(programState).WRITE()
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *ProgramConfig) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDaoMintAccount sets the "daoMint" account.
func (inst *ProgramConfig) SetDaoMintAccount(daoMint ag_solanago.PublicKey) *ProgramConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(daoMint)
	return inst
}

// GetDaoMintAccount gets the "daoMint" account.
func (inst *ProgramConfig) GetDaoMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst ProgramConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProgramConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProgramConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProgramConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DaoMint is not set")
		}
	}
	return nil
}

func (inst *ProgramConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProgramConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("programState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     daoMint", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ProgramConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProgramConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewProgramConfigInstruction declares a new ProgramConfig instruction with the provided parameters and accounts.
func NewProgramConfigInstruction(
	// Parameters:
	params ProgramConfigParams,
	// Accounts:
	authority ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	daoMint ag_solanago.PublicKey) *ProgramConfig {
	return NewProgramConfigInstructionBuilder().
		SetParams(params).
		SetAuthorityAccount(authority).
		SetProgramStateAccount(programState).
		SetDaoMintAccount(daoMint)
}
