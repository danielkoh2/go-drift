// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AggregatorAddJobParams struct {
	Weight *uint8 `bin:"optional"`
}

func (obj AggregatorAddJobParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Weight` param (optional):
	{
		if obj.Weight == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Weight)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AggregatorAddJobParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Weight` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Weight)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type AggregatorCloseParams struct {
	StateBump      uint8
	PermissionBump uint8
	LeaseBump      uint8
}

func (obj AggregatorCloseParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorCloseParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorFunctionUpsertParams struct {
	Name  [32]uint8
	Value BorshDecimal
}

func (obj AggregatorFunctionUpsertParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorFunctionUpsertParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorInitParams struct {
	Name                  [32]uint8
	Metadata              [128]uint8
	BatchSize             uint32
	MinOracleResults      uint32
	MinJobResults         uint32
	MinUpdateDelaySeconds uint32
	StartAfter            int64
	VarianceThreshold     BorshDecimal
	ForceReportPeriod     int64
	Expiration            int64
	StateBump             uint8
	DisableCrank          bool
}

func (obj AggregatorInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `BatchSize` param:
	err = encoder.Encode(obj.BatchSize)
	if err != nil {
		return err
	}
	// Serialize `MinOracleResults` param:
	err = encoder.Encode(obj.MinOracleResults)
	if err != nil {
		return err
	}
	// Serialize `MinJobResults` param:
	err = encoder.Encode(obj.MinJobResults)
	if err != nil {
		return err
	}
	// Serialize `MinUpdateDelaySeconds` param:
	err = encoder.Encode(obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Serialize `StartAfter` param:
	err = encoder.Encode(obj.StartAfter)
	if err != nil {
		return err
	}
	// Serialize `VarianceThreshold` param:
	err = encoder.Encode(obj.VarianceThreshold)
	if err != nil {
		return err
	}
	// Serialize `ForceReportPeriod` param:
	err = encoder.Encode(obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `DisableCrank` param:
	err = encoder.Encode(obj.DisableCrank)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `BatchSize`:
	err = decoder.Decode(&obj.BatchSize)
	if err != nil {
		return err
	}
	// Deserialize `MinOracleResults`:
	err = decoder.Decode(&obj.MinOracleResults)
	if err != nil {
		return err
	}
	// Deserialize `MinJobResults`:
	err = decoder.Decode(&obj.MinJobResults)
	if err != nil {
		return err
	}
	// Deserialize `MinUpdateDelaySeconds`:
	err = decoder.Decode(&obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Deserialize `StartAfter`:
	err = decoder.Decode(&obj.StartAfter)
	if err != nil {
		return err
	}
	// Deserialize `VarianceThreshold`:
	err = decoder.Decode(&obj.VarianceThreshold)
	if err != nil {
		return err
	}
	// Deserialize `ForceReportPeriod`:
	err = decoder.Decode(&obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `DisableCrank`:
	err = decoder.Decode(&obj.DisableCrank)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorLockParams struct{}

func (obj AggregatorLockParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AggregatorLockParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type AggregatorOpenRoundParams struct {
	StateBump      uint8
	LeaseBump      uint8
	PermissionBump uint8
	Jitter         uint8
}

func (obj AggregatorOpenRoundParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `Jitter` param:
	err = encoder.Encode(obj.Jitter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorOpenRoundParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `Jitter`:
	err = decoder.Decode(&obj.Jitter)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorRemoveJobParams struct {
	JobIdx uint32
}

func (obj AggregatorRemoveJobParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `JobIdx` param:
	err = encoder.Encode(obj.JobIdx)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorRemoveJobParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `JobIdx`:
	err = decoder.Decode(&obj.JobIdx)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSaveResultParams struct {
	OracleIdx            uint32
	Error                bool
	Value                BorshDecimal
	JobsChecksum         [32]uint8
	MinResponse          BorshDecimal
	MaxResponse          BorshDecimal
	FeedPermissionBump   uint8
	OraclePermissionBump uint8
	LeaseBump            uint8
	StateBump            uint8
}

func (obj AggregatorSaveResultParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OracleIdx` param:
	err = encoder.Encode(obj.OracleIdx)
	if err != nil {
		return err
	}
	// Serialize `Error` param:
	err = encoder.Encode(obj.Error)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `JobsChecksum` param:
	err = encoder.Encode(obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Serialize `MinResponse` param:
	err = encoder.Encode(obj.MinResponse)
	if err != nil {
		return err
	}
	// Serialize `MaxResponse` param:
	err = encoder.Encode(obj.MaxResponse)
	if err != nil {
		return err
	}
	// Serialize `FeedPermissionBump` param:
	err = encoder.Encode(obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Serialize `OraclePermissionBump` param:
	err = encoder.Encode(obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSaveResultParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OracleIdx`:
	err = decoder.Decode(&obj.OracleIdx)
	if err != nil {
		return err
	}
	// Deserialize `Error`:
	err = decoder.Decode(&obj.Error)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `JobsChecksum`:
	err = decoder.Decode(&obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Deserialize `MinResponse`:
	err = decoder.Decode(&obj.MinResponse)
	if err != nil {
		return err
	}
	// Deserialize `MaxResponse`:
	err = decoder.Decode(&obj.MaxResponse)
	if err != nil {
		return err
	}
	// Deserialize `FeedPermissionBump`:
	err = decoder.Decode(&obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `OraclePermissionBump`:
	err = decoder.Decode(&obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSaveResultParamsV2 struct {
	OracleIdx            uint32
	Error                bool
	Value                BorshDecimal
	JobsChecksum         [32]uint8
	MinResponse          BorshDecimal
	MaxResponse          BorshDecimal
	FeedPermissionBump   uint8
	OraclePermissionBump uint8
	LeaseBump            uint8
	StateBump            uint8
	JobValues            []BorshDecimal
}

func (obj AggregatorSaveResultParamsV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OracleIdx` param:
	err = encoder.Encode(obj.OracleIdx)
	if err != nil {
		return err
	}
	// Serialize `Error` param:
	err = encoder.Encode(obj.Error)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `JobsChecksum` param:
	err = encoder.Encode(obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Serialize `MinResponse` param:
	err = encoder.Encode(obj.MinResponse)
	if err != nil {
		return err
	}
	// Serialize `MaxResponse` param:
	err = encoder.Encode(obj.MaxResponse)
	if err != nil {
		return err
	}
	// Serialize `FeedPermissionBump` param:
	err = encoder.Encode(obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Serialize `OraclePermissionBump` param:
	err = encoder.Encode(obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `JobValues` param:
	err = encoder.Encode(obj.JobValues)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSaveResultParamsV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OracleIdx`:
	err = decoder.Decode(&obj.OracleIdx)
	if err != nil {
		return err
	}
	// Deserialize `Error`:
	err = decoder.Decode(&obj.Error)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `JobsChecksum`:
	err = decoder.Decode(&obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Deserialize `MinResponse`:
	err = decoder.Decode(&obj.MinResponse)
	if err != nil {
		return err
	}
	// Deserialize `MaxResponse`:
	err = decoder.Decode(&obj.MaxResponse)
	if err != nil {
		return err
	}
	// Deserialize `FeedPermissionBump`:
	err = decoder.Decode(&obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `OraclePermissionBump`:
	err = decoder.Decode(&obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `JobValues`:
	err = decoder.Decode(&obj.JobValues)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetAuthorityParams struct{}

func (obj AggregatorSetAuthorityParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AggregatorSetAuthorityParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type AggregatorSetBatchSizeParams struct {
	BatchSize uint32
}

func (obj AggregatorSetBatchSizeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchSize` param:
	err = encoder.Encode(obj.BatchSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetBatchSizeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchSize`:
	err = decoder.Decode(&obj.BatchSize)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetConfigParams struct {
	Name                     *[32]uint8    `bin:"optional"`
	Metadata                 *[128]uint8   `bin:"optional"`
	MinUpdateDelaySeconds    *uint32       `bin:"optional"`
	MinJobResults            *uint32       `bin:"optional"`
	BatchSize                *uint32       `bin:"optional"`
	MinOracleResults         *uint32       `bin:"optional"`
	ForceReportPeriod        *uint32       `bin:"optional"`
	VarianceThreshold        *BorshDecimal `bin:"optional"`
	BasePriorityFee          *uint32       `bin:"optional"`
	PriorityFeeBump          *uint32       `bin:"optional"`
	PriorityFeeBumpPeriod    *uint32       `bin:"optional"`
	MaxPriorityFeeMultiplier *uint32       `bin:"optional"`
	DisableCrank             *bool         `bin:"optional"`
}

func (obj AggregatorSetConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param (optional):
	{
		if obj.Name == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Name)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Metadata` param (optional):
	{
		if obj.Metadata == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinUpdateDelaySeconds` param (optional):
	{
		if obj.MinUpdateDelaySeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinUpdateDelaySeconds)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinJobResults` param (optional):
	{
		if obj.MinJobResults == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinJobResults)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BatchSize` param (optional):
	{
		if obj.BatchSize == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BatchSize)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinOracleResults` param (optional):
	{
		if obj.MinOracleResults == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinOracleResults)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ForceReportPeriod` param (optional):
	{
		if obj.ForceReportPeriod == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ForceReportPeriod)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `VarianceThreshold` param (optional):
	{
		if obj.VarianceThreshold == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.VarianceThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BasePriorityFee` param (optional):
	{
		if obj.BasePriorityFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BasePriorityFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PriorityFeeBump` param (optional):
	{
		if obj.PriorityFeeBump == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PriorityFeeBump)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PriorityFeeBumpPeriod` param (optional):
	{
		if obj.PriorityFeeBumpPeriod == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PriorityFeeBumpPeriod)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxPriorityFeeMultiplier` param (optional):
	{
		if obj.MaxPriorityFeeMultiplier == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxPriorityFeeMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DisableCrank` param (optional):
	{
		if obj.DisableCrank == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DisableCrank)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AggregatorSetConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Name)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Metadata` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinUpdateDelaySeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinUpdateDelaySeconds)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinJobResults` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinJobResults)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BatchSize` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BatchSize)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinOracleResults` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinOracleResults)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ForceReportPeriod` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ForceReportPeriod)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `VarianceThreshold` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.VarianceThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BasePriorityFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BasePriorityFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PriorityFeeBump` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PriorityFeeBump)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PriorityFeeBumpPeriod` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PriorityFeeBumpPeriod)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxPriorityFeeMultiplier` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxPriorityFeeMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DisableCrank` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DisableCrank)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type AggregatorSetForceReportPeriodParams struct {
	ForceReportPeriod uint32
}

func (obj AggregatorSetForceReportPeriodParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ForceReportPeriod` param:
	err = encoder.Encode(obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetForceReportPeriodParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ForceReportPeriod`:
	err = decoder.Decode(&obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetHistoryBufferParams struct{}

func (obj AggregatorSetHistoryBufferParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AggregatorSetHistoryBufferParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type AggregatorSetMinJobsParams struct {
	MinJobResults uint32
}

func (obj AggregatorSetMinJobsParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinJobResults` param:
	err = encoder.Encode(obj.MinJobResults)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetMinJobsParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinJobResults`:
	err = decoder.Decode(&obj.MinJobResults)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetMinOraclesParams struct {
	MinOracleResults uint32
}

func (obj AggregatorSetMinOraclesParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinOracleResults` param:
	err = encoder.Encode(obj.MinOracleResults)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetMinOraclesParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinOracleResults`:
	err = decoder.Decode(&obj.MinOracleResults)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetQueueParams struct{}

func (obj AggregatorSetQueueParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AggregatorSetQueueParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type AggregatorSetResolutionModeParams struct {
	Mode uint8
}

func (obj AggregatorSetResolutionModeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mode` param:
	err = encoder.Encode(obj.Mode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetResolutionModeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mode`:
	err = decoder.Decode(&obj.Mode)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetUpdateIntervalParams struct {
	NewInterval uint32
}

func (obj AggregatorSetUpdateIntervalParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewInterval` param:
	err = encoder.Encode(obj.NewInterval)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetUpdateIntervalParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewInterval`:
	err = decoder.Decode(&obj.NewInterval)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorSetVarianceThresholdParams struct {
	VarianceThreshold BorshDecimal
}

func (obj AggregatorSetVarianceThresholdParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VarianceThreshold` param:
	err = encoder.Encode(obj.VarianceThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorSetVarianceThresholdParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VarianceThreshold`:
	err = decoder.Decode(&obj.VarianceThreshold)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorTeeSaveResultParams struct {
	Value                BorshDecimal
	JobsChecksum         [32]uint8
	MinResponse          BorshDecimal
	MaxResponse          BorshDecimal
	FeedPermissionBump   uint8
	OraclePermissionBump uint8
	LeaseBump            uint8
	StateBump            uint8
}

func (obj AggregatorTeeSaveResultParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `JobsChecksum` param:
	err = encoder.Encode(obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Serialize `MinResponse` param:
	err = encoder.Encode(obj.MinResponse)
	if err != nil {
		return err
	}
	// Serialize `MaxResponse` param:
	err = encoder.Encode(obj.MaxResponse)
	if err != nil {
		return err
	}
	// Serialize `FeedPermissionBump` param:
	err = encoder.Encode(obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Serialize `OraclePermissionBump` param:
	err = encoder.Encode(obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorTeeSaveResultParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `JobsChecksum`:
	err = decoder.Decode(&obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Deserialize `MinResponse`:
	err = decoder.Decode(&obj.MinResponse)
	if err != nil {
		return err
	}
	// Deserialize `MaxResponse`:
	err = decoder.Decode(&obj.MaxResponse)
	if err != nil {
		return err
	}
	// Deserialize `FeedPermissionBump`:
	err = decoder.Decode(&obj.FeedPermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `OraclePermissionBump`:
	err = decoder.Decode(&obj.OraclePermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type BufferRelayerInitParams struct {
	Name                  [32]uint8
	MinUpdateDelaySeconds uint32
	StateBump             uint8
}

func (obj BufferRelayerInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `MinUpdateDelaySeconds` param:
	err = encoder.Encode(obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferRelayerInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `MinUpdateDelaySeconds`:
	err = decoder.Decode(&obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type BufferRelayerOpenRoundParams struct {
	StateBump      uint8
	PermissionBump uint8
}

func (obj BufferRelayerOpenRoundParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferRelayerOpenRoundParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

type BufferRelayerSaveResultParams struct {
	StateBump      uint8
	PermissionBump uint8
	Result         []byte
	Success        bool
}

func (obj BufferRelayerSaveResultParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	// Serialize `Success` param:
	err = encoder.Encode(obj.Success)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferRelayerSaveResultParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	// Deserialize `Success`:
	err = decoder.Decode(&obj.Success)
	if err != nil {
		return err
	}
	return nil
}

type CrankInitParams struct {
	Name      []byte
	Metadata  []byte
	CrankSize uint32
}

func (obj CrankInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `CrankSize` param:
	err = encoder.Encode(obj.CrankSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CrankInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `CrankSize`:
	err = decoder.Decode(&obj.CrankSize)
	if err != nil {
		return err
	}
	return nil
}

type CrankPopParams struct {
	StateBump                 uint8
	LeaseBumps                []byte
	PermissionBumps           []byte
	Nonce                     *uint32 `bin:"optional"`
	FailOpenOnAccountMismatch *bool   `bin:"optional"`
}

func (obj CrankPopParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBumps` param:
	err = encoder.Encode(obj.LeaseBumps)
	if err != nil {
		return err
	}
	// Serialize `PermissionBumps` param:
	err = encoder.Encode(obj.PermissionBumps)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param (optional):
	{
		if obj.Nonce == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FailOpenOnAccountMismatch` param (optional):
	{
		if obj.FailOpenOnAccountMismatch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FailOpenOnAccountMismatch)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CrankPopParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBumps`:
	err = decoder.Decode(&obj.LeaseBumps)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBumps`:
	err = decoder.Decode(&obj.PermissionBumps)
	if err != nil {
		return err
	}
	// Deserialize `Nonce` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FailOpenOnAccountMismatch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FailOpenOnAccountMismatch)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CrankPopParamsV2 struct {
	StateBump                 uint8
	LeaseBumps                []byte
	PermissionBumps           []byte
	Nonce                     *uint32 `bin:"optional"`
	FailOpenOnAccountMismatch *bool   `bin:"optional"`
	PopIdx                    *uint32 `bin:"optional"`
}

func (obj CrankPopParamsV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBumps` param:
	err = encoder.Encode(obj.LeaseBumps)
	if err != nil {
		return err
	}
	// Serialize `PermissionBumps` param:
	err = encoder.Encode(obj.PermissionBumps)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param (optional):
	{
		if obj.Nonce == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FailOpenOnAccountMismatch` param (optional):
	{
		if obj.FailOpenOnAccountMismatch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FailOpenOnAccountMismatch)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PopIdx` param (optional):
	{
		if obj.PopIdx == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PopIdx)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CrankPopParamsV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBumps`:
	err = decoder.Decode(&obj.LeaseBumps)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBumps`:
	err = decoder.Decode(&obj.PermissionBumps)
	if err != nil {
		return err
	}
	// Deserialize `Nonce` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FailOpenOnAccountMismatch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FailOpenOnAccountMismatch)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PopIdx` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PopIdx)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CrankPushParams struct {
	StateBump      uint8
	PermissionBump uint8
	NotifiRef      *[64]uint8 `bin:"optional"`
}

func (obj CrankPushParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `NotifiRef` param (optional):
	{
		if obj.NotifiRef == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NotifiRef)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CrankPushParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `NotifiRef` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NotifiRef)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type JobInitParams struct {
	Name       [32]uint8
	Expiration int64
	StateBump  uint8
	Data       []byte
	Size       *uint32 `bin:"optional"`
}

func (obj JobInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Size` param (optional):
	{
		if obj.Size == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Size)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *JobInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Size` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Size)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type JobSetDataParams struct {
	Data     []byte
	ChunkIdx uint8
}

func (obj JobSetDataParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `ChunkIdx` param:
	err = encoder.Encode(obj.ChunkIdx)
	if err != nil {
		return err
	}
	return nil
}

func (obj *JobSetDataParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `ChunkIdx`:
	err = decoder.Decode(&obj.ChunkIdx)
	if err != nil {
		return err
	}
	return nil
}

type LeaseExtendParams struct {
	LoadAmount  uint64
	LeaseBump   uint8
	StateBump   uint8
	WalletBumps []byte
}

func (obj LeaseExtendParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LoadAmount` param:
	err = encoder.Encode(obj.LoadAmount)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `WalletBumps` param:
	err = encoder.Encode(obj.WalletBumps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LeaseExtendParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LoadAmount`:
	err = decoder.Decode(&obj.LoadAmount)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `WalletBumps`:
	err = decoder.Decode(&obj.WalletBumps)
	if err != nil {
		return err
	}
	return nil
}

type LeaseInitParams struct {
	LoadAmount        uint64
	WithdrawAuthority ag_solanago.PublicKey
	LeaseBump         uint8
	StateBump         uint8
	WalletBumps       []byte
}

func (obj LeaseInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LoadAmount` param:
	err = encoder.Encode(obj.LoadAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthority` param:
	err = encoder.Encode(obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `WalletBumps` param:
	err = encoder.Encode(obj.WalletBumps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LeaseInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LoadAmount`:
	err = decoder.Decode(&obj.LoadAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthority`:
	err = decoder.Decode(&obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `WalletBumps`:
	err = decoder.Decode(&obj.WalletBumps)
	if err != nil {
		return err
	}
	return nil
}

type LeaseSetAuthorityParams struct{}

func (obj LeaseSetAuthorityParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *LeaseSetAuthorityParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type LeaseWithdrawParams struct {
	StateBump uint8
	LeaseBump uint8
	Amount    uint64
}

func (obj LeaseWithdrawParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `LeaseBump` param:
	err = encoder.Encode(obj.LeaseBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LeaseWithdrawParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `LeaseBump`:
	err = decoder.Decode(&obj.LeaseBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type OracleHeartbeatParams struct {
	PermissionBump uint8
}

func (obj OracleHeartbeatParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleHeartbeatParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

type OracleInitParams struct {
	Name       []byte
	Metadata   []byte
	StateBump  uint8
	OracleBump uint8
}

func (obj OracleInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `OracleBump` param:
	err = encoder.Encode(obj.OracleBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `OracleBump`:
	err = decoder.Decode(&obj.OracleBump)
	if err != nil {
		return err
	}
	return nil
}

type OracleQueueInitParams struct {
	Name                          [32]uint8
	Metadata                      [64]uint8
	Reward                        uint64
	MinStake                      uint64
	FeedProbationPeriod           uint32
	OracleTimeout                 uint32
	SlashingEnabled               bool
	VarianceToleranceMultiplier   BorshDecimal
	ConsecutiveFeedFailureLimit   uint64
	ConsecutiveOracleFailureLimit uint64
	QueueSize                     uint32
	UnpermissionedFeeds           bool
	UnpermissionedVrf             bool
	EnableBufferRelayers          bool
	EnableTeeOnly                 bool
}

func (obj OracleQueueInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Reward` param:
	err = encoder.Encode(obj.Reward)
	if err != nil {
		return err
	}
	// Serialize `MinStake` param:
	err = encoder.Encode(obj.MinStake)
	if err != nil {
		return err
	}
	// Serialize `FeedProbationPeriod` param:
	err = encoder.Encode(obj.FeedProbationPeriod)
	if err != nil {
		return err
	}
	// Serialize `OracleTimeout` param:
	err = encoder.Encode(obj.OracleTimeout)
	if err != nil {
		return err
	}
	// Serialize `SlashingEnabled` param:
	err = encoder.Encode(obj.SlashingEnabled)
	if err != nil {
		return err
	}
	// Serialize `VarianceToleranceMultiplier` param:
	err = encoder.Encode(obj.VarianceToleranceMultiplier)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveFeedFailureLimit` param:
	err = encoder.Encode(obj.ConsecutiveFeedFailureLimit)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveOracleFailureLimit` param:
	err = encoder.Encode(obj.ConsecutiveOracleFailureLimit)
	if err != nil {
		return err
	}
	// Serialize `QueueSize` param:
	err = encoder.Encode(obj.QueueSize)
	if err != nil {
		return err
	}
	// Serialize `UnpermissionedFeeds` param:
	err = encoder.Encode(obj.UnpermissionedFeeds)
	if err != nil {
		return err
	}
	// Serialize `UnpermissionedVrf` param:
	err = encoder.Encode(obj.UnpermissionedVrf)
	if err != nil {
		return err
	}
	// Serialize `EnableBufferRelayers` param:
	err = encoder.Encode(obj.EnableBufferRelayers)
	if err != nil {
		return err
	}
	// Serialize `EnableTeeOnly` param:
	err = encoder.Encode(obj.EnableTeeOnly)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleQueueInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Reward`:
	err = decoder.Decode(&obj.Reward)
	if err != nil {
		return err
	}
	// Deserialize `MinStake`:
	err = decoder.Decode(&obj.MinStake)
	if err != nil {
		return err
	}
	// Deserialize `FeedProbationPeriod`:
	err = decoder.Decode(&obj.FeedProbationPeriod)
	if err != nil {
		return err
	}
	// Deserialize `OracleTimeout`:
	err = decoder.Decode(&obj.OracleTimeout)
	if err != nil {
		return err
	}
	// Deserialize `SlashingEnabled`:
	err = decoder.Decode(&obj.SlashingEnabled)
	if err != nil {
		return err
	}
	// Deserialize `VarianceToleranceMultiplier`:
	err = decoder.Decode(&obj.VarianceToleranceMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveFeedFailureLimit`:
	err = decoder.Decode(&obj.ConsecutiveFeedFailureLimit)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveOracleFailureLimit`:
	err = decoder.Decode(&obj.ConsecutiveOracleFailureLimit)
	if err != nil {
		return err
	}
	// Deserialize `QueueSize`:
	err = decoder.Decode(&obj.QueueSize)
	if err != nil {
		return err
	}
	// Deserialize `UnpermissionedFeeds`:
	err = decoder.Decode(&obj.UnpermissionedFeeds)
	if err != nil {
		return err
	}
	// Deserialize `UnpermissionedVrf`:
	err = decoder.Decode(&obj.UnpermissionedVrf)
	if err != nil {
		return err
	}
	// Deserialize `EnableBufferRelayers`:
	err = decoder.Decode(&obj.EnableBufferRelayers)
	if err != nil {
		return err
	}
	// Deserialize `EnableTeeOnly`:
	err = decoder.Decode(&obj.EnableTeeOnly)
	if err != nil {
		return err
	}
	return nil
}

type OracleQueueSetConfigParams struct {
	Name                          *[32]uint8    `bin:"optional"`
	Metadata                      *[64]uint8    `bin:"optional"`
	UnpermissionedFeedsEnabled    *bool         `bin:"optional"`
	UnpermissionedVrfEnabled      *bool         `bin:"optional"`
	EnableBufferRelayers          *bool         `bin:"optional"`
	VarianceToleranceMultiplier   *BorshDecimal `bin:"optional"`
	SlashingEnabled               *bool         `bin:"optional"`
	Reward                        *uint64       `bin:"optional"`
	MinStake                      *uint64       `bin:"optional"`
	OracleTimeout                 *uint32       `bin:"optional"`
	ConsecutiveFeedFailureLimit   *uint64       `bin:"optional"`
	ConsecutiveOracleFailureLimit *uint64       `bin:"optional"`
	EnableTeeOnly                 *bool         `bin:"optional"`
}

func (obj OracleQueueSetConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param (optional):
	{
		if obj.Name == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Name)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Metadata` param (optional):
	{
		if obj.Metadata == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UnpermissionedFeedsEnabled` param (optional):
	{
		if obj.UnpermissionedFeedsEnabled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UnpermissionedFeedsEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UnpermissionedVrfEnabled` param (optional):
	{
		if obj.UnpermissionedVrfEnabled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UnpermissionedVrfEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `EnableBufferRelayers` param (optional):
	{
		if obj.EnableBufferRelayers == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.EnableBufferRelayers)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `VarianceToleranceMultiplier` param (optional):
	{
		if obj.VarianceToleranceMultiplier == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.VarianceToleranceMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SlashingEnabled` param (optional):
	{
		if obj.SlashingEnabled == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SlashingEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Reward` param (optional):
	{
		if obj.Reward == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Reward)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinStake` param (optional):
	{
		if obj.MinStake == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinStake)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `OracleTimeout` param (optional):
	{
		if obj.OracleTimeout == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.OracleTimeout)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ConsecutiveFeedFailureLimit` param (optional):
	{
		if obj.ConsecutiveFeedFailureLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConsecutiveFeedFailureLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ConsecutiveOracleFailureLimit` param (optional):
	{
		if obj.ConsecutiveOracleFailureLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConsecutiveOracleFailureLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `EnableTeeOnly` param (optional):
	{
		if obj.EnableTeeOnly == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.EnableTeeOnly)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OracleQueueSetConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Name)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Metadata` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UnpermissionedFeedsEnabled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UnpermissionedFeedsEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UnpermissionedVrfEnabled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UnpermissionedVrfEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `EnableBufferRelayers` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.EnableBufferRelayers)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `VarianceToleranceMultiplier` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.VarianceToleranceMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SlashingEnabled` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SlashingEnabled)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Reward` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Reward)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinStake` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinStake)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `OracleTimeout` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.OracleTimeout)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ConsecutiveFeedFailureLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConsecutiveFeedFailureLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ConsecutiveOracleFailureLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConsecutiveOracleFailureLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `EnableTeeOnly` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.EnableTeeOnly)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type OracleQueueSetRewardsParams struct {
	Rewards uint64
}

func (obj OracleQueueSetRewardsParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Rewards` param:
	err = encoder.Encode(obj.Rewards)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleQueueSetRewardsParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Rewards`:
	err = decoder.Decode(&obj.Rewards)
	if err != nil {
		return err
	}
	return nil
}

type OracleTeeHeartbeatParams struct {
	PermissionBump uint8
}

func (obj OracleTeeHeartbeatParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleTeeHeartbeatParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

type OracleWithdrawParams struct {
	StateBump      uint8
	PermissionBump uint8
	Amount         uint64
}

func (obj OracleWithdrawParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleWithdrawParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type PermissionInitParams struct{}

func (obj PermissionInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *PermissionInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type PermissionSetParams struct {
	Permission SwitchboardPermission
	Enable     bool
}

func (obj PermissionSetParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Permission` param:
	err = encoder.Encode(obj.Permission)
	if err != nil {
		return err
	}
	// Serialize `Enable` param:
	err = encoder.Encode(obj.Enable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PermissionSetParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Permission`:
	err = decoder.Decode(&obj.Permission)
	if err != nil {
		return err
	}
	// Deserialize `Enable`:
	err = decoder.Decode(&obj.Enable)
	if err != nil {
		return err
	}
	return nil
}

type ProgramConfigParams struct {
	Token       ag_solanago.PublicKey
	Bump        uint8
	DaoMint     ag_solanago.PublicKey
	AddEnclaves [][32]uint8
	RmEnclaves  [][32]uint8
}

func (obj ProgramConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DaoMint` param:
	err = encoder.Encode(obj.DaoMint)
	if err != nil {
		return err
	}
	// Serialize `AddEnclaves` param:
	err = encoder.Encode(obj.AddEnclaves)
	if err != nil {
		return err
	}
	// Serialize `RmEnclaves` param:
	err = encoder.Encode(obj.RmEnclaves)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DaoMint`:
	err = decoder.Decode(&obj.DaoMint)
	if err != nil {
		return err
	}
	// Deserialize `AddEnclaves`:
	err = decoder.Decode(&obj.AddEnclaves)
	if err != nil {
		return err
	}
	// Deserialize `RmEnclaves`:
	err = decoder.Decode(&obj.RmEnclaves)
	if err != nil {
		return err
	}
	return nil
}

type ProgramInitParams struct {
	StateBump uint8
}

func (obj ProgramInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProgramInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type SetBumpsParams struct {
	StateBump uint8
}

func (obj SetBumpsParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetBumpsParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type VaultTransferParams struct {
	StateBump uint8
	Amount    uint64
}

func (obj VaultTransferParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultTransferParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type VrfCloseParams struct {
	StateBump      uint8
	PermissionBump uint8
}

func (obj VrfCloseParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfCloseParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	return nil
}

type VrfInitParams struct {
	Callback  Callback
	StateBump uint8
}

func (obj VrfInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Callback` param:
	err = encoder.Encode(obj.Callback)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Callback`:
	err = decoder.Decode(&obj.Callback)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type VrfLiteCloseParams struct{}

func (obj VrfLiteCloseParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *VrfLiteCloseParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type VrfLiteInitParams struct {
	Callback   *Callback `bin:"optional"`
	StateBump  uint8
	Expiration *int64 `bin:"optional"`
}

func (obj VrfLiteInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Callback` param (optional):
	{
		if obj.Callback == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param (optional):
	{
		if obj.Expiration == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Expiration)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *VrfLiteInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Callback` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `Expiration` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Expiration)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type VrfLiteProveAndVerifyParams struct {
	Nonce        *uint32 `bin:"optional"`
	Proof        []byte
	ProofEncoded string
	Counter      ag_binary.Uint128
}

func (obj VrfLiteProveAndVerifyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param (optional):
	{
		if obj.Nonce == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	// Serialize `ProofEncoded` param:
	err = encoder.Encode(obj.ProofEncoded)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfLiteProveAndVerifyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	// Deserialize `ProofEncoded`:
	err = decoder.Decode(&obj.ProofEncoded)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

type VrfLiteRequestRandomnessParams struct {
	Callback *Callback `bin:"optional"`
}

func (obj VrfLiteRequestRandomnessParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Callback` param (optional):
	{
		if obj.Callback == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *VrfLiteRequestRandomnessParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Callback` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type VrfPoolAddParams struct{}

func (obj VrfPoolAddParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *VrfPoolAddParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type VrfPoolInitParams struct {
	MaxRows     uint32
	MinInterval uint32
	StateBump   uint8
}

func (obj VrfPoolInitParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxRows` param:
	err = encoder.Encode(obj.MaxRows)
	if err != nil {
		return err
	}
	// Serialize `MinInterval` param:
	err = encoder.Encode(obj.MinInterval)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfPoolInitParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxRows`:
	err = decoder.Decode(&obj.MaxRows)
	if err != nil {
		return err
	}
	// Deserialize `MinInterval`:
	err = decoder.Decode(&obj.MinInterval)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type VrfPoolRemoveParams struct{}

func (obj VrfPoolRemoveParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *VrfPoolRemoveParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type VrfPoolRequestParams struct {
	Callback *Callback `bin:"optional"`
}

func (obj VrfPoolRequestParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Callback` param (optional):
	{
		if obj.Callback == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *VrfPoolRequestParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Callback` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Callback)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type VrfProveParams struct {
	Proof []byte
	Idx   uint32
}

func (obj VrfProveParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfProveParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	return nil
}

type VrfProveAndVerifyParams struct {
	Nonce        *uint32 `bin:"optional"`
	StateBump    uint8
	Idx          uint32
	Proof        []byte
	ProofEncoded string
	Counter      ag_binary.Uint128
}

func (obj VrfProveAndVerifyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param (optional):
	{
		if obj.Nonce == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	// Serialize `ProofEncoded` param:
	err = encoder.Encode(obj.ProofEncoded)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfProveAndVerifyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Nonce)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	// Deserialize `ProofEncoded`:
	err = decoder.Decode(&obj.ProofEncoded)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

type VrfRequestRandomnessParams struct {
	PermissionBump uint8
	StateBump      uint8
}

func (obj VrfRequestRandomnessParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfRequestRandomnessParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	return nil
}

type VrfSetCallbackParams struct {
	Callback Callback
}

func (obj VrfSetCallbackParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Callback` param:
	err = encoder.Encode(obj.Callback)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfSetCallbackParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Callback`:
	err = decoder.Decode(&obj.Callback)
	if err != nil {
		return err
	}
	return nil
}

type Callback struct {
	ProgramId ag_solanago.PublicKey
	Accounts  []AccountMetaBorsh
	IxData    []byte
}

func (obj Callback) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	// Serialize `IxData` param:
	err = encoder.Encode(obj.IxData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Callback) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	// Deserialize `IxData`:
	err = decoder.Decode(&obj.IxData)
	if err != nil {
		return err
	}
	return nil
}

type EcvrfProofZC struct {
	Gamma EdwardsPointZC
	C     Scalar
	S     Scalar
}

func (obj EcvrfProofZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Gamma` param:
	err = encoder.Encode(obj.Gamma)
	if err != nil {
		return err
	}
	// Serialize `C` param:
	err = encoder.Encode(obj.C)
	if err != nil {
		return err
	}
	// Serialize `S` param:
	err = encoder.Encode(obj.S)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EcvrfProofZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Gamma`:
	err = decoder.Decode(&obj.Gamma)
	if err != nil {
		return err
	}
	// Deserialize `C`:
	err = decoder.Decode(&obj.C)
	if err != nil {
		return err
	}
	// Deserialize `S`:
	err = decoder.Decode(&obj.S)
	if err != nil {
		return err
	}
	return nil
}

type Scalar struct {
	// `bytes` is a little-endian byte encoding of an integer representing a scalar modulo the
	// group order.
	//
	// # Invariant
	//
	// The integer representing this scalar must be bounded above by \\(2\^{255}\\), or
	// equivalently the high bit of `bytes[31]` must be zero.
	//
	// This ensures that there is room for a carry bit when computing a NAF representation.
	Bytes [32]uint8
}

func (obj Scalar) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bytes` param:
	err = encoder.Encode(obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Scalar) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bytes`:
	err = decoder.Decode(&obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

type FieldElementZC struct {
	Bytes [5]uint64
}

func (obj FieldElementZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bytes` param:
	err = encoder.Encode(obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FieldElementZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bytes`:
	err = decoder.Decode(&obj.Bytes)
	if err != nil {
		return err
	}
	return nil
}

type CompletedPointZC struct {
	X FieldElementZC
	Y FieldElementZC
	Z FieldElementZC
	T FieldElementZC
}

func (obj CompletedPointZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `X` param:
	err = encoder.Encode(obj.X)
	if err != nil {
		return err
	}
	// Serialize `Y` param:
	err = encoder.Encode(obj.Y)
	if err != nil {
		return err
	}
	// Serialize `Z` param:
	err = encoder.Encode(obj.Z)
	if err != nil {
		return err
	}
	// Serialize `T` param:
	err = encoder.Encode(obj.T)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompletedPointZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `X`:
	err = decoder.Decode(&obj.X)
	if err != nil {
		return err
	}
	// Deserialize `Y`:
	err = decoder.Decode(&obj.Y)
	if err != nil {
		return err
	}
	// Deserialize `Z`:
	err = decoder.Decode(&obj.Z)
	if err != nil {
		return err
	}
	// Deserialize `T`:
	err = decoder.Decode(&obj.T)
	if err != nil {
		return err
	}
	return nil
}

type EdwardsPointZC struct {
	X FieldElementZC
	Y FieldElementZC
	Z FieldElementZC
	T FieldElementZC
}

func (obj EdwardsPointZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `X` param:
	err = encoder.Encode(obj.X)
	if err != nil {
		return err
	}
	// Serialize `Y` param:
	err = encoder.Encode(obj.Y)
	if err != nil {
		return err
	}
	// Serialize `Z` param:
	err = encoder.Encode(obj.Z)
	if err != nil {
		return err
	}
	// Serialize `T` param:
	err = encoder.Encode(obj.T)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EdwardsPointZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `X`:
	err = decoder.Decode(&obj.X)
	if err != nil {
		return err
	}
	// Deserialize `Y`:
	err = decoder.Decode(&obj.Y)
	if err != nil {
		return err
	}
	// Deserialize `Z`:
	err = decoder.Decode(&obj.Z)
	if err != nil {
		return err
	}
	// Deserialize `T`:
	err = decoder.Decode(&obj.T)
	if err != nil {
		return err
	}
	return nil
}

type ProjectivePointZC struct {
	X FieldElementZC
	Y FieldElementZC
	Z FieldElementZC
}

func (obj ProjectivePointZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `X` param:
	err = encoder.Encode(obj.X)
	if err != nil {
		return err
	}
	// Serialize `Y` param:
	err = encoder.Encode(obj.Y)
	if err != nil {
		return err
	}
	// Serialize `Z` param:
	err = encoder.Encode(obj.Z)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProjectivePointZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `X`:
	err = decoder.Decode(&obj.X)
	if err != nil {
		return err
	}
	// Deserialize `Y`:
	err = decoder.Decode(&obj.Y)
	if err != nil {
		return err
	}
	// Deserialize `Z`:
	err = decoder.Decode(&obj.Z)
	if err != nil {
		return err
	}
	return nil
}

type EcvrfIntermediate struct {
	R   FieldElementZC
	NS  FieldElementZC
	D   FieldElementZC
	T13 FieldElementZC
	T15 FieldElementZC
}

func (obj EcvrfIntermediate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `R` param:
	err = encoder.Encode(obj.R)
	if err != nil {
		return err
	}
	// Serialize `NS` param:
	err = encoder.Encode(obj.NS)
	if err != nil {
		return err
	}
	// Serialize `D` param:
	err = encoder.Encode(obj.D)
	if err != nil {
		return err
	}
	// Serialize `T13` param:
	err = encoder.Encode(obj.T13)
	if err != nil {
		return err
	}
	// Serialize `T15` param:
	err = encoder.Encode(obj.T15)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EcvrfIntermediate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `R`:
	err = decoder.Decode(&obj.R)
	if err != nil {
		return err
	}
	// Deserialize `NS`:
	err = decoder.Decode(&obj.NS)
	if err != nil {
		return err
	}
	// Deserialize `D`:
	err = decoder.Decode(&obj.D)
	if err != nil {
		return err
	}
	// Deserialize `T13`:
	err = decoder.Decode(&obj.T13)
	if err != nil {
		return err
	}
	// Deserialize `T15`:
	err = decoder.Decode(&obj.T15)
	if err != nil {
		return err
	}
	return nil
}

type BorshDecimal struct {
	Mantissa ag_binary.Int128
	Scale    uint32
}

func (obj BorshDecimal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mantissa` param:
	err = encoder.Encode(obj.Mantissa)
	if err != nil {
		return err
	}
	// Serialize `Scale` param:
	err = encoder.Encode(obj.Scale)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BorshDecimal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mantissa`:
	err = decoder.Decode(&obj.Mantissa)
	if err != nil {
		return err
	}
	// Deserialize `Scale`:
	err = decoder.Decode(&obj.Scale)
	if err != nil {
		return err
	}
	return nil
}

type Quote struct {
	// The address of the signer generated within an enclave.
	EnclaveSigner ag_solanago.PublicKey

	// The quotes MRENCLAVE measurement dictating the contents of the secure enclave.
	MrEnclave [32]uint8

	// The VerificationStatus of the quote.
	VerificationStatus uint8

	// The unix timestamp when the quote was last verified.
	VerificationTimestamp int64

	// The unix timestamp when the quotes verification status expires.
	ValidUntil int64

	// The off-chain registry where the verifiers quote can be located.
	QuoteRegistry [32]uint8

	// Key to lookup the buffer data on IPFS or an alternative decentralized storage solution.
	RegistryKey [64]uint8

	// Reserved.
	Ebuf [256]uint8
}

func (obj Quote) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EnclaveSigner` param:
	err = encoder.Encode(obj.EnclaveSigner)
	if err != nil {
		return err
	}
	// Serialize `MrEnclave` param:
	err = encoder.Encode(obj.MrEnclave)
	if err != nil {
		return err
	}
	// Serialize `VerificationStatus` param:
	err = encoder.Encode(obj.VerificationStatus)
	if err != nil {
		return err
	}
	// Serialize `VerificationTimestamp` param:
	err = encoder.Encode(obj.VerificationTimestamp)
	if err != nil {
		return err
	}
	// Serialize `ValidUntil` param:
	err = encoder.Encode(obj.ValidUntil)
	if err != nil {
		return err
	}
	// Serialize `QuoteRegistry` param:
	err = encoder.Encode(obj.QuoteRegistry)
	if err != nil {
		return err
	}
	// Serialize `RegistryKey` param:
	err = encoder.Encode(obj.RegistryKey)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Quote) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EnclaveSigner`:
	err = decoder.Decode(&obj.EnclaveSigner)
	if err != nil {
		return err
	}
	// Deserialize `MrEnclave`:
	err = decoder.Decode(&obj.MrEnclave)
	if err != nil {
		return err
	}
	// Deserialize `VerificationStatus`:
	err = decoder.Decode(&obj.VerificationStatus)
	if err != nil {
		return err
	}
	// Deserialize `VerificationTimestamp`:
	err = decoder.Decode(&obj.VerificationTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `ValidUntil`:
	err = decoder.Decode(&obj.ValidUntil)
	if err != nil {
		return err
	}
	// Deserialize `QuoteRegistry`:
	err = decoder.Decode(&obj.QuoteRegistry)
	if err != nil {
		return err
	}
	// Deserialize `RegistryKey`:
	err = decoder.Decode(&obj.RegistryKey)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type VerifierAccountData struct {
	// Represents the state of the quote verifiers enclave.
	Enclave Quote

	// The authority of the EnclaveAccount which is permitted to make account changes.
	Authority ag_solanago.PublicKey

	// Queue used for attestation to verify a MRENCLAVE measurement.
	AttestationQueue ag_solanago.PublicKey

	// The unix timestamp when the quote was created.
	CreatedAt int64

	// Whether the quote is located on the AttestationQueues buffer.
	IsOnQueue bool

	// The last time the quote heartbeated on-chain.
	LastHeartbeat int64

	// The SwitchboardWallet account containing the reward escrow for verifying quotes on-chain.
	// We should set this whenever the operator changes so we dont need to pass another account and can verify with has_one.
	RewardEscrow ag_solanago.PublicKey

	// The SwitchboardWallet account containing the queues required min_stake.
	// Needs to be separate from the reward_escrow. Allows easier 3rd party management of stake from rewards.
	StakeWallet ag_solanago.PublicKey

	// Reserved.
	Ebuf [1024]uint8
}

func (obj VerifierAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enclave` param:
	err = encoder.Encode(obj.Enclave)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `AttestationQueue` param:
	err = encoder.Encode(obj.AttestationQueue)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `IsOnQueue` param:
	err = encoder.Encode(obj.IsOnQueue)
	if err != nil {
		return err
	}
	// Serialize `LastHeartbeat` param:
	err = encoder.Encode(obj.LastHeartbeat)
	if err != nil {
		return err
	}
	// Serialize `RewardEscrow` param:
	err = encoder.Encode(obj.RewardEscrow)
	if err != nil {
		return err
	}
	// Serialize `StakeWallet` param:
	err = encoder.Encode(obj.StakeWallet)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VerifierAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enclave`:
	err = decoder.Decode(&obj.Enclave)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `AttestationQueue`:
	err = decoder.Decode(&obj.AttestationQueue)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `IsOnQueue`:
	err = decoder.Decode(&obj.IsOnQueue)
	if err != nil {
		return err
	}
	// Deserialize `LastHeartbeat`:
	err = decoder.Decode(&obj.LastHeartbeat)
	if err != nil {
		return err
	}
	// Deserialize `RewardEscrow`:
	err = decoder.Decode(&obj.RewardEscrow)
	if err != nil {
		return err
	}
	// Deserialize `StakeWallet`:
	err = decoder.Decode(&obj.StakeWallet)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type Hash struct {
	// The bytes used to derive the hash.
	Data [32]uint8
}

func (obj Hash) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Hash) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type SlidingWindowElement struct {
	OracleKey ag_solanago.PublicKey
	Value     SwitchboardDecimal
	Slot      uint64
	Timestamp int64
}

func (obj SlidingWindowElement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OracleKey` param:
	err = encoder.Encode(obj.OracleKey)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `Slot` param:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SlidingWindowElement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OracleKey`:
	err = decoder.Decode(&obj.OracleKey)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorRound struct {
	// Maintains the number of successful responses received from nodes.
	// Nodes can submit one successful response per round.
	NumSuccess uint32

	// Number of error responses.
	NumError uint32

	// Whether an update request round has ended.
	IsClosed bool

	// Maintains the `solana_program::clock::Slot` that the round was opened at.
	RoundOpenSlot uint64

	// Maintains the `solana_program::clock::UnixTimestamp;` the round was opened at.
	RoundOpenTimestamp int64

	// Maintains the current median of all successful round responses.
	Result SwitchboardDecimal

	// Standard deviation of the accepted results in the round.
	StdDeviation SwitchboardDecimal

	// Maintains the minimum node response this round.
	MinResponse SwitchboardDecimal

	// Maintains the maximum node response this round.
	MaxResponse SwitchboardDecimal

	// Pubkeys of the oracles fulfilling this round.
	OraclePubkeysData [16]ag_solanago.PublicKey

	// Represents all successful node responses this round. `NaN` if empty.
	MediansData [16]SwitchboardDecimal

	// Current rewards/slashes oracles have received this round.
	CurrentPayout [16]int64

	// Keep track of which responses are fulfilled here.
	MediansFulfilled [16]bool

	// Keeps track of which errors are fulfilled here.
	ErrorsFulfilled [16]bool
}

func (obj AggregatorRound) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumSuccess` param:
	err = encoder.Encode(obj.NumSuccess)
	if err != nil {
		return err
	}
	// Serialize `NumError` param:
	err = encoder.Encode(obj.NumError)
	if err != nil {
		return err
	}
	// Serialize `IsClosed` param:
	err = encoder.Encode(obj.IsClosed)
	if err != nil {
		return err
	}
	// Serialize `RoundOpenSlot` param:
	err = encoder.Encode(obj.RoundOpenSlot)
	if err != nil {
		return err
	}
	// Serialize `RoundOpenTimestamp` param:
	err = encoder.Encode(obj.RoundOpenTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	// Serialize `StdDeviation` param:
	err = encoder.Encode(obj.StdDeviation)
	if err != nil {
		return err
	}
	// Serialize `MinResponse` param:
	err = encoder.Encode(obj.MinResponse)
	if err != nil {
		return err
	}
	// Serialize `MaxResponse` param:
	err = encoder.Encode(obj.MaxResponse)
	if err != nil {
		return err
	}
	// Serialize `OraclePubkeysData` param:
	err = encoder.Encode(obj.OraclePubkeysData)
	if err != nil {
		return err
	}
	// Serialize `MediansData` param:
	err = encoder.Encode(obj.MediansData)
	if err != nil {
		return err
	}
	// Serialize `CurrentPayout` param:
	err = encoder.Encode(obj.CurrentPayout)
	if err != nil {
		return err
	}
	// Serialize `MediansFulfilled` param:
	err = encoder.Encode(obj.MediansFulfilled)
	if err != nil {
		return err
	}
	// Serialize `ErrorsFulfilled` param:
	err = encoder.Encode(obj.ErrorsFulfilled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorRound) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumSuccess`:
	err = decoder.Decode(&obj.NumSuccess)
	if err != nil {
		return err
	}
	// Deserialize `NumError`:
	err = decoder.Decode(&obj.NumError)
	if err != nil {
		return err
	}
	// Deserialize `IsClosed`:
	err = decoder.Decode(&obj.IsClosed)
	if err != nil {
		return err
	}
	// Deserialize `RoundOpenSlot`:
	err = decoder.Decode(&obj.RoundOpenSlot)
	if err != nil {
		return err
	}
	// Deserialize `RoundOpenTimestamp`:
	err = decoder.Decode(&obj.RoundOpenTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	// Deserialize `StdDeviation`:
	err = decoder.Decode(&obj.StdDeviation)
	if err != nil {
		return err
	}
	// Deserialize `MinResponse`:
	err = decoder.Decode(&obj.MinResponse)
	if err != nil {
		return err
	}
	// Deserialize `MaxResponse`:
	err = decoder.Decode(&obj.MaxResponse)
	if err != nil {
		return err
	}
	// Deserialize `OraclePubkeysData`:
	err = decoder.Decode(&obj.OraclePubkeysData)
	if err != nil {
		return err
	}
	// Deserialize `MediansData`:
	err = decoder.Decode(&obj.MediansData)
	if err != nil {
		return err
	}
	// Deserialize `CurrentPayout`:
	err = decoder.Decode(&obj.CurrentPayout)
	if err != nil {
		return err
	}
	// Deserialize `MediansFulfilled`:
	err = decoder.Decode(&obj.MediansFulfilled)
	if err != nil {
		return err
	}
	// Deserialize `ErrorsFulfilled`:
	err = decoder.Decode(&obj.ErrorsFulfilled)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorHistoryRow struct {
	// The timestamp of the sample.
	Timestamp int64

	// The value of the sample.
	Value SwitchboardDecimal
}

func (obj AggregatorHistoryRow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorHistoryRow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

type SwitchboardDecimal struct {
	// The part of a floating-point number that represents the significant digits of that number,
	// and that is multiplied by the base, 10, raised to the power of scale to give the actual value of the number.
	Mantissa ag_binary.Int128

	// The number of decimal places to move to the left to yield the actual value.
	Scale uint32
}

func (obj SwitchboardDecimal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mantissa` param:
	err = encoder.Encode(obj.Mantissa)
	if err != nil {
		return err
	}
	// Serialize `Scale` param:
	err = encoder.Encode(obj.Scale)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwitchboardDecimal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mantissa`:
	err = decoder.Decode(&obj.Mantissa)
	if err != nil {
		return err
	}
	// Deserialize `Scale`:
	err = decoder.Decode(&obj.Scale)
	if err != nil {
		return err
	}
	return nil
}

type CrankRow struct {
	// The PublicKey of the AggregatorAccountData.
	Pubkey ag_solanago.PublicKey

	// The aggregator's next available update time.
	NextTimestamp int64
}

func (obj CrankRow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `NextTimestamp` param:
	err = encoder.Encode(obj.NextTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CrankRow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `NextTimestamp`:
	err = decoder.Decode(&obj.NextTimestamp)
	if err != nil {
		return err
	}
	return nil
}

type OracleMetrics struct {
	// Number of consecutive successful update request.
	ConsecutiveSuccess uint64

	// Number of consecutive update request that resulted in an error.
	ConsecutiveError uint64

	// Number of consecutive update request that resulted in a disagreement with the accepted median result.
	ConsecutiveDisagreement uint64

	// Number of consecutive update request that were posted on-chain late and not included in an accepted result.
	ConsecutiveLateResponse uint64

	// Number of consecutive update request that resulted in a failure.
	ConsecutiveFailure uint64

	// Total number of successful update request.
	TotalSuccess ag_binary.Uint128

	// Total number of update request that resulted in an error.
	TotalError ag_binary.Uint128

	// Total number of update request that resulted in a disagreement with the accepted median result.
	TotalDisagreement ag_binary.Uint128

	// Total number of update request that were posted on-chain late and not included in an accepted result.
	TotalLateResponse ag_binary.Uint128
}

func (obj OracleMetrics) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConsecutiveSuccess` param:
	err = encoder.Encode(obj.ConsecutiveSuccess)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveError` param:
	err = encoder.Encode(obj.ConsecutiveError)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveDisagreement` param:
	err = encoder.Encode(obj.ConsecutiveDisagreement)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveLateResponse` param:
	err = encoder.Encode(obj.ConsecutiveLateResponse)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveFailure` param:
	err = encoder.Encode(obj.ConsecutiveFailure)
	if err != nil {
		return err
	}
	// Serialize `TotalSuccess` param:
	err = encoder.Encode(obj.TotalSuccess)
	if err != nil {
		return err
	}
	// Serialize `TotalError` param:
	err = encoder.Encode(obj.TotalError)
	if err != nil {
		return err
	}
	// Serialize `TotalDisagreement` param:
	err = encoder.Encode(obj.TotalDisagreement)
	if err != nil {
		return err
	}
	// Serialize `TotalLateResponse` param:
	err = encoder.Encode(obj.TotalLateResponse)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleMetrics) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConsecutiveSuccess`:
	err = decoder.Decode(&obj.ConsecutiveSuccess)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveError`:
	err = decoder.Decode(&obj.ConsecutiveError)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveDisagreement`:
	err = decoder.Decode(&obj.ConsecutiveDisagreement)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveLateResponse`:
	err = decoder.Decode(&obj.ConsecutiveLateResponse)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveFailure`:
	err = decoder.Decode(&obj.ConsecutiveFailure)
	if err != nil {
		return err
	}
	// Deserialize `TotalSuccess`:
	err = decoder.Decode(&obj.TotalSuccess)
	if err != nil {
		return err
	}
	// Deserialize `TotalError`:
	err = decoder.Decode(&obj.TotalError)
	if err != nil {
		return err
	}
	// Deserialize `TotalDisagreement`:
	err = decoder.Decode(&obj.TotalDisagreement)
	if err != nil {
		return err
	}
	// Deserialize `TotalLateResponse`:
	err = decoder.Decode(&obj.TotalLateResponse)
	if err != nil {
		return err
	}
	return nil
}

type VrfBuilder struct {
	// The OracleAccountData that is producing the randomness.
	Producer ag_solanago.PublicKey

	// The current status of the VRF verification.
	Status VrfStatus

	// The VRF proof sourced from the producer.
	ReprProof       [80]uint8
	Proof           EcvrfProofZC
	YPoint          ag_solanago.PublicKey
	Stage           uint32
	Stage1Out       EcvrfIntermediate
	R1              EdwardsPointZC
	R2              EdwardsPointZC
	Stage3Out       EcvrfIntermediate
	HPoint          EdwardsPointZC
	SReduced        Scalar
	YPointBuilder   [3]FieldElementZC
	YRistrettoPoint EdwardsPointZC
	MulRound        uint8
	HashPointsRound uint8
	MulTmp1         CompletedPointZC
	UPoint1         EdwardsPointZC
	UPoint2         EdwardsPointZC
	VPoint1         EdwardsPointZC
	VPoint2         EdwardsPointZC
	UPoint          EdwardsPointZC
	VPoint          EdwardsPointZC
	U1              FieldElementZC
	U2              FieldElementZC
	Invertee        FieldElementZC
	Y               FieldElementZC
	Z               FieldElementZC
	P1Bytes         [32]uint8
	P2Bytes         [32]uint8
	P3Bytes         [32]uint8
	P4Bytes         [32]uint8
	CPrimeHashbuf   [16]uint8
	M1              FieldElementZC
	M2              FieldElementZC

	// The number of transactions remaining to verify the VRF proof.
	TxRemaining uint32

	// Whether the VRF proof has been verified on-chain.
	Verified bool

	// The VRF proof verification result. Will be zeroized if still awaiting fulfillment.
	Result [32]uint8
}

func (obj VrfBuilder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Producer` param:
	err = encoder.Encode(obj.Producer)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `ReprProof` param:
	err = encoder.Encode(obj.ReprProof)
	if err != nil {
		return err
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	// Serialize `YPoint` param:
	err = encoder.Encode(obj.YPoint)
	if err != nil {
		return err
	}
	// Serialize `Stage` param:
	err = encoder.Encode(obj.Stage)
	if err != nil {
		return err
	}
	// Serialize `Stage1Out` param:
	err = encoder.Encode(obj.Stage1Out)
	if err != nil {
		return err
	}
	// Serialize `R1` param:
	err = encoder.Encode(obj.R1)
	if err != nil {
		return err
	}
	// Serialize `R2` param:
	err = encoder.Encode(obj.R2)
	if err != nil {
		return err
	}
	// Serialize `Stage3Out` param:
	err = encoder.Encode(obj.Stage3Out)
	if err != nil {
		return err
	}
	// Serialize `HPoint` param:
	err = encoder.Encode(obj.HPoint)
	if err != nil {
		return err
	}
	// Serialize `SReduced` param:
	err = encoder.Encode(obj.SReduced)
	if err != nil {
		return err
	}
	// Serialize `YPointBuilder` param:
	err = encoder.Encode(obj.YPointBuilder)
	if err != nil {
		return err
	}
	// Serialize `YRistrettoPoint` param:
	err = encoder.Encode(obj.YRistrettoPoint)
	if err != nil {
		return err
	}
	// Serialize `MulRound` param:
	err = encoder.Encode(obj.MulRound)
	if err != nil {
		return err
	}
	// Serialize `HashPointsRound` param:
	err = encoder.Encode(obj.HashPointsRound)
	if err != nil {
		return err
	}
	// Serialize `MulTmp1` param:
	err = encoder.Encode(obj.MulTmp1)
	if err != nil {
		return err
	}
	// Serialize `UPoint1` param:
	err = encoder.Encode(obj.UPoint1)
	if err != nil {
		return err
	}
	// Serialize `UPoint2` param:
	err = encoder.Encode(obj.UPoint2)
	if err != nil {
		return err
	}
	// Serialize `VPoint1` param:
	err = encoder.Encode(obj.VPoint1)
	if err != nil {
		return err
	}
	// Serialize `VPoint2` param:
	err = encoder.Encode(obj.VPoint2)
	if err != nil {
		return err
	}
	// Serialize `UPoint` param:
	err = encoder.Encode(obj.UPoint)
	if err != nil {
		return err
	}
	// Serialize `VPoint` param:
	err = encoder.Encode(obj.VPoint)
	if err != nil {
		return err
	}
	// Serialize `U1` param:
	err = encoder.Encode(obj.U1)
	if err != nil {
		return err
	}
	// Serialize `U2` param:
	err = encoder.Encode(obj.U2)
	if err != nil {
		return err
	}
	// Serialize `Invertee` param:
	err = encoder.Encode(obj.Invertee)
	if err != nil {
		return err
	}
	// Serialize `Y` param:
	err = encoder.Encode(obj.Y)
	if err != nil {
		return err
	}
	// Serialize `Z` param:
	err = encoder.Encode(obj.Z)
	if err != nil {
		return err
	}
	// Serialize `P1Bytes` param:
	err = encoder.Encode(obj.P1Bytes)
	if err != nil {
		return err
	}
	// Serialize `P2Bytes` param:
	err = encoder.Encode(obj.P2Bytes)
	if err != nil {
		return err
	}
	// Serialize `P3Bytes` param:
	err = encoder.Encode(obj.P3Bytes)
	if err != nil {
		return err
	}
	// Serialize `P4Bytes` param:
	err = encoder.Encode(obj.P4Bytes)
	if err != nil {
		return err
	}
	// Serialize `CPrimeHashbuf` param:
	err = encoder.Encode(obj.CPrimeHashbuf)
	if err != nil {
		return err
	}
	// Serialize `M1` param:
	err = encoder.Encode(obj.M1)
	if err != nil {
		return err
	}
	// Serialize `M2` param:
	err = encoder.Encode(obj.M2)
	if err != nil {
		return err
	}
	// Serialize `TxRemaining` param:
	err = encoder.Encode(obj.TxRemaining)
	if err != nil {
		return err
	}
	// Serialize `Verified` param:
	err = encoder.Encode(obj.Verified)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfBuilder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Producer`:
	err = decoder.Decode(&obj.Producer)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `ReprProof`:
	err = decoder.Decode(&obj.ReprProof)
	if err != nil {
		return err
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	// Deserialize `YPoint`:
	err = decoder.Decode(&obj.YPoint)
	if err != nil {
		return err
	}
	// Deserialize `Stage`:
	err = decoder.Decode(&obj.Stage)
	if err != nil {
		return err
	}
	// Deserialize `Stage1Out`:
	err = decoder.Decode(&obj.Stage1Out)
	if err != nil {
		return err
	}
	// Deserialize `R1`:
	err = decoder.Decode(&obj.R1)
	if err != nil {
		return err
	}
	// Deserialize `R2`:
	err = decoder.Decode(&obj.R2)
	if err != nil {
		return err
	}
	// Deserialize `Stage3Out`:
	err = decoder.Decode(&obj.Stage3Out)
	if err != nil {
		return err
	}
	// Deserialize `HPoint`:
	err = decoder.Decode(&obj.HPoint)
	if err != nil {
		return err
	}
	// Deserialize `SReduced`:
	err = decoder.Decode(&obj.SReduced)
	if err != nil {
		return err
	}
	// Deserialize `YPointBuilder`:
	err = decoder.Decode(&obj.YPointBuilder)
	if err != nil {
		return err
	}
	// Deserialize `YRistrettoPoint`:
	err = decoder.Decode(&obj.YRistrettoPoint)
	if err != nil {
		return err
	}
	// Deserialize `MulRound`:
	err = decoder.Decode(&obj.MulRound)
	if err != nil {
		return err
	}
	// Deserialize `HashPointsRound`:
	err = decoder.Decode(&obj.HashPointsRound)
	if err != nil {
		return err
	}
	// Deserialize `MulTmp1`:
	err = decoder.Decode(&obj.MulTmp1)
	if err != nil {
		return err
	}
	// Deserialize `UPoint1`:
	err = decoder.Decode(&obj.UPoint1)
	if err != nil {
		return err
	}
	// Deserialize `UPoint2`:
	err = decoder.Decode(&obj.UPoint2)
	if err != nil {
		return err
	}
	// Deserialize `VPoint1`:
	err = decoder.Decode(&obj.VPoint1)
	if err != nil {
		return err
	}
	// Deserialize `VPoint2`:
	err = decoder.Decode(&obj.VPoint2)
	if err != nil {
		return err
	}
	// Deserialize `UPoint`:
	err = decoder.Decode(&obj.UPoint)
	if err != nil {
		return err
	}
	// Deserialize `VPoint`:
	err = decoder.Decode(&obj.VPoint)
	if err != nil {
		return err
	}
	// Deserialize `U1`:
	err = decoder.Decode(&obj.U1)
	if err != nil {
		return err
	}
	// Deserialize `U2`:
	err = decoder.Decode(&obj.U2)
	if err != nil {
		return err
	}
	// Deserialize `Invertee`:
	err = decoder.Decode(&obj.Invertee)
	if err != nil {
		return err
	}
	// Deserialize `Y`:
	err = decoder.Decode(&obj.Y)
	if err != nil {
		return err
	}
	// Deserialize `Z`:
	err = decoder.Decode(&obj.Z)
	if err != nil {
		return err
	}
	// Deserialize `P1Bytes`:
	err = decoder.Decode(&obj.P1Bytes)
	if err != nil {
		return err
	}
	// Deserialize `P2Bytes`:
	err = decoder.Decode(&obj.P2Bytes)
	if err != nil {
		return err
	}
	// Deserialize `P3Bytes`:
	err = decoder.Decode(&obj.P3Bytes)
	if err != nil {
		return err
	}
	// Deserialize `P4Bytes`:
	err = decoder.Decode(&obj.P4Bytes)
	if err != nil {
		return err
	}
	// Deserialize `CPrimeHashbuf`:
	err = decoder.Decode(&obj.CPrimeHashbuf)
	if err != nil {
		return err
	}
	// Deserialize `M1`:
	err = decoder.Decode(&obj.M1)
	if err != nil {
		return err
	}
	// Deserialize `M2`:
	err = decoder.Decode(&obj.M2)
	if err != nil {
		return err
	}
	// Deserialize `TxRemaining`:
	err = decoder.Decode(&obj.TxRemaining)
	if err != nil {
		return err
	}
	// Deserialize `Verified`:
	err = decoder.Decode(&obj.Verified)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	return nil
}

type AccountMetaZC struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj AccountMetaZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccountMetaZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type AccountMetaBorsh struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj AccountMetaBorsh) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccountMetaBorsh) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type CallbackZC struct {
	// The program ID of the callback program being invoked.
	ProgramId ag_solanago.PublicKey

	// The accounts being used in the callback instruction.
	Accounts [32]AccountMetaZC

	// The number of accounts used in the callback
	AccountsLen uint32

	// The serialized instruction data.
	IxData [1024]uint8

	// The number of serialized bytes in the instruction data.
	IxDataLen uint32
}

func (obj CallbackZC) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	// Serialize `AccountsLen` param:
	err = encoder.Encode(obj.AccountsLen)
	if err != nil {
		return err
	}
	// Serialize `IxData` param:
	err = encoder.Encode(obj.IxData)
	if err != nil {
		return err
	}
	// Serialize `IxDataLen` param:
	err = encoder.Encode(obj.IxDataLen)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CallbackZC) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	// Deserialize `AccountsLen`:
	err = decoder.Decode(&obj.AccountsLen)
	if err != nil {
		return err
	}
	// Deserialize `IxData`:
	err = decoder.Decode(&obj.IxData)
	if err != nil {
		return err
	}
	// Deserialize `IxDataLen`:
	err = decoder.Decode(&obj.IxDataLen)
	if err != nil {
		return err
	}
	return nil
}

type VrfRound struct {
	// The alpha bytes used to calculate the VRF proof.
	Alpha [256]uint8

	// The number of bytes in the alpha buffer.
	AlphaLen uint32

	// The Slot when the VRF round was opened.
	RequestSlot uint64

	// The unix timestamp when the VRF round was opened.
	RequestTimestamp int64

	// The VRF round result. Will be zeroized if still awaiting fulfillment.
	Result [32]uint8

	// The number of builders who verified the VRF proof.
	NumVerified uint32

	// Reserved for future info.
	Ebuf [256]uint8
}

func (obj VrfRound) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Alpha` param:
	err = encoder.Encode(obj.Alpha)
	if err != nil {
		return err
	}
	// Serialize `AlphaLen` param:
	err = encoder.Encode(obj.AlphaLen)
	if err != nil {
		return err
	}
	// Serialize `RequestSlot` param:
	err = encoder.Encode(obj.RequestSlot)
	if err != nil {
		return err
	}
	// Serialize `RequestTimestamp` param:
	err = encoder.Encode(obj.RequestTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	// Serialize `NumVerified` param:
	err = encoder.Encode(obj.NumVerified)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfRound) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Alpha`:
	err = decoder.Decode(&obj.Alpha)
	if err != nil {
		return err
	}
	// Deserialize `AlphaLen`:
	err = decoder.Decode(&obj.AlphaLen)
	if err != nil {
		return err
	}
	// Deserialize `RequestSlot`:
	err = decoder.Decode(&obj.RequestSlot)
	if err != nil {
		return err
	}
	// Deserialize `RequestTimestamp`:
	err = decoder.Decode(&obj.RequestTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	// Deserialize `NumVerified`:
	err = decoder.Decode(&obj.NumVerified)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type VrfPoolRow struct {
	Timestamp int64
	Pubkey    ag_solanago.PublicKey
}

func (obj VrfPoolRow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfPoolRow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	return nil
}

type BufferRelayerRound struct {
	// Number of successful responses.
	NumSuccess uint32

	// Number of error responses.
	NumError uint32

	// Slot when the buffer relayer round was opened.
	RoundOpenSlot uint64

	// Timestamp when the buffer relayer round was opened.
	RoundOpenTimestamp int64

	// The public key of the oracle fulfilling the buffer relayer update request.
	OraclePubkey ag_solanago.PublicKey
}

func (obj BufferRelayerRound) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumSuccess` param:
	err = encoder.Encode(obj.NumSuccess)
	if err != nil {
		return err
	}
	// Serialize `NumError` param:
	err = encoder.Encode(obj.NumError)
	if err != nil {
		return err
	}
	// Serialize `RoundOpenSlot` param:
	err = encoder.Encode(obj.RoundOpenSlot)
	if err != nil {
		return err
	}
	// Serialize `RoundOpenTimestamp` param:
	err = encoder.Encode(obj.RoundOpenTimestamp)
	if err != nil {
		return err
	}
	// Serialize `OraclePubkey` param:
	err = encoder.Encode(obj.OraclePubkey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferRelayerRound) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumSuccess`:
	err = decoder.Decode(&obj.NumSuccess)
	if err != nil {
		return err
	}
	// Deserialize `NumError`:
	err = decoder.Decode(&obj.NumError)
	if err != nil {
		return err
	}
	// Deserialize `RoundOpenSlot`:
	err = decoder.Decode(&obj.RoundOpenSlot)
	if err != nil {
		return err
	}
	// Deserialize `RoundOpenTimestamp`:
	err = decoder.Decode(&obj.RoundOpenTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `OraclePubkey`:
	err = decoder.Decode(&obj.OraclePubkey)
	if err != nil {
		return err
	}
	return nil
}

type Lanes ag_binary.BorshEnum

const (
	LanesC Lanes = iota
	LanesD
	LanesAB
	LanesAC
	LanesCD
	LanesAD
	LanesBC
	LanesABCD
)

func (value Lanes) String() string {
	switch value {
	case LanesC:
		return "C"
	case LanesD:
		return "D"
	case LanesAB:
		return "AB"
	case LanesAC:
		return "AC"
	case LanesCD:
		return "CD"
	case LanesAD:
		return "AD"
	case LanesBC:
		return "BC"
	case LanesABCD:
		return "ABCD"
	default:
		return ""
	}
}

type Shuffle ag_binary.BorshEnum

const (
	ShuffleAAAA Shuffle = iota
	ShuffleBBBB
	ShuffleCACA
	ShuffleDBBD
	ShuffleADDA
	ShuffleCBCB
	ShuffleABAB
	ShuffleBADC
	ShuffleBACD
	ShuffleABDC
)

func (value Shuffle) String() string {
	switch value {
	case ShuffleAAAA:
		return "AAAA"
	case ShuffleBBBB:
		return "BBBB"
	case ShuffleCACA:
		return "CACA"
	case ShuffleDBBD:
		return "DBBD"
	case ShuffleADDA:
		return "ADDA"
	case ShuffleCBCB:
		return "CBCB"
	case ShuffleABAB:
		return "ABAB"
	case ShuffleBADC:
		return "BADC"
	case ShuffleBACD:
		return "BACD"
	case ShuffleABDC:
		return "ABDC"
	default:
		return ""
	}
}


type Error ag_binary.BorshEnum

const (
	ErrorInvalidPublicKey Error = iota
	ErrorSerializationError
	ErrorDeserializationError
	ErrorInvalidDataError
)

func (value Error) String() string {
	switch value {
	case ErrorInvalidPublicKey:
		return "InvalidPublicKey"
	case ErrorSerializationError:
		return "SerializationError"
	case ErrorDeserializationError:
		return "DeserializationError"
	case ErrorInvalidDataError:
		return "InvalidDataError"
	default:
		return ""
	}
}

type VerificationStatus ag_binary.BorshEnum

const (
	VerificationStatusNone VerificationStatus = iota
	VerificationStatusVerificationPending
	VerificationStatusVerificationFailure
	VerificationStatusVerificationSuccess
	VerificationStatusVerificationOverride
)

func (value VerificationStatus) String() string {
	switch value {
	case VerificationStatusNone:
		return "None"
	case VerificationStatusVerificationPending:
		return "VerificationPending"
	case VerificationStatusVerificationFailure:
		return "VerificationFailure"
	case VerificationStatusVerificationSuccess:
		return "VerificationSuccess"
	case VerificationStatusVerificationOverride:
		return "VerificationOverride"
	default:
		return ""
	}
}

type AggregatorResolutionMode ag_binary.BorshEnum

const (
	AggregatorResolutionModeModeRoundResolution AggregatorResolutionMode = iota
	AggregatorResolutionModeModeSlidingResolution
)

func (value AggregatorResolutionMode) String() string {
	switch value {
	case AggregatorResolutionModeModeRoundResolution:
		return "ModeRoundResolution"
	case AggregatorResolutionModeModeSlidingResolution:
		return "ModeSlidingResolution"
	default:
		return ""
	}
}

type SwitchboardPermission ag_binary.BorshEnum

const (
	SwitchboardPermissionPermitOracleHeartbeat SwitchboardPermission = iota
	SwitchboardPermissionPermitOracleQueueUsage
	SwitchboardPermissionPermitVrfRequests
)

func (value SwitchboardPermission) String() string {
	switch value {
	case SwitchboardPermissionPermitOracleHeartbeat:
		return "PermitOracleHeartbeat"
	case SwitchboardPermissionPermitOracleQueueUsage:
		return "PermitOracleQueueUsage"
	case SwitchboardPermissionPermitVrfRequests:
		return "PermitVrfRequests"
	default:
		return ""
	}
}

type OracleResponseType ag_binary.BorshEnum

const (
	OracleResponseTypeTypeSuccess OracleResponseType = iota
	OracleResponseTypeTypeError
	OracleResponseTypeTypeDisagreement
	OracleResponseTypeTypeNoResponse
)

func (value OracleResponseType) String() string {
	switch value {
	case OracleResponseTypeTypeSuccess:
		return "TypeSuccess"
	case OracleResponseTypeTypeError:
		return "TypeError"
	case OracleResponseTypeTypeDisagreement:
		return "TypeDisagreement"
	case OracleResponseTypeTypeNoResponse:
		return "TypeNoResponse"
	default:
		return ""
	}
}

type VrfStatus ag_binary.BorshEnum

const (
	VrfStatusStatusNone VrfStatus = iota
	VrfStatusStatusRequesting
	VrfStatusStatusVerifying
	VrfStatusStatusVerified
	VrfStatusStatusCallbackSuccess
	VrfStatusStatusVerifyFailure
)

func (value VrfStatus) String() string {
	switch value {
	case VrfStatusStatusNone:
		return "StatusNone"
	case VrfStatusStatusRequesting:
		return "StatusRequesting"
	case VrfStatusStatusVerifying:
		return "StatusVerifying"
	case VrfStatusStatusVerified:
		return "StatusVerified"
	case VrfStatusStatusCallbackSuccess:
		return "StatusCallbackSuccess"
	case VrfStatusStatusVerifyFailure:
		return "StatusVerifyFailure"
	default:
		return ""
	}
}
