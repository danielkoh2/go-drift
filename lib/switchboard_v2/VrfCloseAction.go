// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfCloseAction is the `vrfCloseAction` instruction.
type VrfCloseAction struct {
	Params *VrfCloseParams

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] vrf
	//
	// [2] = [WRITE] permission
	//
	// [3] = [] oracleQueue
	//
	// [4] = [] queueAuthority
	//
	// [5] = [] programState
	//
	// [6] = [WRITE] escrow
	//
	// [7] = [] solDest
	//
	// [8] = [WRITE] escrowDest
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfCloseActionInstructionBuilder creates a new `VrfCloseAction` instruction builder.
func NewVrfCloseActionInstructionBuilder() *VrfCloseAction {
	nd := &VrfCloseAction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfCloseAction) SetParams(params VrfCloseParams) *VrfCloseAction {
	inst.Params = &params
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *VrfCloseAction) SetAuthorityAccount(authority ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *VrfCloseAction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVrfAccount sets the "vrf" account.
func (inst *VrfCloseAction) SetVrfAccount(vrf ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vrf).WRITE()
	return inst
}

// GetVrfAccount gets the "vrf" account.
func (inst *VrfCloseAction) GetVrfAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPermissionAccount sets the "permission" account.
func (inst *VrfCloseAction) SetPermissionAccount(permission ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(permission).WRITE()
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *VrfCloseAction) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *VrfCloseAction) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracleQueue)
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *VrfCloseAction) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQueueAuthorityAccount sets the "queueAuthority" account.
func (inst *VrfCloseAction) SetQueueAuthorityAccount(queueAuthority ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(queueAuthority)
	return inst
}

// GetQueueAuthorityAccount gets the "queueAuthority" account.
func (inst *VrfCloseAction) GetQueueAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *VrfCloseAction) SetProgramStateAccount(programState ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *VrfCloseAction) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *VrfCloseAction) SetEscrowAccount(escrow ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *VrfCloseAction) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSolDestAccount sets the "solDest" account.
func (inst *VrfCloseAction) SetSolDestAccount(solDest ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(solDest)
	return inst
}

// GetSolDestAccount gets the "solDest" account.
func (inst *VrfCloseAction) GetSolDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEscrowDestAccount sets the "escrowDest" account.
func (inst *VrfCloseAction) SetEscrowDestAccount(escrowDest ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(escrowDest).WRITE()
	return inst
}

// GetEscrowDestAccount gets the "escrowDest" account.
func (inst *VrfCloseAction) GetEscrowDestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *VrfCloseAction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *VrfCloseAction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *VrfCloseAction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst VrfCloseAction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfCloseAction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfCloseAction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfCloseAction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vrf is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Permission is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QueueAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SolDest is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EscrowDest is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *VrfCloseAction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfCloseAction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           vrf", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    permission", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   oracleQueue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("queueAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  programState", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        escrow", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       solDest", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    escrowDest", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj VrfCloseAction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfCloseAction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfCloseActionInstruction declares a new VrfCloseAction instruction with the provided parameters and accounts.
func NewVrfCloseActionInstruction(
	// Parameters:
	params VrfCloseParams,
	// Accounts:
	authority ag_solanago.PublicKey,
	vrf ag_solanago.PublicKey,
	permission ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	queueAuthority ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	solDest ag_solanago.PublicKey,
	escrowDest ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *VrfCloseAction {
	return NewVrfCloseActionInstructionBuilder().
		SetParams(params).
		SetAuthorityAccount(authority).
		SetVrfAccount(vrf).
		SetPermissionAccount(permission).
		SetOracleQueueAccount(oracleQueue).
		SetQueueAuthorityAccount(queueAuthority).
		SetProgramStateAccount(programState).
		SetEscrowAccount(escrow).
		SetSolDestAccount(solDest).
		SetEscrowDestAccount(escrowDest).
		SetTokenProgramAccount(tokenProgram)
}
