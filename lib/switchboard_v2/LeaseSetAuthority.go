// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// LeaseSetAuthority is the `leaseSetAuthority` instruction.
type LeaseSetAuthority struct {
	Params *LeaseSetAuthorityParams

	// [0] = [WRITE] lease
	//
	// [1] = [SIGNER] withdrawAuthority
	//
	// [2] = [] newAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLeaseSetAuthorityInstructionBuilder creates a new `LeaseSetAuthority` instruction builder.
func NewLeaseSetAuthorityInstructionBuilder() *LeaseSetAuthority {
	nd := &LeaseSetAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *LeaseSetAuthority) SetParams(params LeaseSetAuthorityParams) *LeaseSetAuthority {
	inst.Params = &params
	return inst
}

// SetLeaseAccount sets the "lease" account.
func (inst *LeaseSetAuthority) SetLeaseAccount(lease ag_solanago.PublicKey) *LeaseSetAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lease).WRITE()
	return inst
}

// GetLeaseAccount gets the "lease" account.
func (inst *LeaseSetAuthority) GetLeaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWithdrawAuthorityAccount sets the "withdrawAuthority" account.
func (inst *LeaseSetAuthority) SetWithdrawAuthorityAccount(withdrawAuthority ag_solanago.PublicKey) *LeaseSetAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(withdrawAuthority).SIGNER()
	return inst
}

// GetWithdrawAuthorityAccount gets the "withdrawAuthority" account.
func (inst *LeaseSetAuthority) GetWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNewAuthorityAccount sets the "newAuthority" account.
func (inst *LeaseSetAuthority) SetNewAuthorityAccount(newAuthority ag_solanago.PublicKey) *LeaseSetAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(newAuthority)
	return inst
}

// GetNewAuthorityAccount gets the "newAuthority" account.
func (inst *LeaseSetAuthority) GetNewAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst LeaseSetAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_LeaseSetAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst LeaseSetAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *LeaseSetAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Lease is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.NewAuthority is not set")
		}
	}
	return nil
}

func (inst *LeaseSetAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("LeaseSetAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            lease", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("withdrawAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     newAuthority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj LeaseSetAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *LeaseSetAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewLeaseSetAuthorityInstruction declares a new LeaseSetAuthority instruction with the provided parameters and accounts.
func NewLeaseSetAuthorityInstruction(
	// Parameters:
	params LeaseSetAuthorityParams,
	// Accounts:
	lease ag_solanago.PublicKey,
	withdrawAuthority ag_solanago.PublicKey,
	newAuthority ag_solanago.PublicKey) *LeaseSetAuthority {
	return NewLeaseSetAuthorityInstructionBuilder().
		SetParams(params).
		SetLeaseAccount(lease).
		SetWithdrawAuthorityAccount(withdrawAuthority).
		SetNewAuthorityAccount(newAuthority)
}
