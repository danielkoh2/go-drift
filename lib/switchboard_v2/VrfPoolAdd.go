// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfPoolAdd is the `vrfPoolAdd` instruction.
type VrfPoolAdd struct {
	Params *VrfPoolAddParams

	// [0] = [] authority
	//
	// [1] = [WRITE] vrfPool
	//
	// [2] = [WRITE] vrfLite
	//
	// [3] = [] queue
	//
	// [4] = [] permission
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfPoolAddInstructionBuilder creates a new `VrfPoolAdd` instruction builder.
func NewVrfPoolAddInstructionBuilder() *VrfPoolAdd {
	nd := &VrfPoolAdd{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfPoolAdd) SetParams(params VrfPoolAddParams) *VrfPoolAdd {
	inst.Params = &params
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *VrfPoolAdd) SetAuthorityAccount(authority ag_solanago.PublicKey) *VrfPoolAdd {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *VrfPoolAdd) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVrfPoolAccount sets the "vrfPool" account.
func (inst *VrfPoolAdd) SetVrfPoolAccount(vrfPool ag_solanago.PublicKey) *VrfPoolAdd {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vrfPool).WRITE()
	return inst
}

// GetVrfPoolAccount gets the "vrfPool" account.
func (inst *VrfPoolAdd) GetVrfPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVrfLiteAccount sets the "vrfLite" account.
func (inst *VrfPoolAdd) SetVrfLiteAccount(vrfLite ag_solanago.PublicKey) *VrfPoolAdd {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vrfLite).WRITE()
	return inst
}

// GetVrfLiteAccount gets the "vrfLite" account.
func (inst *VrfPoolAdd) GetVrfLiteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQueueAccount sets the "queue" account.
func (inst *VrfPoolAdd) SetQueueAccount(queue ag_solanago.PublicKey) *VrfPoolAdd {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(queue)
	return inst
}

// GetQueueAccount gets the "queue" account.
func (inst *VrfPoolAdd) GetQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPermissionAccount sets the "permission" account.
func (inst *VrfPoolAdd) SetPermissionAccount(permission ag_solanago.PublicKey) *VrfPoolAdd {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(permission)
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *VrfPoolAdd) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst VrfPoolAdd) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfPoolAdd,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfPoolAdd) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfPoolAdd) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VrfPool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VrfLite is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Queue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Permission is not set")
		}
	}
	return nil
}

func (inst *VrfPoolAdd) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfPoolAdd")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   vrfPool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   vrfLite", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     queue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("permission", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj VrfPoolAdd) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfPoolAdd) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfPoolAddInstruction declares a new VrfPoolAdd instruction with the provided parameters and accounts.
func NewVrfPoolAddInstruction(
	// Parameters:
	params VrfPoolAddParams,
	// Accounts:
	authority ag_solanago.PublicKey,
	vrfPool ag_solanago.PublicKey,
	vrfLite ag_solanago.PublicKey,
	queue ag_solanago.PublicKey,
	permission ag_solanago.PublicKey) *VrfPoolAdd {
	return NewVrfPoolAddInstructionBuilder().
		SetParams(params).
		SetAuthorityAccount(authority).
		SetVrfPoolAccount(vrfPool).
		SetVrfLiteAccount(vrfLite).
		SetQueueAccount(queue).
		SetPermissionAccount(permission)
}
