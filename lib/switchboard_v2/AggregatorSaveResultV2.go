// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AggregatorSaveResultV2 is the `aggregatorSaveResultV2` instruction.
type AggregatorSaveResultV2 struct {
	Params *AggregatorSaveResultParams

	// [0] = [WRITE] aggregator
	//
	// [1] = [WRITE] oracle
	//
	// [2] = [SIGNER] oracleAuthority
	//
	// [3] = [] oracleQueue
	//
	// [4] = [] queueAuthority
	//
	// [5] = [WRITE] feedPermission
	//
	// [6] = [] oraclePermission
	//
	// [7] = [WRITE] lease
	//
	// [8] = [WRITE] escrow
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] programState
	//
	// [11] = [WRITE] historyBuffer
	//
	// [12] = [] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAggregatorSaveResultV2InstructionBuilder creates a new `AggregatorSaveResultV2` instruction builder.
func NewAggregatorSaveResultV2InstructionBuilder() *AggregatorSaveResultV2 {
	nd := &AggregatorSaveResultV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *AggregatorSaveResultV2) SetParams(params AggregatorSaveResultParams) *AggregatorSaveResultV2 {
	inst.Params = &params
	return inst
}

// SetAggregatorAccount sets the "aggregator" account.
func (inst *AggregatorSaveResultV2) SetAggregatorAccount(aggregator ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(aggregator).WRITE()
	return inst
}

// GetAggregatorAccount gets the "aggregator" account.
func (inst *AggregatorSaveResultV2) GetAggregatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *AggregatorSaveResultV2) SetOracleAccount(oracle ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *AggregatorSaveResultV2) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleAuthorityAccount sets the "oracleAuthority" account.
func (inst *AggregatorSaveResultV2) SetOracleAuthorityAccount(oracleAuthority ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracleAuthority).SIGNER()
	return inst
}

// GetOracleAuthorityAccount gets the "oracleAuthority" account.
func (inst *AggregatorSaveResultV2) GetOracleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *AggregatorSaveResultV2) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracleQueue)
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *AggregatorSaveResultV2) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQueueAuthorityAccount sets the "queueAuthority" account.
func (inst *AggregatorSaveResultV2) SetQueueAuthorityAccount(queueAuthority ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(queueAuthority)
	return inst
}

// GetQueueAuthorityAccount gets the "queueAuthority" account.
func (inst *AggregatorSaveResultV2) GetQueueAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeedPermissionAccount sets the "feedPermission" account.
func (inst *AggregatorSaveResultV2) SetFeedPermissionAccount(feedPermission ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feedPermission).WRITE()
	return inst
}

// GetFeedPermissionAccount gets the "feedPermission" account.
func (inst *AggregatorSaveResultV2) GetFeedPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOraclePermissionAccount sets the "oraclePermission" account.
func (inst *AggregatorSaveResultV2) SetOraclePermissionAccount(oraclePermission ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(oraclePermission)
	return inst
}

// GetOraclePermissionAccount gets the "oraclePermission" account.
func (inst *AggregatorSaveResultV2) GetOraclePermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetLeaseAccount sets the "lease" account.
func (inst *AggregatorSaveResultV2) SetLeaseAccount(lease ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(lease).WRITE()
	return inst
}

// GetLeaseAccount gets the "lease" account.
func (inst *AggregatorSaveResultV2) GetLeaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *AggregatorSaveResultV2) SetEscrowAccount(escrow ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *AggregatorSaveResultV2) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AggregatorSaveResultV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AggregatorSaveResultV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *AggregatorSaveResultV2) SetProgramStateAccount(programState ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *AggregatorSaveResultV2) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetHistoryBufferAccount sets the "historyBuffer" account.
func (inst *AggregatorSaveResultV2) SetHistoryBufferAccount(historyBuffer ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(historyBuffer).WRITE()
	return inst
}

// GetHistoryBufferAccount gets the "historyBuffer" account.
func (inst *AggregatorSaveResultV2) GetHistoryBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMintAccount sets the "mint" account.
func (inst *AggregatorSaveResultV2) SetMintAccount(mint ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *AggregatorSaveResultV2) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst AggregatorSaveResultV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AggregatorSaveResultV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AggregatorSaveResultV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AggregatorSaveResultV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Aggregator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OracleAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QueueAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeedPermission is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OraclePermission is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Lease is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.HistoryBuffer is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *AggregatorSaveResultV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AggregatorSaveResultV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      aggregator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" oracleAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     oracleQueue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  queueAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  feedPermission", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("oraclePermission", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           lease", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          escrow", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    programState", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   historyBuffer", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            mint", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj AggregatorSaveResultV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AggregatorSaveResultV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewAggregatorSaveResultV2Instruction declares a new AggregatorSaveResultV2 instruction with the provided parameters and accounts.
func NewAggregatorSaveResultV2Instruction(
	// Parameters:
	params AggregatorSaveResultParams,
	// Accounts:
	aggregator ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	oracleAuthority ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	queueAuthority ag_solanago.PublicKey,
	feedPermission ag_solanago.PublicKey,
	oraclePermission ag_solanago.PublicKey,
	lease ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	historyBuffer ag_solanago.PublicKey,
	mint ag_solanago.PublicKey) *AggregatorSaveResultV2 {
	return NewAggregatorSaveResultV2InstructionBuilder().
		SetParams(params).
		SetAggregatorAccount(aggregator).
		SetOracleAccount(oracle).
		SetOracleAuthorityAccount(oracleAuthority).
		SetOracleQueueAccount(oracleQueue).
		SetQueueAuthorityAccount(queueAuthority).
		SetFeedPermissionAccount(feedPermission).
		SetOraclePermissionAccount(oraclePermission).
		SetLeaseAccount(lease).
		SetEscrowAccount(escrow).
		SetTokenProgramAccount(tokenProgram).
		SetProgramStateAccount(programState).
		SetHistoryBufferAccount(historyBuffer).
		SetMintAccount(mint)
}
