// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfRequestRandomness is the `vrfRequestRandomness` instruction.
type VrfRequestRandomness struct {
	Params *VrfRequestRandomnessParams

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] vrf
	//
	// [2] = [WRITE] oracleQueue
	//
	// [3] = [] queueAuthority
	//
	// [4] = [] dataBuffer
	//
	// [5] = [WRITE] permission
	//
	// [6] = [WRITE] escrow
	//
	// [7] = [WRITE] payerWallet
	//
	// [8] = [SIGNER] payerAuthority
	//
	// [9] = [] recentBlockhashes
	//
	// [10] = [] programState
	//
	// [11] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfRequestRandomnessInstructionBuilder creates a new `VrfRequestRandomness` instruction builder.
func NewVrfRequestRandomnessInstructionBuilder() *VrfRequestRandomness {
	nd := &VrfRequestRandomness{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfRequestRandomness) SetParams(params VrfRequestRandomnessParams) *VrfRequestRandomness {
	inst.Params = &params
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *VrfRequestRandomness) SetAuthorityAccount(authority ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *VrfRequestRandomness) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVrfAccount sets the "vrf" account.
func (inst *VrfRequestRandomness) SetVrfAccount(vrf ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vrf).WRITE()
	return inst
}

// GetVrfAccount gets the "vrf" account.
func (inst *VrfRequestRandomness) GetVrfAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *VrfRequestRandomness) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracleQueue).WRITE()
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *VrfRequestRandomness) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQueueAuthorityAccount sets the "queueAuthority" account.
func (inst *VrfRequestRandomness) SetQueueAuthorityAccount(queueAuthority ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(queueAuthority)
	return inst
}

// GetQueueAuthorityAccount gets the "queueAuthority" account.
func (inst *VrfRequestRandomness) GetQueueAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDataBufferAccount sets the "dataBuffer" account.
func (inst *VrfRequestRandomness) SetDataBufferAccount(dataBuffer ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(dataBuffer)
	return inst
}

// GetDataBufferAccount gets the "dataBuffer" account.
func (inst *VrfRequestRandomness) GetDataBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPermissionAccount sets the "permission" account.
func (inst *VrfRequestRandomness) SetPermissionAccount(permission ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(permission).WRITE()
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *VrfRequestRandomness) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *VrfRequestRandomness) SetEscrowAccount(escrow ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *VrfRequestRandomness) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPayerWalletAccount sets the "payerWallet" account.
func (inst *VrfRequestRandomness) SetPayerWalletAccount(payerWallet ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(payerWallet).WRITE()
	return inst
}

// GetPayerWalletAccount gets the "payerWallet" account.
func (inst *VrfRequestRandomness) GetPayerWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPayerAuthorityAccount sets the "payerAuthority" account.
func (inst *VrfRequestRandomness) SetPayerAuthorityAccount(payerAuthority ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(payerAuthority).SIGNER()
	return inst
}

// GetPayerAuthorityAccount gets the "payerAuthority" account.
func (inst *VrfRequestRandomness) GetPayerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRecentBlockhashesAccount sets the "recentBlockhashes" account.
func (inst *VrfRequestRandomness) SetRecentBlockhashesAccount(recentBlockhashes ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(recentBlockhashes)
	return inst
}

// GetRecentBlockhashesAccount gets the "recentBlockhashes" account.
func (inst *VrfRequestRandomness) GetRecentBlockhashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *VrfRequestRandomness) SetProgramStateAccount(programState ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *VrfRequestRandomness) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *VrfRequestRandomness) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *VrfRequestRandomness {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *VrfRequestRandomness) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst VrfRequestRandomness) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfRequestRandomness,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfRequestRandomness) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfRequestRandomness) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vrf is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QueueAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DataBuffer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Permission is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PayerWallet is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PayerAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RecentBlockhashes is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *VrfRequestRandomness) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfRequestRandomness")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              vrf", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      oracleQueue", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   queueAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       dataBuffer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       permission", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           escrow", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      payerWallet", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   payerAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("recentBlockhashes", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     programState", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj VrfRequestRandomness) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfRequestRandomness) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfRequestRandomnessInstruction declares a new VrfRequestRandomness instruction with the provided parameters and accounts.
func NewVrfRequestRandomnessInstruction(
	// Parameters:
	params VrfRequestRandomnessParams,
	// Accounts:
	authority ag_solanago.PublicKey,
	vrf ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	queueAuthority ag_solanago.PublicKey,
	dataBuffer ag_solanago.PublicKey,
	permission ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	payerWallet ag_solanago.PublicKey,
	payerAuthority ag_solanago.PublicKey,
	recentBlockhashes ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *VrfRequestRandomness {
	return NewVrfRequestRandomnessInstructionBuilder().
		SetParams(params).
		SetAuthorityAccount(authority).
		SetVrfAccount(vrf).
		SetOracleQueueAccount(oracleQueue).
		SetQueueAuthorityAccount(queueAuthority).
		SetDataBufferAccount(dataBuffer).
		SetPermissionAccount(permission).
		SetEscrowAccount(escrow).
		SetPayerWalletAccount(payerWallet).
		SetPayerAuthorityAccount(payerAuthority).
		SetRecentBlockhashesAccount(recentBlockhashes).
		SetProgramStateAccount(programState).
		SetTokenProgramAccount(tokenProgram)
}
