// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PermissionInit is the `permissionInit` instruction.
type PermissionInit struct {
	Params *PermissionInitParams

	// [0] = [WRITE] permission
	//
	// [1] = [] authority
	//
	// [2] = [] granter
	//
	// [3] = [] grantee
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPermissionInitInstructionBuilder creates a new `PermissionInit` instruction builder.
func NewPermissionInitInstructionBuilder() *PermissionInit {
	nd := &PermissionInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *PermissionInit) SetParams(params PermissionInitParams) *PermissionInit {
	inst.Params = &params
	return inst
}

// SetPermissionAccount sets the "permission" account.
func (inst *PermissionInit) SetPermissionAccount(permission ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(permission).WRITE()
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *PermissionInit) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *PermissionInit) SetAuthorityAccount(authority ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *PermissionInit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGranterAccount sets the "granter" account.
func (inst *PermissionInit) SetGranterAccount(granter ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(granter)
	return inst
}

// GetGranterAccount gets the "granter" account.
func (inst *PermissionInit) GetGranterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGranteeAccount sets the "grantee" account.
func (inst *PermissionInit) SetGranteeAccount(grantee ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(grantee)
	return inst
}

// GetGranteeAccount gets the "grantee" account.
func (inst *PermissionInit) GetGranteeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *PermissionInit) SetPayerAccount(payer ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *PermissionInit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *PermissionInit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *PermissionInit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *PermissionInit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst PermissionInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PermissionInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PermissionInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PermissionInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Permission is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Granter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Grantee is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *PermissionInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PermissionInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   permission", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      granter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      grantee", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj PermissionInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PermissionInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewPermissionInitInstruction declares a new PermissionInit instruction with the provided parameters and accounts.
func NewPermissionInitInstruction(
	// Parameters:
	params PermissionInitParams,
	// Accounts:
	permission ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	granter ag_solanago.PublicKey,
	grantee ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *PermissionInit {
	return NewPermissionInitInstructionBuilder().
		SetParams(params).
		SetPermissionAccount(permission).
		SetAuthorityAccount(authority).
		SetGranterAccount(granter).
		SetGranteeAccount(grantee).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
