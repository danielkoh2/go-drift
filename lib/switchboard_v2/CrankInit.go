// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CrankInit is the `crankInit` instruction.
type CrankInit struct {
	Params *CrankInitParams

	// [0] = [WRITE, SIGNER] crank
	//
	// [1] = [] queue
	//
	// [2] = [WRITE] buffer
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCrankInitInstructionBuilder creates a new `CrankInit` instruction builder.
func NewCrankInitInstructionBuilder() *CrankInit {
	nd := &CrankInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *CrankInit) SetParams(params CrankInitParams) *CrankInit {
	inst.Params = &params
	return inst
}

// SetCrankAccount sets the "crank" account.
func (inst *CrankInit) SetCrankAccount(crank ag_solanago.PublicKey) *CrankInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(crank).WRITE().SIGNER()
	return inst
}

// GetCrankAccount gets the "crank" account.
func (inst *CrankInit) GetCrankAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQueueAccount sets the "queue" account.
func (inst *CrankInit) SetQueueAccount(queue ag_solanago.PublicKey) *CrankInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(queue)
	return inst
}

// GetQueueAccount gets the "queue" account.
func (inst *CrankInit) GetQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBufferAccount sets the "buffer" account.
func (inst *CrankInit) SetBufferAccount(buffer ag_solanago.PublicKey) *CrankInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(buffer).WRITE()
	return inst
}

// GetBufferAccount gets the "buffer" account.
func (inst *CrankInit) GetBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *CrankInit) SetPayerAccount(payer ag_solanago.PublicKey) *CrankInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CrankInit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CrankInit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CrankInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CrankInit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CrankInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CrankInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CrankInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CrankInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Crank is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Queue is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Buffer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CrankInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CrankInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        crank", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        queue", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       buffer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CrankInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CrankInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCrankInitInstruction declares a new CrankInit instruction with the provided parameters and accounts.
func NewCrankInitInstruction(
	// Parameters:
	params CrankInitParams,
	// Accounts:
	crank ag_solanago.PublicKey,
	queue ag_solanago.PublicKey,
	buffer ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CrankInit {
	return NewCrankInitInstructionBuilder().
		SetParams(params).
		SetCrankAccount(crank).
		SetQueueAccount(queue).
		SetBufferAccount(buffer).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
