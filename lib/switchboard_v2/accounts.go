// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type SbState struct {
	// The account authority permitted to make account changes.
	Authority ag_solanago.PublicKey

	// The token mint used for oracle rewards, aggregator leases, and other reward incentives.
	TokenMint ag_solanago.PublicKey

	// Token vault used by the program to receive kickbacks.
	TokenVault ag_solanago.PublicKey

	// The token mint used by the DAO.
	DaoMint ag_solanago.PublicKey

	// The PDA bump to derive the pubkey.
	Bump uint8

	// Permitted enclave measurements
	MrEnclaves [6][32]uint8

	// Reserved for future info.
	Ebuf [799]uint8
}

var SbStateDiscriminator = [8]byte{159, 42, 192, 191, 139, 62, 168, 28}

func (obj SbState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SbStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenVault` param:
	err = encoder.Encode(obj.TokenVault)
	if err != nil {
		return err
	}
	// Serialize `DaoMint` param:
	err = encoder.Encode(obj.DaoMint)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `MrEnclaves` param:
	err = encoder.Encode(obj.MrEnclaves)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SbState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SbStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[159 42 192 191 139 62 168 28]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault`:
	err = decoder.Decode(&obj.TokenVault)
	if err != nil {
		return err
	}
	// Deserialize `DaoMint`:
	err = decoder.Decode(&obj.DaoMint)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `MrEnclaves`:
	err = decoder.Decode(&obj.MrEnclaves)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type TaskSpecRecord struct {
	Hash Hash
}

var TaskSpecRecordDiscriminator = [8]byte{202, 10, 194, 236, 111, 47, 234, 48}

func (obj TaskSpecRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TaskSpecRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Hash` param:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TaskSpecRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TaskSpecRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[202 10 194 236 111 47 234 48]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

type AggregatorAccountData struct {
	// Name of the aggregator to store on-chain.
	Name [32]uint8

	// Metadata of the aggregator to store on-chain.
	Metadata [128]uint8

	// Reserved.
	Reserved1 [32]uint8

	// Pubkey of the queue the aggregator belongs to.
	QueuePubkey ag_solanago.PublicKey

	// CONFIGS
	// Number of oracles assigned to an update request.
	OracleRequestBatchSize uint32

	// Minimum number of oracle responses required before a round is validated.
	MinOracleResults uint32

	// Minimum number of job results before an oracle accepts a result.
	MinJobResults uint32

	// Minimum number of seconds required between aggregator rounds.
	MinUpdateDelaySeconds uint32

	// Unix timestamp for which no feed update will occur before.
	StartAfter int64

	// Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses.
	VarianceThreshold SwitchboardDecimal

	// Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles.
	ForceReportPeriod int64

	// Timestamp when the feed is no longer needed.
	Expiration int64

	// Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue.
	ConsecutiveFailureCount uint64

	// Timestamp when the next update request will be available.
	NextAllowedUpdateTime int64

	// Flag for whether an aggregators configuration is locked for editing.
	IsLocked bool

	// Optional, public key of the crank the aggregator is currently using. Event based feeds do not need a crank.
	CrankPubkey ag_solanago.PublicKey

	// Latest confirmed update request result that has been accepted as valid.
	LatestConfirmedRound AggregatorRound

	// Oracle results from the current round of update request that has not been accepted as valid yet.
	CurrentRound AggregatorRound

	// List of public keys containing the job definitions for how data is sourced off-chain by oracles.
	JobPubkeysData [16]ag_solanago.PublicKey

	// Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment.
	JobHashes [16]Hash

	// Number of jobs assigned to an oracle.
	JobPubkeysSize uint32

	// Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment.
	JobsChecksum [32]uint8

	// The account delegated as the authority for making account changes.
	Authority ag_solanago.PublicKey

	// Optional, public key of a history buffer account storing the last N accepted results and their timestamps.
	HistoryBuffer ag_solanago.PublicKey

	// The previous confirmed round result.
	PreviousConfirmedRoundResult SwitchboardDecimal

	// The slot when the previous confirmed round was opened.
	PreviousConfirmedRoundSlot uint64

	// Whether an aggregator is permitted to join a crank.
	DisableCrank bool

	// Job weights used for the weighted median of the aggregator's assigned job accounts.
	JobWeights [16]uint8

	// Unix timestamp when the feed was created.
	CreationTimestamp int64

	// Use sliding window or round based resolution
	// NOTE: This changes result propogation in latest_round_result
	ResolutionMode           AggregatorResolutionMode
	BasePriorityFee          uint32
	PriorityFeeBump          uint32
	PriorityFeeBumpPeriod    uint32
	MaxPriorityFeeMultiplier uint32
	ParentFunction           ag_solanago.PublicKey

	// Reserved for future info.
	Ebuf [90]uint8
}

var AggregatorAccountDataDiscriminator = [8]byte{217, 230, 65, 101, 201, 162, 27, 125}

func (obj AggregatorAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AggregatorAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Reserved1` param:
	err = encoder.Encode(obj.Reserved1)
	if err != nil {
		return err
	}
	// Serialize `QueuePubkey` param:
	err = encoder.Encode(obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Serialize `OracleRequestBatchSize` param:
	err = encoder.Encode(obj.OracleRequestBatchSize)
	if err != nil {
		return err
	}
	// Serialize `MinOracleResults` param:
	err = encoder.Encode(obj.MinOracleResults)
	if err != nil {
		return err
	}
	// Serialize `MinJobResults` param:
	err = encoder.Encode(obj.MinJobResults)
	if err != nil {
		return err
	}
	// Serialize `MinUpdateDelaySeconds` param:
	err = encoder.Encode(obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Serialize `StartAfter` param:
	err = encoder.Encode(obj.StartAfter)
	if err != nil {
		return err
	}
	// Serialize `VarianceThreshold` param:
	err = encoder.Encode(obj.VarianceThreshold)
	if err != nil {
		return err
	}
	// Serialize `ForceReportPeriod` param:
	err = encoder.Encode(obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveFailureCount` param:
	err = encoder.Encode(obj.ConsecutiveFailureCount)
	if err != nil {
		return err
	}
	// Serialize `NextAllowedUpdateTime` param:
	err = encoder.Encode(obj.NextAllowedUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `IsLocked` param:
	err = encoder.Encode(obj.IsLocked)
	if err != nil {
		return err
	}
	// Serialize `CrankPubkey` param:
	err = encoder.Encode(obj.CrankPubkey)
	if err != nil {
		return err
	}
	// Serialize `LatestConfirmedRound` param:
	err = encoder.Encode(obj.LatestConfirmedRound)
	if err != nil {
		return err
	}
	// Serialize `CurrentRound` param:
	err = encoder.Encode(obj.CurrentRound)
	if err != nil {
		return err
	}
	// Serialize `JobPubkeysData` param:
	err = encoder.Encode(obj.JobPubkeysData)
	if err != nil {
		return err
	}
	// Serialize `JobHashes` param:
	err = encoder.Encode(obj.JobHashes)
	if err != nil {
		return err
	}
	// Serialize `JobPubkeysSize` param:
	err = encoder.Encode(obj.JobPubkeysSize)
	if err != nil {
		return err
	}
	// Serialize `JobsChecksum` param:
	err = encoder.Encode(obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `HistoryBuffer` param:
	err = encoder.Encode(obj.HistoryBuffer)
	if err != nil {
		return err
	}
	// Serialize `PreviousConfirmedRoundResult` param:
	err = encoder.Encode(obj.PreviousConfirmedRoundResult)
	if err != nil {
		return err
	}
	// Serialize `PreviousConfirmedRoundSlot` param:
	err = encoder.Encode(obj.PreviousConfirmedRoundSlot)
	if err != nil {
		return err
	}
	// Serialize `DisableCrank` param:
	err = encoder.Encode(obj.DisableCrank)
	if err != nil {
		return err
	}
	// Serialize `JobWeights` param:
	err = encoder.Encode(obj.JobWeights)
	if err != nil {
		return err
	}
	// Serialize `CreationTimestamp` param:
	err = encoder.Encode(obj.CreationTimestamp)
	if err != nil {
		return err
	}
	// Serialize `ResolutionMode` param:
	err = encoder.Encode(obj.ResolutionMode)
	if err != nil {
		return err
	}
	// Serialize `BasePriorityFee` param:
	err = encoder.Encode(obj.BasePriorityFee)
	if err != nil {
		return err
	}
	// Serialize `PriorityFeeBump` param:
	err = encoder.Encode(obj.PriorityFeeBump)
	if err != nil {
		return err
	}
	// Serialize `PriorityFeeBumpPeriod` param:
	err = encoder.Encode(obj.PriorityFeeBumpPeriod)
	if err != nil {
		return err
	}
	// Serialize `MaxPriorityFeeMultiplier` param:
	err = encoder.Encode(obj.MaxPriorityFeeMultiplier)
	if err != nil {
		return err
	}
	// Serialize `ParentFunction` param:
	err = encoder.Encode(obj.ParentFunction)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregatorAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AggregatorAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[217 230 65 101 201 162 27 125]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Reserved1`:
	err = decoder.Decode(&obj.Reserved1)
	if err != nil {
		return err
	}
	// Deserialize `QueuePubkey`:
	err = decoder.Decode(&obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Deserialize `OracleRequestBatchSize`:
	err = decoder.Decode(&obj.OracleRequestBatchSize)
	if err != nil {
		return err
	}
	// Deserialize `MinOracleResults`:
	err = decoder.Decode(&obj.MinOracleResults)
	if err != nil {
		return err
	}
	// Deserialize `MinJobResults`:
	err = decoder.Decode(&obj.MinJobResults)
	if err != nil {
		return err
	}
	// Deserialize `MinUpdateDelaySeconds`:
	err = decoder.Decode(&obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Deserialize `StartAfter`:
	err = decoder.Decode(&obj.StartAfter)
	if err != nil {
		return err
	}
	// Deserialize `VarianceThreshold`:
	err = decoder.Decode(&obj.VarianceThreshold)
	if err != nil {
		return err
	}
	// Deserialize `ForceReportPeriod`:
	err = decoder.Decode(&obj.ForceReportPeriod)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveFailureCount`:
	err = decoder.Decode(&obj.ConsecutiveFailureCount)
	if err != nil {
		return err
	}
	// Deserialize `NextAllowedUpdateTime`:
	err = decoder.Decode(&obj.NextAllowedUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `IsLocked`:
	err = decoder.Decode(&obj.IsLocked)
	if err != nil {
		return err
	}
	// Deserialize `CrankPubkey`:
	err = decoder.Decode(&obj.CrankPubkey)
	if err != nil {
		return err
	}
	// Deserialize `LatestConfirmedRound`:
	err = decoder.Decode(&obj.LatestConfirmedRound)
	if err != nil {
		return err
	}
	// Deserialize `CurrentRound`:
	err = decoder.Decode(&obj.CurrentRound)
	if err != nil {
		return err
	}
	// Deserialize `JobPubkeysData`:
	err = decoder.Decode(&obj.JobPubkeysData)
	if err != nil {
		return err
	}
	// Deserialize `JobHashes`:
	err = decoder.Decode(&obj.JobHashes)
	if err != nil {
		return err
	}
	// Deserialize `JobPubkeysSize`:
	err = decoder.Decode(&obj.JobPubkeysSize)
	if err != nil {
		return err
	}
	// Deserialize `JobsChecksum`:
	err = decoder.Decode(&obj.JobsChecksum)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `HistoryBuffer`:
	err = decoder.Decode(&obj.HistoryBuffer)
	if err != nil {
		return err
	}
	// Deserialize `PreviousConfirmedRoundResult`:
	err = decoder.Decode(&obj.PreviousConfirmedRoundResult)
	if err != nil {
		return err
	}
	// Deserialize `PreviousConfirmedRoundSlot`:
	err = decoder.Decode(&obj.PreviousConfirmedRoundSlot)
	if err != nil {
		return err
	}
	// Deserialize `DisableCrank`:
	err = decoder.Decode(&obj.DisableCrank)
	if err != nil {
		return err
	}
	// Deserialize `JobWeights`:
	err = decoder.Decode(&obj.JobWeights)
	if err != nil {
		return err
	}
	// Deserialize `CreationTimestamp`:
	err = decoder.Decode(&obj.CreationTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `ResolutionMode`:
	err = decoder.Decode(&obj.ResolutionMode)
	if err != nil {
		return err
	}
	// Deserialize `BasePriorityFee`:
	err = decoder.Decode(&obj.BasePriorityFee)
	if err != nil {
		return err
	}
	// Deserialize `PriorityFeeBump`:
	err = decoder.Decode(&obj.PriorityFeeBump)
	if err != nil {
		return err
	}
	// Deserialize `PriorityFeeBumpPeriod`:
	err = decoder.Decode(&obj.PriorityFeeBumpPeriod)
	if err != nil {
		return err
	}
	// Deserialize `MaxPriorityFeeMultiplier`:
	err = decoder.Decode(&obj.MaxPriorityFeeMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `ParentFunction`:
	err = decoder.Decode(&obj.ParentFunction)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type SlidingResultAccountData struct {
	Data [16]SlidingWindowElement
	Bump uint8
	Ebuf [512]uint8
}

var SlidingResultAccountDataDiscriminator = [8]byte{91, 4, 83, 187, 102, 216, 153, 254}

func (obj SlidingResultAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SlidingResultAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SlidingResultAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SlidingResultAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[91 4 83 187 102 216 153 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type PermissionAccountData struct {
	// The authority that is allowed to set permissions for this account.
	Authority ag_solanago.PublicKey

	// The SwitchboardPermission enumeration assigned by the granter to the grantee.
	Permissions uint32

	// Public key of account that is granting permissions to use its resources.
	Granter ag_solanago.PublicKey

	// Public key of account that is being assigned permissions to use a granters resources.
	Grantee ag_solanago.PublicKey

	// unused currently. may want permission PDA per permission for
	// unique expiration periods, BUT currently only one permission
	// per account makes sense for the infra. Dont over engineer.
	Expiration int64

	// The PDA bump to derive the pubkey.
	Bump uint8

	// Reserved for future info.
	Ebuf [255]uint8
}

var PermissionAccountDataDiscriminator = [8]byte{77, 37, 177, 164, 38, 39, 34, 109}

func (obj PermissionAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PermissionAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Permissions` param:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return err
	}
	// Serialize `Granter` param:
	err = encoder.Encode(obj.Granter)
	if err != nil {
		return err
	}
	// Serialize `Grantee` param:
	err = encoder.Encode(obj.Grantee)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PermissionAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PermissionAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[77 37 177 164 38 39 34 109]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return err
	}
	// Deserialize `Granter`:
	err = decoder.Decode(&obj.Granter)
	if err != nil {
		return err
	}
	// Deserialize `Grantee`:
	err = decoder.Decode(&obj.Grantee)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type RealmSpawnRecordAccountData struct {
	Ebuf [256]uint8
}

var RealmSpawnRecordAccountDataDiscriminator = [8]byte{229, 116, 99, 2, 145, 96, 5, 95}

func (obj RealmSpawnRecordAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RealmSpawnRecordAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RealmSpawnRecordAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RealmSpawnRecordAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[229 116 99 2 145 96 5 95]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type LeaseAccountData struct {
	// Public key of the token account holding the lease contract funds until rewarded to oracles for successfully processing updates
	Escrow ag_solanago.PublicKey

	// Public key of the oracle queue that the lease contract is applicable for.
	Queue ag_solanago.PublicKey

	// Public key of the aggregator that the lease contract is applicable for
	Aggregator ag_solanago.PublicKey

	// Public key of the Solana token program ID.
	TokenProgram ag_solanago.PublicKey

	// Whether the lease contract is still active.
	IsActive bool

	// Index of an aggregators position on a crank.
	CrankRowCount uint32

	// Timestamp when the lease contract was created.
	CreatedAt int64

	// Counter keeping track of the number of updates for the given aggregator.
	UpdateCount ag_binary.Uint128

	// Public key of keypair that may withdraw funds from the lease at any time
	WithdrawAuthority ag_solanago.PublicKey

	// The PDA bump to derive the pubkey.
	Bump uint8
	Ebuf [255]uint8
}

var LeaseAccountDataDiscriminator = [8]byte{55, 254, 208, 251, 164, 44, 150, 50}

func (obj LeaseAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LeaseAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `Queue` param:
	err = encoder.Encode(obj.Queue)
	if err != nil {
		return err
	}
	// Serialize `Aggregator` param:
	err = encoder.Encode(obj.Aggregator)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `CrankRowCount` param:
	err = encoder.Encode(obj.CrankRowCount)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `UpdateCount` param:
	err = encoder.Encode(obj.UpdateCount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthority` param:
	err = encoder.Encode(obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LeaseAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LeaseAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[55 254 208 251 164 44 150 50]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `Queue`:
	err = decoder.Decode(&obj.Queue)
	if err != nil {
		return err
	}
	// Deserialize `Aggregator`:
	err = decoder.Decode(&obj.Aggregator)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `CrankRowCount`:
	err = decoder.Decode(&obj.CrankRowCount)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `UpdateCount`:
	err = decoder.Decode(&obj.UpdateCount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthority`:
	err = decoder.Decode(&obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type OracleQueueAccountData struct {
	// Name of the queue to store on-chain.
	Name [32]uint8

	// Metadata of the queue to store on-chain.
	Metadata [64]uint8

	// The account delegated as the authority for making account changes or assigning permissions targeted at the queue.
	Authority ag_solanago.PublicKey

	// Interval when stale oracles will be removed if they fail to heartbeat.
	OracleTimeout uint32

	// Rewards to provide oracles and round openers on this queue.
	Reward uint64

	// The minimum amount of stake oracles must present to remain on the queue.
	MinStake uint64

	// Whether slashing is enabled on this queue.
	SlashingEnabled bool

	// The tolerated variance amount oracle results can have from the accepted round result before being slashed.
	// slashBound = varianceToleranceMultiplier * stdDeviation Default: 2
	VarianceToleranceMultiplier SwitchboardDecimal

	// Number of update rounds new feeds are on probation for.
	// If a feed returns 429s within probation period, auto disable permissions.
	FeedProbationPeriod uint32

	// Current index of the oracle rotation.
	CurrIdx uint32

	// Current number of oracles on a queue.
	Size uint32

	// Garbage collection index.
	GcIdx uint32

	// Consecutive failure limit for a feed before feed permission is revoked.
	ConsecutiveFeedFailureLimit uint64

	// Consecutive failure limit for an oracle before oracle permission is revoked.
	ConsecutiveOracleFailureLimit uint64

	// Enabling this setting means data feeds do not need explicit permission to join the queue and request new values from its oracles.
	UnpermissionedFeedsEnabled bool

	// Enabling this setting means VRF accounts do not need explicit permission to join the queue and request new values from its oracles.
	UnpermissionedVrfEnabled bool

	// TODO: Revenue percentage rewarded to job curators overall.
	CuratorRewardCut SwitchboardDecimal

	// Prevent new leases from being funded n this queue.
	// Useful to turn down a queue for migrations, since authority is always immutable.
	LockLeaseFunding bool

	// Token mint used for the oracle queue rewards and slashing.
	Mint ag_solanago.PublicKey

	// Whether oracles are permitted to fulfill buffer relayer update request.
	EnableBufferRelayers bool
	EnableTeeOnly        bool

	// Reserved for future info.
	Ebuf [967]uint8

	// Maximum number of oracles a queue can support.
	MaxSize uint32

	// The public key of the OracleQueueBuffer account holding a collection of Oracle pubkeys that haver successfully heartbeated before the queues `oracleTimeout`.
	DataBuffer ag_solanago.PublicKey
}

var OracleQueueAccountDataDiscriminator = [8]byte{164, 207, 200, 51, 199, 113, 35, 109}

func (obj OracleQueueAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OracleQueueAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `OracleTimeout` param:
	err = encoder.Encode(obj.OracleTimeout)
	if err != nil {
		return err
	}
	// Serialize `Reward` param:
	err = encoder.Encode(obj.Reward)
	if err != nil {
		return err
	}
	// Serialize `MinStake` param:
	err = encoder.Encode(obj.MinStake)
	if err != nil {
		return err
	}
	// Serialize `SlashingEnabled` param:
	err = encoder.Encode(obj.SlashingEnabled)
	if err != nil {
		return err
	}
	// Serialize `VarianceToleranceMultiplier` param:
	err = encoder.Encode(obj.VarianceToleranceMultiplier)
	if err != nil {
		return err
	}
	// Serialize `FeedProbationPeriod` param:
	err = encoder.Encode(obj.FeedProbationPeriod)
	if err != nil {
		return err
	}
	// Serialize `CurrIdx` param:
	err = encoder.Encode(obj.CurrIdx)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	// Serialize `GcIdx` param:
	err = encoder.Encode(obj.GcIdx)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveFeedFailureLimit` param:
	err = encoder.Encode(obj.ConsecutiveFeedFailureLimit)
	if err != nil {
		return err
	}
	// Serialize `ConsecutiveOracleFailureLimit` param:
	err = encoder.Encode(obj.ConsecutiveOracleFailureLimit)
	if err != nil {
		return err
	}
	// Serialize `UnpermissionedFeedsEnabled` param:
	err = encoder.Encode(obj.UnpermissionedFeedsEnabled)
	if err != nil {
		return err
	}
	// Serialize `UnpermissionedVrfEnabled` param:
	err = encoder.Encode(obj.UnpermissionedVrfEnabled)
	if err != nil {
		return err
	}
	// Serialize `CuratorRewardCut` param:
	err = encoder.Encode(obj.CuratorRewardCut)
	if err != nil {
		return err
	}
	// Serialize `LockLeaseFunding` param:
	err = encoder.Encode(obj.LockLeaseFunding)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `EnableBufferRelayers` param:
	err = encoder.Encode(obj.EnableBufferRelayers)
	if err != nil {
		return err
	}
	// Serialize `EnableTeeOnly` param:
	err = encoder.Encode(obj.EnableTeeOnly)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	// Serialize `MaxSize` param:
	err = encoder.Encode(obj.MaxSize)
	if err != nil {
		return err
	}
	// Serialize `DataBuffer` param:
	err = encoder.Encode(obj.DataBuffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleQueueAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OracleQueueAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[164 207 200 51 199 113 35 109]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `OracleTimeout`:
	err = decoder.Decode(&obj.OracleTimeout)
	if err != nil {
		return err
	}
	// Deserialize `Reward`:
	err = decoder.Decode(&obj.Reward)
	if err != nil {
		return err
	}
	// Deserialize `MinStake`:
	err = decoder.Decode(&obj.MinStake)
	if err != nil {
		return err
	}
	// Deserialize `SlashingEnabled`:
	err = decoder.Decode(&obj.SlashingEnabled)
	if err != nil {
		return err
	}
	// Deserialize `VarianceToleranceMultiplier`:
	err = decoder.Decode(&obj.VarianceToleranceMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `FeedProbationPeriod`:
	err = decoder.Decode(&obj.FeedProbationPeriod)
	if err != nil {
		return err
	}
	// Deserialize `CurrIdx`:
	err = decoder.Decode(&obj.CurrIdx)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	// Deserialize `GcIdx`:
	err = decoder.Decode(&obj.GcIdx)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveFeedFailureLimit`:
	err = decoder.Decode(&obj.ConsecutiveFeedFailureLimit)
	if err != nil {
		return err
	}
	// Deserialize `ConsecutiveOracleFailureLimit`:
	err = decoder.Decode(&obj.ConsecutiveOracleFailureLimit)
	if err != nil {
		return err
	}
	// Deserialize `UnpermissionedFeedsEnabled`:
	err = decoder.Decode(&obj.UnpermissionedFeedsEnabled)
	if err != nil {
		return err
	}
	// Deserialize `UnpermissionedVrfEnabled`:
	err = decoder.Decode(&obj.UnpermissionedVrfEnabled)
	if err != nil {
		return err
	}
	// Deserialize `CuratorRewardCut`:
	err = decoder.Decode(&obj.CuratorRewardCut)
	if err != nil {
		return err
	}
	// Deserialize `LockLeaseFunding`:
	err = decoder.Decode(&obj.LockLeaseFunding)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `EnableBufferRelayers`:
	err = decoder.Decode(&obj.EnableBufferRelayers)
	if err != nil {
		return err
	}
	// Deserialize `EnableTeeOnly`:
	err = decoder.Decode(&obj.EnableTeeOnly)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	// Deserialize `MaxSize`:
	err = decoder.Decode(&obj.MaxSize)
	if err != nil {
		return err
	}
	// Deserialize `DataBuffer`:
	err = decoder.Decode(&obj.DataBuffer)
	if err != nil {
		return err
	}
	return nil
}

type CrankAccountData struct {
	// Name of the crank to store on-chain.
	Name [32]uint8

	// Metadata of the crank to store on-chain.
	Metadata [64]uint8

	// Public key of the oracle queue who owns the crank.
	QueuePubkey ag_solanago.PublicKey

	// Number of aggregators added to the crank.
	PqSize uint32

	// Maximum number of aggregators allowed to be added to a crank.
	MaxRows uint32

	// Pseudorandom value added to next aggregator update time.
	JitterModifier uint8

	// Reserved for future info.
	Ebuf [255]uint8

	// The public key of the CrankBuffer account holding a collection of Aggregator pubkeys and their next allowed update time.
	DataBuffer ag_solanago.PublicKey
}

var CrankAccountDataDiscriminator = [8]byte{111, 81, 146, 73, 172, 180, 134, 209}

func (obj CrankAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CrankAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `QueuePubkey` param:
	err = encoder.Encode(obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Serialize `PqSize` param:
	err = encoder.Encode(obj.PqSize)
	if err != nil {
		return err
	}
	// Serialize `MaxRows` param:
	err = encoder.Encode(obj.MaxRows)
	if err != nil {
		return err
	}
	// Serialize `JitterModifier` param:
	err = encoder.Encode(obj.JitterModifier)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	// Serialize `DataBuffer` param:
	err = encoder.Encode(obj.DataBuffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CrankAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CrankAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[111 81 146 73 172 180 134 209]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `QueuePubkey`:
	err = decoder.Decode(&obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Deserialize `PqSize`:
	err = decoder.Decode(&obj.PqSize)
	if err != nil {
		return err
	}
	// Deserialize `MaxRows`:
	err = decoder.Decode(&obj.MaxRows)
	if err != nil {
		return err
	}
	// Deserialize `JitterModifier`:
	err = decoder.Decode(&obj.JitterModifier)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	// Deserialize `DataBuffer`:
	err = decoder.Decode(&obj.DataBuffer)
	if err != nil {
		return err
	}
	return nil
}

type OracleAccountData struct {
	// Name of the oracle to store on-chain.
	Name [32]uint8

	// Metadata of the oracle to store on-chain.
	Metadata [128]uint8

	// The account delegated as the authority for making account changes or withdrawing funds from a staking wallet.
	OracleAuthority ag_solanago.PublicKey

	// Unix timestamp when the oracle last heartbeated
	LastHeartbeat int64

	// Flag dictating if an oracle is active and has heartbeated before the queue's oracle timeout parameter.
	NumInUse uint32

	// Stake account and reward/slashing wallet.
	TokenAccount ag_solanago.PublicKey

	// Public key of the oracle queue who has granted it permission to use its resources.
	QueuePubkey ag_solanago.PublicKey

	// Oracle track record.
	Metrics OracleMetrics

	// The PDA bump to derive the pubkey.
	Bump uint8

	// Reserved for future info.
	Ebuf [255]uint8
}

var OracleAccountDataDiscriminator = [8]byte{128, 30, 16, 241, 170, 73, 55, 54}

func (obj OracleAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OracleAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `OracleAuthority` param:
	err = encoder.Encode(obj.OracleAuthority)
	if err != nil {
		return err
	}
	// Serialize `LastHeartbeat` param:
	err = encoder.Encode(obj.LastHeartbeat)
	if err != nil {
		return err
	}
	// Serialize `NumInUse` param:
	err = encoder.Encode(obj.NumInUse)
	if err != nil {
		return err
	}
	// Serialize `TokenAccount` param:
	err = encoder.Encode(obj.TokenAccount)
	if err != nil {
		return err
	}
	// Serialize `QueuePubkey` param:
	err = encoder.Encode(obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Serialize `Metrics` param:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OracleAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[128 30 16 241 170 73 55 54]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `OracleAuthority`:
	err = decoder.Decode(&obj.OracleAuthority)
	if err != nil {
		return err
	}
	// Deserialize `LastHeartbeat`:
	err = decoder.Decode(&obj.LastHeartbeat)
	if err != nil {
		return err
	}
	// Deserialize `NumInUse`:
	err = decoder.Decode(&obj.NumInUse)
	if err != nil {
		return err
	}
	// Deserialize `TokenAccount`:
	err = decoder.Decode(&obj.TokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `QueuePubkey`:
	err = decoder.Decode(&obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type JobAccountData struct {
	// Name of the job to store on-chain.
	Name [32]uint8

	// Metadata of the job to store on-chain.
	Metadata [64]uint8

	// The account delegated as the authority for making account changes.
	Authority ag_solanago.PublicKey

	// Unix timestamp when the job is considered invalid
	Expiration int64

	// Hash of the serialized data to prevent tampering.
	Hash [32]uint8

	// Serialized protobuf containing the collection of task to retrieve data off-chain.
	Data []byte

	// The number of data feeds referencing the job account..
	ReferenceCount uint32

	// The token amount funded into a feed that contains this job account.
	TotalSpent uint64

	// Unix timestamp when the job was created on-chain.
	CreatedAt      int64
	IsInitializing uint8
}

var JobAccountDataDiscriminator = [8]byte{124, 69, 101, 195, 229, 218, 144, 63}

func (obj JobAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(JobAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `Hash` param:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `ReferenceCount` param:
	err = encoder.Encode(obj.ReferenceCount)
	if err != nil {
		return err
	}
	// Serialize `TotalSpent` param:
	err = encoder.Encode(obj.TotalSpent)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `IsInitializing` param:
	err = encoder.Encode(obj.IsInitializing)
	if err != nil {
		return err
	}
	return nil
}

func (obj *JobAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(JobAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[124 69 101 195 229 218 144 63]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `ReferenceCount`:
	err = decoder.Decode(&obj.ReferenceCount)
	if err != nil {
		return err
	}
	// Deserialize `TotalSpent`:
	err = decoder.Decode(&obj.TotalSpent)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `IsInitializing`:
	err = decoder.Decode(&obj.IsInitializing)
	if err != nil {
		return err
	}
	return nil
}

type VrfAccountData struct {
	// The current status of the VRF account.
	Status VrfStatus

	// Incremental counter for tracking VRF rounds.
	Counter ag_binary.Uint128

	// On-chain account delegated for making account changes.
	Authority ag_solanago.PublicKey

	// The OracleQueueAccountData that is assigned to fulfill VRF update request.
	OracleQueue ag_solanago.PublicKey

	// The token account used to hold funds for VRF update request.
	Escrow ag_solanago.PublicKey

	// The callback that is invoked when an update request is successfully verified.
	Callback CallbackZC

	// The number of oracles assigned to a VRF update request.
	BatchSize uint32

	// Struct containing the intermediate state between VRF crank actions.
	Builders [8]VrfBuilder

	// The number of builders.
	BuildersLen uint32
	TestMode    bool

	// Oracle results from the current round of update request that has not been accepted as valid yet
	CurrentRound VrfRound

	// Reserved for future info.
	Ebuf [1024]uint8
}

var VrfAccountDataDiscriminator = [8]byte{101, 35, 62, 239, 103, 151, 6, 18}

func (obj VrfAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VrfAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `OracleQueue` param:
	err = encoder.Encode(obj.OracleQueue)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `Callback` param:
	err = encoder.Encode(obj.Callback)
	if err != nil {
		return err
	}
	// Serialize `BatchSize` param:
	err = encoder.Encode(obj.BatchSize)
	if err != nil {
		return err
	}
	// Serialize `Builders` param:
	err = encoder.Encode(obj.Builders)
	if err != nil {
		return err
	}
	// Serialize `BuildersLen` param:
	err = encoder.Encode(obj.BuildersLen)
	if err != nil {
		return err
	}
	// Serialize `TestMode` param:
	err = encoder.Encode(obj.TestMode)
	if err != nil {
		return err
	}
	// Serialize `CurrentRound` param:
	err = encoder.Encode(obj.CurrentRound)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VrfAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[101 35 62 239 103 151 6 18]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `OracleQueue`:
	err = decoder.Decode(&obj.OracleQueue)
	if err != nil {
		return err
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `Callback`:
	err = decoder.Decode(&obj.Callback)
	if err != nil {
		return err
	}
	// Deserialize `BatchSize`:
	err = decoder.Decode(&obj.BatchSize)
	if err != nil {
		return err
	}
	// Deserialize `Builders`:
	err = decoder.Decode(&obj.Builders)
	if err != nil {
		return err
	}
	// Deserialize `BuildersLen`:
	err = decoder.Decode(&obj.BuildersLen)
	if err != nil {
		return err
	}
	// Deserialize `TestMode`:
	err = decoder.Decode(&obj.TestMode)
	if err != nil {
		return err
	}
	// Deserialize `CurrentRound`:
	err = decoder.Decode(&obj.CurrentRound)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type VrfLiteAccountData struct {
	// The bump used to derive the SbState account.
	StateBump uint8

	// The bump used to derive the permission account.
	PermissionBump uint8

	// The VrfPool the account belongs to.
	VrfPool ag_solanago.PublicKey

	// The current status of the VRF account.
	Status VrfStatus

	// The VRF round result. Will be zeroized if still awaiting fulfillment.
	Result [32]uint8

	// Incremental counter for tracking VRF rounds.
	Counter ag_binary.Uint128

	// The alpha bytes used to calculate the VRF proof.
	Alpha [256]uint8

	// The number of bytes in the alpha buffer.
	AlphaLen uint32

	// The Slot when the VRF round was opened.
	RequestSlot uint64

	// The unix timestamp when the VRF round was opened.
	RequestTimestamp int64

	// On-chain account delegated for making account changes.
	Authority ag_solanago.PublicKey

	// The OracleQueueAccountData that is assigned to fulfill VRF update request.
	Queue ag_solanago.PublicKey

	// The token account used to hold funds for VRF update request.
	Escrow ag_solanago.PublicKey

	// The callback that is invoked when an update request is successfully verified.
	Callback CallbackZC

	// The incremental VRF proof calculation.
	Builder    VrfBuilder
	Expiration int64
	Ebuf       [1024]uint8
}

var VrfLiteAccountDataDiscriminator = [8]byte{98, 127, 126, 124, 166, 81, 97, 100}

func (obj VrfLiteAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VrfLiteAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `PermissionBump` param:
	err = encoder.Encode(obj.PermissionBump)
	if err != nil {
		return err
	}
	// Serialize `VrfPool` param:
	err = encoder.Encode(obj.VrfPool)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	// Serialize `Alpha` param:
	err = encoder.Encode(obj.Alpha)
	if err != nil {
		return err
	}
	// Serialize `AlphaLen` param:
	err = encoder.Encode(obj.AlphaLen)
	if err != nil {
		return err
	}
	// Serialize `RequestSlot` param:
	err = encoder.Encode(obj.RequestSlot)
	if err != nil {
		return err
	}
	// Serialize `RequestTimestamp` param:
	err = encoder.Encode(obj.RequestTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Queue` param:
	err = encoder.Encode(obj.Queue)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `Callback` param:
	err = encoder.Encode(obj.Callback)
	if err != nil {
		return err
	}
	// Serialize `Builder` param:
	err = encoder.Encode(obj.Builder)
	if err != nil {
		return err
	}
	// Serialize `Expiration` param:
	err = encoder.Encode(obj.Expiration)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfLiteAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VrfLiteAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[98 127 126 124 166 81 97 100]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `PermissionBump`:
	err = decoder.Decode(&obj.PermissionBump)
	if err != nil {
		return err
	}
	// Deserialize `VrfPool`:
	err = decoder.Decode(&obj.VrfPool)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	// Deserialize `Alpha`:
	err = decoder.Decode(&obj.Alpha)
	if err != nil {
		return err
	}
	// Deserialize `AlphaLen`:
	err = decoder.Decode(&obj.AlphaLen)
	if err != nil {
		return err
	}
	// Deserialize `RequestSlot`:
	err = decoder.Decode(&obj.RequestSlot)
	if err != nil {
		return err
	}
	// Deserialize `RequestTimestamp`:
	err = decoder.Decode(&obj.RequestTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Queue`:
	err = decoder.Decode(&obj.Queue)
	if err != nil {
		return err
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `Callback`:
	err = decoder.Decode(&obj.Callback)
	if err != nil {
		return err
	}
	// Deserialize `Builder`:
	err = decoder.Decode(&obj.Builder)
	if err != nil {
		return err
	}
	// Deserialize `Expiration`:
	err = decoder.Decode(&obj.Expiration)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type VrfPoolAccountData struct {
	// ACCOUNTS
	Authority   ag_solanago.PublicKey
	Queue       ag_solanago.PublicKey
	Escrow      ag_solanago.PublicKey
	MinInterval uint32
	MaxRows     uint32
	Size        uint32
	Idx         uint32
	StateBump   uint8
	Ebuf        [135]uint8
}

var VrfPoolAccountDataDiscriminator = [8]byte{86, 67, 58, 9, 46, 21, 101, 248}

func (obj VrfPoolAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VrfPoolAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Queue` param:
	err = encoder.Encode(obj.Queue)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `MinInterval` param:
	err = encoder.Encode(obj.MinInterval)
	if err != nil {
		return err
	}
	// Serialize `MaxRows` param:
	err = encoder.Encode(obj.MaxRows)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	// Serialize `StateBump` param:
	err = encoder.Encode(obj.StateBump)
	if err != nil {
		return err
	}
	// Serialize `Ebuf` param:
	err = encoder.Encode(obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VrfPoolAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VrfPoolAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[86 67 58 9 46 21 101 248]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Queue`:
	err = decoder.Decode(&obj.Queue)
	if err != nil {
		return err
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `MinInterval`:
	err = decoder.Decode(&obj.MinInterval)
	if err != nil {
		return err
	}
	// Deserialize `MaxRows`:
	err = decoder.Decode(&obj.MaxRows)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	// Deserialize `StateBump`:
	err = decoder.Decode(&obj.StateBump)
	if err != nil {
		return err
	}
	// Deserialize `Ebuf`:
	err = decoder.Decode(&obj.Ebuf)
	if err != nil {
		return err
	}
	return nil
}

type BufferRelayerAccountData struct {
	// Name of the buffer account to store on-chain.
	Name [32]uint8

	// Public key of the OracleQueueAccountData that is currently assigned to fulfill buffer relayer update request.
	QueuePubkey ag_solanago.PublicKey

	// Token account to reward oracles for completing update request.
	Escrow ag_solanago.PublicKey

	// The account delegated as the authority for making account changes.
	Authority ag_solanago.PublicKey

	// Public key of the JobAccountData that defines how the buffer relayer is updated.
	JobPubkey ag_solanago.PublicKey

	// Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment
	JobHash [32]uint8

	// Minimum delay between update request.
	MinUpdateDelaySeconds uint32

	// Whether buffer relayer config is locked for further changes.
	IsLocked bool

	// The current buffer relayer update round that is yet to be confirmed.
	CurrentRound BufferRelayerRound

	// The latest confirmed buffer relayer update round.
	LatestConfirmedRound BufferRelayerRound

	// The buffer holding the latest confirmed result.
	Result []byte
}

var BufferRelayerAccountDataDiscriminator = [8]byte{50, 35, 51, 115, 169, 219, 158, 52}

func (obj BufferRelayerAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BufferRelayerAccountDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `QueuePubkey` param:
	err = encoder.Encode(obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `JobPubkey` param:
	err = encoder.Encode(obj.JobPubkey)
	if err != nil {
		return err
	}
	// Serialize `JobHash` param:
	err = encoder.Encode(obj.JobHash)
	if err != nil {
		return err
	}
	// Serialize `MinUpdateDelaySeconds` param:
	err = encoder.Encode(obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Serialize `IsLocked` param:
	err = encoder.Encode(obj.IsLocked)
	if err != nil {
		return err
	}
	// Serialize `CurrentRound` param:
	err = encoder.Encode(obj.CurrentRound)
	if err != nil {
		return err
	}
	// Serialize `LatestConfirmedRound` param:
	err = encoder.Encode(obj.LatestConfirmedRound)
	if err != nil {
		return err
	}
	// Serialize `Result` param:
	err = encoder.Encode(obj.Result)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferRelayerAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BufferRelayerAccountDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[50 35 51 115 169 219 158 52]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `QueuePubkey`:
	err = decoder.Decode(&obj.QueuePubkey)
	if err != nil {
		return err
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `JobPubkey`:
	err = decoder.Decode(&obj.JobPubkey)
	if err != nil {
		return err
	}
	// Deserialize `JobHash`:
	err = decoder.Decode(&obj.JobHash)
	if err != nil {
		return err
	}
	// Deserialize `MinUpdateDelaySeconds`:
	err = decoder.Decode(&obj.MinUpdateDelaySeconds)
	if err != nil {
		return err
	}
	// Deserialize `IsLocked`:
	err = decoder.Decode(&obj.IsLocked)
	if err != nil {
		return err
	}
	// Deserialize `CurrentRound`:
	err = decoder.Decode(&obj.CurrentRound)
	if err != nil {
		return err
	}
	// Deserialize `LatestConfirmedRound`:
	err = decoder.Decode(&obj.LatestConfirmedRound)
	if err != nil {
		return err
	}
	// Deserialize `Result`:
	err = decoder.Decode(&obj.Result)
	if err != nil {
		return err
	}
	return nil
}
