// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OracleInit is the `oracleInit` instruction.
type OracleInit struct {
	Params *OracleInitParams

	// [0] = [WRITE] oracle
	//
	// [1] = [] oracleAuthority
	//
	// [2] = [] wallet
	//
	// [3] = [] programState
	//
	// [4] = [] queue
	//
	// [5] = [WRITE, SIGNER] payer
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOracleInitInstructionBuilder creates a new `OracleInit` instruction builder.
func NewOracleInitInstructionBuilder() *OracleInit {
	nd := &OracleInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *OracleInit) SetParams(params OracleInitParams) *OracleInit {
	inst.Params = &params
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *OracleInit) SetOracleAccount(oracle ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *OracleInit) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAuthorityAccount sets the "oracleAuthority" account.
func (inst *OracleInit) SetOracleAuthorityAccount(oracleAuthority ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracleAuthority)
	return inst
}

// GetOracleAuthorityAccount gets the "oracleAuthority" account.
func (inst *OracleInit) GetOracleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWalletAccount sets the "wallet" account.
func (inst *OracleInit) SetWalletAccount(wallet ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(wallet)
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *OracleInit) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *OracleInit) SetProgramStateAccount(programState ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *OracleInit) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQueueAccount sets the "queue" account.
func (inst *OracleInit) SetQueueAccount(queue ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(queue)
	return inst
}

// GetQueueAccount gets the "queue" account.
func (inst *OracleInit) GetQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
func (inst *OracleInit) SetPayerAccount(payer ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *OracleInit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *OracleInit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OracleInit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *OracleInit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst OracleInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OracleInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OracleInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OracleInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OracleAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Queue is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *OracleInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OracleInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("oracleAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         wallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   programState", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          queue", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj OracleInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OracleInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewOracleInitInstruction declares a new OracleInit instruction with the provided parameters and accounts.
func NewOracleInitInstruction(
	// Parameters:
	params OracleInitParams,
	// Accounts:
	oracle ag_solanago.PublicKey,
	oracleAuthority ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	queue ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *OracleInit {
	return NewOracleInitInstructionBuilder().
		SetParams(params).
		SetOracleAccount(oracle).
		SetOracleAuthorityAccount(oracleAuthority).
		SetWalletAccount(wallet).
		SetProgramStateAccount(programState).
		SetQueueAccount(queue).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
