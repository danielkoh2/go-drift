// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// LeaseWithdraw is the `leaseWithdraw` instruction.
type LeaseWithdraw struct {
	Params *LeaseWithdrawParams

	// [0] = [WRITE] lease
	//
	// [1] = [WRITE] escrow
	//
	// [2] = [] aggregator
	//
	// [3] = [] queue
	//
	// [4] = [SIGNER] withdrawAuthority
	//
	// [5] = [WRITE] withdrawAccount
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] programState
	//
	// [8] = [] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLeaseWithdrawInstructionBuilder creates a new `LeaseWithdraw` instruction builder.
func NewLeaseWithdrawInstructionBuilder() *LeaseWithdraw {
	nd := &LeaseWithdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *LeaseWithdraw) SetParams(params LeaseWithdrawParams) *LeaseWithdraw {
	inst.Params = &params
	return inst
}

// SetLeaseAccount sets the "lease" account.
func (inst *LeaseWithdraw) SetLeaseAccount(lease ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lease).WRITE()
	return inst
}

// GetLeaseAccount gets the "lease" account.
func (inst *LeaseWithdraw) GetLeaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *LeaseWithdraw) SetEscrowAccount(escrow ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *LeaseWithdraw) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAggregatorAccount sets the "aggregator" account.
func (inst *LeaseWithdraw) SetAggregatorAccount(aggregator ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(aggregator)
	return inst
}

// GetAggregatorAccount gets the "aggregator" account.
func (inst *LeaseWithdraw) GetAggregatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQueueAccount sets the "queue" account.
func (inst *LeaseWithdraw) SetQueueAccount(queue ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(queue)
	return inst
}

// GetQueueAccount gets the "queue" account.
func (inst *LeaseWithdraw) GetQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWithdrawAuthorityAccount sets the "withdrawAuthority" account.
func (inst *LeaseWithdraw) SetWithdrawAuthorityAccount(withdrawAuthority ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(withdrawAuthority).SIGNER()
	return inst
}

// GetWithdrawAuthorityAccount gets the "withdrawAuthority" account.
func (inst *LeaseWithdraw) GetWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWithdrawAccountAccount sets the "withdrawAccount" account.
func (inst *LeaseWithdraw) SetWithdrawAccountAccount(withdrawAccount ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(withdrawAccount).WRITE()
	return inst
}

// GetWithdrawAccountAccount gets the "withdrawAccount" account.
func (inst *LeaseWithdraw) GetWithdrawAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *LeaseWithdraw) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *LeaseWithdraw) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *LeaseWithdraw) SetProgramStateAccount(programState ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *LeaseWithdraw) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintAccount sets the "mint" account.
func (inst *LeaseWithdraw) SetMintAccount(mint ag_solanago.PublicKey) *LeaseWithdraw {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *LeaseWithdraw) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst LeaseWithdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_LeaseWithdraw,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst LeaseWithdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *LeaseWithdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Lease is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Aggregator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Queue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WithdrawAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *LeaseWithdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("LeaseWithdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            lease", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           escrow", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       aggregator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            queue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("withdrawAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         withdraw", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     programState", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             mint", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj LeaseWithdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *LeaseWithdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewLeaseWithdrawInstruction declares a new LeaseWithdraw instruction with the provided parameters and accounts.
func NewLeaseWithdrawInstruction(
	// Parameters:
	params LeaseWithdrawParams,
	// Accounts:
	lease ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	aggregator ag_solanago.PublicKey,
	queue ag_solanago.PublicKey,
	withdrawAuthority ag_solanago.PublicKey,
	withdrawAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	mint ag_solanago.PublicKey) *LeaseWithdraw {
	return NewLeaseWithdrawInstructionBuilder().
		SetParams(params).
		SetLeaseAccount(lease).
		SetEscrowAccount(escrow).
		SetAggregatorAccount(aggregator).
		SetQueueAccount(queue).
		SetWithdrawAuthorityAccount(withdrawAuthority).
		SetWithdrawAccountAccount(withdrawAccount).
		SetTokenProgramAccount(tokenProgram).
		SetProgramStateAccount(programState).
		SetMintAccount(mint)
}
