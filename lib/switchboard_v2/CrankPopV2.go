// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CrankPopV2 is the `crankPopV2` instruction.
type CrankPopV2 struct {
	Params *CrankPopParamsV2

	// [0] = [WRITE] crank
	//
	// [1] = [WRITE] oracleQueue
	//
	// [2] = [] queueAuthority
	//
	// [3] = [] programState
	//
	// [4] = [WRITE] payoutWallet
	//
	// [5] = [] tokenProgram
	//
	// [6] = [WRITE] crankDataBuffer
	//
	// [7] = [] queueDataBuffer
	//
	// [8] = [] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCrankPopV2InstructionBuilder creates a new `CrankPopV2` instruction builder.
func NewCrankPopV2InstructionBuilder() *CrankPopV2 {
	nd := &CrankPopV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *CrankPopV2) SetParams(params CrankPopParamsV2) *CrankPopV2 {
	inst.Params = &params
	return inst
}

// SetCrankAccount sets the "crank" account.
func (inst *CrankPopV2) SetCrankAccount(crank ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(crank).WRITE()
	return inst
}

// GetCrankAccount gets the "crank" account.
func (inst *CrankPopV2) GetCrankAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *CrankPopV2) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracleQueue).WRITE()
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *CrankPopV2) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQueueAuthorityAccount sets the "queueAuthority" account.
func (inst *CrankPopV2) SetQueueAuthorityAccount(queueAuthority ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(queueAuthority)
	return inst
}

// GetQueueAuthorityAccount gets the "queueAuthority" account.
func (inst *CrankPopV2) GetQueueAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *CrankPopV2) SetProgramStateAccount(programState ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *CrankPopV2) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayoutWalletAccount sets the "payoutWallet" account.
func (inst *CrankPopV2) SetPayoutWalletAccount(payoutWallet ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payoutWallet).WRITE()
	return inst
}

// GetPayoutWalletAccount gets the "payoutWallet" account.
func (inst *CrankPopV2) GetPayoutWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CrankPopV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CrankPopV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCrankDataBufferAccount sets the "crankDataBuffer" account.
func (inst *CrankPopV2) SetCrankDataBufferAccount(crankDataBuffer ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(crankDataBuffer).WRITE()
	return inst
}

// GetCrankDataBufferAccount gets the "crankDataBuffer" account.
func (inst *CrankPopV2) GetCrankDataBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetQueueDataBufferAccount sets the "queueDataBuffer" account.
func (inst *CrankPopV2) SetQueueDataBufferAccount(queueDataBuffer ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(queueDataBuffer)
	return inst
}

// GetQueueDataBufferAccount gets the "queueDataBuffer" account.
func (inst *CrankPopV2) GetQueueDataBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintAccount sets the "mint" account.
func (inst *CrankPopV2) SetMintAccount(mint ag_solanago.PublicKey) *CrankPopV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *CrankPopV2) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CrankPopV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CrankPopV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CrankPopV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CrankPopV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Crank is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QueueAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PayoutWallet is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CrankDataBuffer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QueueDataBuffer is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *CrankPopV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CrankPopV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          crank", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    oracleQueue", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" queueAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   programState", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   payoutWallet", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("crankDataBuffer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("queueDataBuffer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CrankPopV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CrankPopV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCrankPopV2Instruction declares a new CrankPopV2 instruction with the provided parameters and accounts.
func NewCrankPopV2Instruction(
	// Parameters:
	params CrankPopParamsV2,
	// Accounts:
	crank ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	queueAuthority ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	payoutWallet ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	crankDataBuffer ag_solanago.PublicKey,
	queueDataBuffer ag_solanago.PublicKey,
	mint ag_solanago.PublicKey) *CrankPopV2 {
	return NewCrankPopV2InstructionBuilder().
		SetParams(params).
		SetCrankAccount(crank).
		SetOracleQueueAccount(oracleQueue).
		SetQueueAuthorityAccount(queueAuthority).
		SetProgramStateAccount(programState).
		SetPayoutWalletAccount(payoutWallet).
		SetTokenProgramAccount(tokenProgram).
		SetCrankDataBufferAccount(crankDataBuffer).
		SetQueueDataBufferAccount(queueDataBuffer).
		SetMintAccount(mint)
}
