// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfLiteProveAndVerify is the `vrfLiteProveAndVerify` instruction.
type VrfLiteProveAndVerify struct {
	Params *VrfLiteProveAndVerifyParams

	// [0] = [WRITE] vrfLite
	//
	// [1] = [] callbackPid
	//
	// [2] = [] tokenProgram
	//
	// [3] = [WRITE] escrow
	//
	// [4] = [] programState
	//
	// [5] = [] oracle
	//
	// [6] = [SIGNER] oracleAuthority
	//
	// [7] = [WRITE] oracleWallet
	//
	// [8] = [] instructionsSysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfLiteProveAndVerifyInstructionBuilder creates a new `VrfLiteProveAndVerify` instruction builder.
func NewVrfLiteProveAndVerifyInstructionBuilder() *VrfLiteProveAndVerify {
	nd := &VrfLiteProveAndVerify{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfLiteProveAndVerify) SetParams(params VrfLiteProveAndVerifyParams) *VrfLiteProveAndVerify {
	inst.Params = &params
	return inst
}

// SetVrfLiteAccount sets the "vrfLite" account.
func (inst *VrfLiteProveAndVerify) SetVrfLiteAccount(vrfLite ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vrfLite).WRITE()
	return inst
}

// GetVrfLiteAccount gets the "vrfLite" account.
func (inst *VrfLiteProveAndVerify) GetVrfLiteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCallbackPidAccount sets the "callbackPid" account.
func (inst *VrfLiteProveAndVerify) SetCallbackPidAccount(callbackPid ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(callbackPid)
	return inst
}

// GetCallbackPidAccount gets the "callbackPid" account.
func (inst *VrfLiteProveAndVerify) GetCallbackPidAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *VrfLiteProveAndVerify) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *VrfLiteProveAndVerify) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *VrfLiteProveAndVerify) SetEscrowAccount(escrow ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *VrfLiteProveAndVerify) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *VrfLiteProveAndVerify) SetProgramStateAccount(programState ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *VrfLiteProveAndVerify) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOracleAccount sets the "oracle" account.
func (inst *VrfLiteProveAndVerify) SetOracleAccount(oracle ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *VrfLiteProveAndVerify) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOracleAuthorityAccount sets the "oracleAuthority" account.
func (inst *VrfLiteProveAndVerify) SetOracleAuthorityAccount(oracleAuthority ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(oracleAuthority).SIGNER()
	return inst
}

// GetOracleAuthorityAccount gets the "oracleAuthority" account.
func (inst *VrfLiteProveAndVerify) GetOracleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOracleWalletAccount sets the "oracleWallet" account.
func (inst *VrfLiteProveAndVerify) SetOracleWalletAccount(oracleWallet ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(oracleWallet).WRITE()
	return inst
}

// GetOracleWalletAccount gets the "oracleWallet" account.
func (inst *VrfLiteProveAndVerify) GetOracleWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetInstructionsSysvarAccount sets the "instructionsSysvar" account.
func (inst *VrfLiteProveAndVerify) SetInstructionsSysvarAccount(instructionsSysvar ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(instructionsSysvar)
	return inst
}

// GetInstructionsSysvarAccount gets the "instructionsSysvar" account.
func (inst *VrfLiteProveAndVerify) GetInstructionsSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst VrfLiteProveAndVerify) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfLiteProveAndVerify,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfLiteProveAndVerify) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfLiteProveAndVerify) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VrfLite is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CallbackPid is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OracleAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OracleWallet is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.InstructionsSysvar is not set")
		}
	}
	return nil
}

func (inst *VrfLiteProveAndVerify) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfLiteProveAndVerify")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           vrfLite", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       callbackPid", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            escrow", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      programState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            oracle", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   oracleAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      oracleWallet", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("instructionsSysvar", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj VrfLiteProveAndVerify) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfLiteProveAndVerify) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfLiteProveAndVerifyInstruction declares a new VrfLiteProveAndVerify instruction with the provided parameters and accounts.
func NewVrfLiteProveAndVerifyInstruction(
	// Parameters:
	params VrfLiteProveAndVerifyParams,
	// Accounts:
	vrfLite ag_solanago.PublicKey,
	callbackPid ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	oracleAuthority ag_solanago.PublicKey,
	oracleWallet ag_solanago.PublicKey,
	instructionsSysvar ag_solanago.PublicKey) *VrfLiteProveAndVerify {
	return NewVrfLiteProveAndVerifyInstructionBuilder().
		SetParams(params).
		SetVrfLiteAccount(vrfLite).
		SetCallbackPidAccount(callbackPid).
		SetTokenProgramAccount(tokenProgram).
		SetEscrowAccount(escrow).
		SetProgramStateAccount(programState).
		SetOracleAccount(oracle).
		SetOracleAuthorityAccount(oracleAuthority).
		SetOracleWalletAccount(oracleWallet).
		SetInstructionsSysvarAccount(instructionsSysvar)
}
