// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BufferRelayerOpenRound is the `bufferRelayerOpenRound` instruction.
type BufferRelayerOpenRound struct {
	Params *BufferRelayerOpenRoundParams

	// [0] = [WRITE] bufferRelayer
	//
	// [1] = [WRITE] oracleQueue
	//
	// [2] = [WRITE] dataBuffer
	//
	// [3] = [WRITE] permission
	//
	// [4] = [WRITE] escrow
	//
	// [5] = [] programState
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBufferRelayerOpenRoundInstructionBuilder creates a new `BufferRelayerOpenRound` instruction builder.
func NewBufferRelayerOpenRoundInstructionBuilder() *BufferRelayerOpenRound {
	nd := &BufferRelayerOpenRound{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *BufferRelayerOpenRound) SetParams(params BufferRelayerOpenRoundParams) *BufferRelayerOpenRound {
	inst.Params = &params
	return inst
}

// SetBufferRelayerAccount sets the "bufferRelayer" account.
func (inst *BufferRelayerOpenRound) SetBufferRelayerAccount(bufferRelayer ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(bufferRelayer).WRITE()
	return inst
}

// GetBufferRelayerAccount gets the "bufferRelayer" account.
func (inst *BufferRelayerOpenRound) GetBufferRelayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *BufferRelayerOpenRound) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracleQueue).WRITE()
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *BufferRelayerOpenRound) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDataBufferAccount sets the "dataBuffer" account.
func (inst *BufferRelayerOpenRound) SetDataBufferAccount(dataBuffer ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(dataBuffer).WRITE()
	return inst
}

// GetDataBufferAccount gets the "dataBuffer" account.
func (inst *BufferRelayerOpenRound) GetDataBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPermissionAccount sets the "permission" account.
func (inst *BufferRelayerOpenRound) SetPermissionAccount(permission ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(permission).WRITE()
	return inst
}

// GetPermissionAccount gets the "permission" account.
func (inst *BufferRelayerOpenRound) GetPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *BufferRelayerOpenRound) SetEscrowAccount(escrow ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *BufferRelayerOpenRound) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *BufferRelayerOpenRound) SetProgramStateAccount(programState ag_solanago.PublicKey) *BufferRelayerOpenRound {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *BufferRelayerOpenRound) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst BufferRelayerOpenRound) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BufferRelayerOpenRound,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BufferRelayerOpenRound) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BufferRelayerOpenRound) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BufferRelayer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DataBuffer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Permission is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
	}
	return nil
}

func (inst *BufferRelayerOpenRound) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BufferRelayerOpenRound")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("bufferRelayer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  oracleQueue", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   dataBuffer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   permission", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       escrow", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" programState", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj BufferRelayerOpenRound) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BufferRelayerOpenRound) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewBufferRelayerOpenRoundInstruction declares a new BufferRelayerOpenRound instruction with the provided parameters and accounts.
func NewBufferRelayerOpenRoundInstruction(
	// Parameters:
	params BufferRelayerOpenRoundParams,
	// Accounts:
	bufferRelayer ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	dataBuffer ag_solanago.PublicKey,
	permission ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	programState ag_solanago.PublicKey) *BufferRelayerOpenRound {
	return NewBufferRelayerOpenRoundInstructionBuilder().
		SetParams(params).
		SetBufferRelayerAccount(bufferRelayer).
		SetOracleQueueAccount(oracleQueue).
		SetDataBufferAccount(dataBuffer).
		SetPermissionAccount(permission).
		SetEscrowAccount(escrow).
		SetProgramStateAccount(programState)
}
