// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AggregatorTeeSaveResult is the `aggregatorTeeSaveResult` instruction.
type AggregatorTeeSaveResult struct {
	Params *AggregatorTeeSaveResultParams

	// [0] = [WRITE] aggregator
	//
	// [1] = [WRITE] oracle
	//
	// [2] = [SIGNER] oracleAuthority
	//
	// [3] = [] oracleQueue
	//
	// [4] = [] queueAuthority
	//
	// [5] = [WRITE] feedPermission
	//
	// [6] = [] oraclePermission
	//
	// [7] = [WRITE] lease
	//
	// [8] = [WRITE] escrow
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] programState
	//
	// [11] = [WRITE] historyBuffer
	//
	// [12] = [] mint
	//
	// [13] = [WRITE] slider
	//
	// [14] = [SIGNER] quote
	//
	// [15] = [WRITE] rewardWallet
	//
	// [16] = [WRITE, SIGNER] payer
	//
	// [17] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAggregatorTeeSaveResultInstructionBuilder creates a new `AggregatorTeeSaveResult` instruction builder.
func NewAggregatorTeeSaveResultInstructionBuilder() *AggregatorTeeSaveResult {
	nd := &AggregatorTeeSaveResult{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *AggregatorTeeSaveResult) SetParams(params AggregatorTeeSaveResultParams) *AggregatorTeeSaveResult {
	inst.Params = &params
	return inst
}

// SetAggregatorAccount sets the "aggregator" account.
func (inst *AggregatorTeeSaveResult) SetAggregatorAccount(aggregator ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(aggregator).WRITE()
	return inst
}

// GetAggregatorAccount gets the "aggregator" account.
func (inst *AggregatorTeeSaveResult) GetAggregatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *AggregatorTeeSaveResult) SetOracleAccount(oracle ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *AggregatorTeeSaveResult) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleAuthorityAccount sets the "oracleAuthority" account.
func (inst *AggregatorTeeSaveResult) SetOracleAuthorityAccount(oracleAuthority ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracleAuthority).SIGNER()
	return inst
}

// GetOracleAuthorityAccount gets the "oracleAuthority" account.
func (inst *AggregatorTeeSaveResult) GetOracleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *AggregatorTeeSaveResult) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracleQueue)
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *AggregatorTeeSaveResult) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQueueAuthorityAccount sets the "queueAuthority" account.
func (inst *AggregatorTeeSaveResult) SetQueueAuthorityAccount(queueAuthority ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(queueAuthority)
	return inst
}

// GetQueueAuthorityAccount gets the "queueAuthority" account.
func (inst *AggregatorTeeSaveResult) GetQueueAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeedPermissionAccount sets the "feedPermission" account.
func (inst *AggregatorTeeSaveResult) SetFeedPermissionAccount(feedPermission ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feedPermission).WRITE()
	return inst
}

// GetFeedPermissionAccount gets the "feedPermission" account.
func (inst *AggregatorTeeSaveResult) GetFeedPermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOraclePermissionAccount sets the "oraclePermission" account.
func (inst *AggregatorTeeSaveResult) SetOraclePermissionAccount(oraclePermission ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(oraclePermission)
	return inst
}

// GetOraclePermissionAccount gets the "oraclePermission" account.
func (inst *AggregatorTeeSaveResult) GetOraclePermissionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetLeaseAccount sets the "lease" account.
func (inst *AggregatorTeeSaveResult) SetLeaseAccount(lease ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(lease).WRITE()
	return inst
}

// GetLeaseAccount gets the "lease" account.
func (inst *AggregatorTeeSaveResult) GetLeaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *AggregatorTeeSaveResult) SetEscrowAccount(escrow ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *AggregatorTeeSaveResult) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AggregatorTeeSaveResult) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AggregatorTeeSaveResult) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *AggregatorTeeSaveResult) SetProgramStateAccount(programState ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *AggregatorTeeSaveResult) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetHistoryBufferAccount sets the "historyBuffer" account.
func (inst *AggregatorTeeSaveResult) SetHistoryBufferAccount(historyBuffer ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(historyBuffer).WRITE()
	return inst
}

// GetHistoryBufferAccount gets the "historyBuffer" account.
func (inst *AggregatorTeeSaveResult) GetHistoryBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMintAccount sets the "mint" account.
func (inst *AggregatorTeeSaveResult) SetMintAccount(mint ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *AggregatorTeeSaveResult) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSliderAccount sets the "slider" account.
func (inst *AggregatorTeeSaveResult) SetSliderAccount(slider ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(slider).WRITE()
	return inst
}

// GetSliderAccount gets the "slider" account.
func (inst *AggregatorTeeSaveResult) GetSliderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetQuoteAccount sets the "quote" account.
func (inst *AggregatorTeeSaveResult) SetQuoteAccount(quote ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(quote).SIGNER()
	return inst
}

// GetQuoteAccount gets the "quote" account.
func (inst *AggregatorTeeSaveResult) GetQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRewardWalletAccount sets the "rewardWallet" account.
func (inst *AggregatorTeeSaveResult) SetRewardWalletAccount(rewardWallet ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rewardWallet).WRITE()
	return inst
}

// GetRewardWalletAccount gets the "rewardWallet" account.
func (inst *AggregatorTeeSaveResult) GetRewardWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetPayerAccount sets the "payer" account.
func (inst *AggregatorTeeSaveResult) SetPayerAccount(payer ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AggregatorTeeSaveResult) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AggregatorTeeSaveResult) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AggregatorTeeSaveResult) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst AggregatorTeeSaveResult) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AggregatorTeeSaveResult,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AggregatorTeeSaveResult) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AggregatorTeeSaveResult) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Aggregator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OracleAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QueueAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeedPermission is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OraclePermission is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Lease is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.HistoryBuffer is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Slider is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Quote is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.RewardWallet is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AggregatorTeeSaveResult) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AggregatorTeeSaveResult")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      aggregator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" oracleAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     oracleQueue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  queueAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  feedPermission", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("oraclePermission", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           lease", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          escrow", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    programState", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   historyBuffer", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            mint", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          slider", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           quote", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("    rewardWallet", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj AggregatorTeeSaveResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AggregatorTeeSaveResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewAggregatorTeeSaveResultInstruction declares a new AggregatorTeeSaveResult instruction with the provided parameters and accounts.
func NewAggregatorTeeSaveResultInstruction(
	// Parameters:
	params AggregatorTeeSaveResultParams,
	// Accounts:
	aggregator ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	oracleAuthority ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	queueAuthority ag_solanago.PublicKey,
	feedPermission ag_solanago.PublicKey,
	oraclePermission ag_solanago.PublicKey,
	lease ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	historyBuffer ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	slider ag_solanago.PublicKey,
	quote ag_solanago.PublicKey,
	rewardWallet ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AggregatorTeeSaveResult {
	return NewAggregatorTeeSaveResultInstructionBuilder().
		SetParams(params).
		SetAggregatorAccount(aggregator).
		SetOracleAccount(oracle).
		SetOracleAuthorityAccount(oracleAuthority).
		SetOracleQueueAccount(oracleQueue).
		SetQueueAuthorityAccount(queueAuthority).
		SetFeedPermissionAccount(feedPermission).
		SetOraclePermissionAccount(oraclePermission).
		SetLeaseAccount(lease).
		SetEscrowAccount(escrow).
		SetTokenProgramAccount(tokenProgram).
		SetProgramStateAccount(programState).
		SetHistoryBufferAccount(historyBuffer).
		SetMintAccount(mint).
		SetSliderAccount(slider).
		SetQuoteAccount(quote).
		SetRewardWalletAccount(rewardWallet).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
