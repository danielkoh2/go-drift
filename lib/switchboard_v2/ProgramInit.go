// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ProgramInit is the `programInit` instruction.
type ProgramInit struct {
	Params *ProgramInitParams

	// [0] = [WRITE] state
	//
	// [1] = [] authority
	//
	// [2] = [WRITE] tokenMint
	//
	// [3] = [WRITE] vault
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] daoMint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProgramInitInstructionBuilder creates a new `ProgramInit` instruction builder.
func NewProgramInitInstructionBuilder() *ProgramInit {
	nd := &ProgramInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *ProgramInit) SetParams(params ProgramInitParams) *ProgramInit {
	inst.Params = &params
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ProgramInit) SetStateAccount(state ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ProgramInit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ProgramInit) SetAuthorityAccount(authority ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ProgramInit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *ProgramInit) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *ProgramInit) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultAccount sets the "vault" account.
func (inst *ProgramInit) SetVaultAccount(vault ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *ProgramInit) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *ProgramInit) SetPayerAccount(payer ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ProgramInit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ProgramInit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ProgramInit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ProgramInit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ProgramInit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDaoMintAccount sets the "daoMint" account.
func (inst *ProgramInit) SetDaoMintAccount(daoMint ag_solanago.PublicKey) *ProgramInit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(daoMint)
	return inst
}

// GetDaoMintAccount gets the "daoMint" account.
func (inst *ProgramInit) GetDaoMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ProgramInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProgramInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProgramInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProgramInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.DaoMint is not set")
		}
	}
	return nil
}

func (inst *ProgramInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProgramInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      daoMint", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ProgramInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProgramInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewProgramInitInstruction declares a new ProgramInit instruction with the provided parameters and accounts.
func NewProgramInitInstruction(
	// Parameters:
	params ProgramInitParams,
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	daoMint ag_solanago.PublicKey) *ProgramInit {
	return NewProgramInitInstructionBuilder().
		SetParams(params).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetTokenMintAccount(tokenMint).
		SetVaultAccount(vault).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetDaoMintAccount(daoMint)
}
