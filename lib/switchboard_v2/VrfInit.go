// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// VrfInit is the `vrfInit` instruction.
type VrfInit struct {
	Params *VrfInitParams

	// [0] = [WRITE] vrf
	//
	// [1] = [] authority
	//
	// [2] = [] oracleQueue
	//
	// [3] = [WRITE] escrow
	//
	// [4] = [] programState
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVrfInitInstructionBuilder creates a new `VrfInit` instruction builder.
func NewVrfInitInstructionBuilder() *VrfInit {
	nd := &VrfInit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *VrfInit) SetParams(params VrfInitParams) *VrfInit {
	inst.Params = &params
	return inst
}

// SetVrfAccount sets the "vrf" account.
func (inst *VrfInit) SetVrfAccount(vrf ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vrf).WRITE()
	return inst
}

// GetVrfAccount gets the "vrf" account.
func (inst *VrfInit) GetVrfAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *VrfInit) SetAuthorityAccount(authority ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *VrfInit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleQueueAccount sets the "oracleQueue" account.
func (inst *VrfInit) SetOracleQueueAccount(oracleQueue ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracleQueue)
	return inst
}

// GetOracleQueueAccount gets the "oracleQueue" account.
func (inst *VrfInit) GetOracleQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *VrfInit) SetEscrowAccount(escrow ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *VrfInit) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramStateAccount sets the "programState" account.
func (inst *VrfInit) SetProgramStateAccount(programState ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programState)
	return inst
}

// GetProgramStateAccount gets the "programState" account.
func (inst *VrfInit) GetProgramStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *VrfInit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *VrfInit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *VrfInit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst VrfInit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_VrfInit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst VrfInit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *VrfInit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vrf is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OracleQueue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *VrfInit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("VrfInit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         vrf", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" oracleQueue", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      escrow", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("programState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj VrfInit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *VrfInit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewVrfInitInstruction declares a new VrfInit instruction with the provided parameters and accounts.
func NewVrfInitInstruction(
	// Parameters:
	params VrfInitParams,
	// Accounts:
	vrf ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	oracleQueue ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	programState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *VrfInit {
	return NewVrfInitInstructionBuilder().
		SetParams(params).
		SetVrfAccount(vrf).
		SetAuthorityAccount(authority).
		SetOracleQueueAccount(oracleQueue).
		SetEscrowAccount(escrow).
		SetProgramStateAccount(programState).
		SetTokenProgramAccount(tokenProgram)
}
