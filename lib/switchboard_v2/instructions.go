// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package switchboard_v2

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "SwitchboardV2"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_ViewVersion = ag_binary.TypeID([8]byte{213, 222, 182, 245, 222, 107, 62, 71})

	Instruction_AggregatorClose = ag_binary.TypeID([8]byte{77, 29, 85, 88, 224, 181, 157, 69})

	Instruction_SetBumps = ag_binary.TypeID([8]byte{19, 216, 193, 244, 22, 47, 180, 64})

	Instruction_AggregatorAddJob = ag_binary.TypeID([8]byte{132, 30, 35, 51, 115, 142, 186, 10})

	Instruction_AggregatorInit = ag_binary.TypeID([8]byte{200, 41, 88, 11, 36, 21, 181, 110})

	Instruction_AggregatorFunctionUpsert = ag_binary.TypeID([8]byte{141, 189, 31, 87, 146, 172, 104, 58})

	Instruction_AggregatorLock = ag_binary.TypeID([8]byte{228, 238, 67, 53, 69, 176, 185, 227})

	Instruction_AggregatorOpenRound = ag_binary.TypeID([8]byte{239, 69, 229, 179, 156, 246, 118, 191})

	Instruction_AggregatorRemoveJob = ag_binary.TypeID([8]byte{158, 221, 231, 65, 41, 151, 155, 172})

	Instruction_AggregatorSaveResult = ag_binary.TypeID([8]byte{21, 67, 5, 0, 74, 168, 51, 192})

	Instruction_AggregatorSaveResultV2 = ag_binary.TypeID([8]byte{33, 3, 188, 52, 185, 222, 0, 4})

	Instruction_AggregatorTeeSaveResult = ag_binary.TypeID([8]byte{43, 192, 193, 209, 121, 90, 186, 135})

	Instruction_AggregatorSetAuthority = ag_binary.TypeID([8]byte{140, 176, 3, 173, 23, 2, 4, 81})

	Instruction_AggregatorSetConfig = ag_binary.TypeID([8]byte{236, 77, 162, 17, 192, 67, 224, 217})

	Instruction_AggregatorSetResolutionMode = ag_binary.TypeID([8]byte{194, 248, 179, 97, 237, 24, 9, 110})

	Instruction_AggregatorSetHistoryBuffer = ag_binary.TypeID([8]byte{88, 49, 214, 242, 229, 44, 171, 52})

	Instruction_AggregatorSetQueue = ag_binary.TypeID([8]byte{111, 152, 142, 153, 206, 39, 22, 148})

	Instruction_BufferRelayerInit = ag_binary.TypeID([8]byte{127, 205, 59, 151, 4, 47, 164, 82})

	Instruction_BufferRelayerOpenRound = ag_binary.TypeID([8]byte{192, 42, 231, 189, 35, 172, 51, 9})

	Instruction_BufferRelayerSaveResult = ag_binary.TypeID([8]byte{253, 170, 164, 84, 155, 112, 1, 46})

	Instruction_CrankInit = ag_binary.TypeID([8]byte{57, 179, 94, 136, 82, 79, 25, 185})

	Instruction_CrankPop = ag_binary.TypeID([8]byte{66, 57, 216, 251, 165, 107, 128, 98})

	Instruction_CrankPopV2 = ag_binary.TypeID([8]byte{153, 122, 177, 151, 240, 86, 240, 213})

	Instruction_CrankPush = ag_binary.TypeID([8]byte{155, 175, 160, 18, 7, 147, 249, 16})

	Instruction_JobInit = ag_binary.TypeID([8]byte{101, 86, 105, 192, 34, 201, 147, 159})

	Instruction_JobSetData = ag_binary.TypeID([8]byte{225, 207, 69, 27, 161, 171, 223, 104})

	Instruction_LeaseExtend = ag_binary.TypeID([8]byte{202, 70, 141, 29, 136, 142, 230, 118})

	Instruction_LeaseInit = ag_binary.TypeID([8]byte{168, 190, 157, 252, 159, 226, 241, 89})

	Instruction_LeaseSetAuthority = ag_binary.TypeID([8]byte{255, 4, 88, 2, 213, 175, 87, 22})

	Instruction_LeaseWithdraw = ag_binary.TypeID([8]byte{186, 41, 100, 248, 234, 81, 61, 169})

	Instruction_OracleHeartbeat = ag_binary.TypeID([8]byte{10, 175, 217, 130, 111, 35, 117, 54})

	Instruction_OracleTeeHeartbeat = ag_binary.TypeID([8]byte{92, 64, 133, 138, 16, 62, 245, 251})

	Instruction_OracleInit = ag_binary.TypeID([8]byte{21, 158, 66, 65, 60, 221, 148, 61})

	Instruction_OracleQueueInit = ag_binary.TypeID([8]byte{250, 226, 231, 111, 158, 164, 27, 136})

	Instruction_OracleQueueSetConfig = ag_binary.TypeID([8]byte{239, 87, 216, 48, 119, 222, 83, 220})

	Instruction_OracleWithdraw = ag_binary.TypeID([8]byte{43, 4, 200, 132, 96, 150, 124, 48})

	Instruction_PermissionInit = ag_binary.TypeID([8]byte{177, 116, 201, 233, 16, 2, 11, 179})

	Instruction_PermissionSet = ag_binary.TypeID([8]byte{211, 122, 185, 120, 129, 182, 55, 103})

	Instruction_ProgramConfig = ag_binary.TypeID([8]byte{62, 123, 20, 150, 56, 109, 209, 145})

	Instruction_ProgramInit = ag_binary.TypeID([8]byte{199, 209, 193, 213, 138, 30, 175, 13})

	Instruction_VaultTransfer = ag_binary.TypeID([8]byte{211, 125, 3, 105, 45, 33, 227, 214})

	Instruction_VrfInit = ag_binary.TypeID([8]byte{241, 76, 92, 234, 230, 240, 164, 0})

	Instruction_VrfCloseAction = ag_binary.TypeID([8]byte{97, 172, 124, 16, 175, 10, 246, 147})

	Instruction_VrfLiteCloseAction = ag_binary.TypeID([8]byte{200, 82, 160, 32, 59, 80, 50, 137})

	Instruction_VrfLiteInit = ag_binary.TypeID([8]byte{144, 40, 147, 33, 238, 92, 88, 46})

	Instruction_VrfLiteProveAndVerify = ag_binary.TypeID([8]byte{191, 68, 209, 152, 10, 94, 165, 11})

	Instruction_VrfLiteRequestRandomness = ag_binary.TypeID([8]byte{221, 11, 167, 47, 80, 107, 18, 71})

	Instruction_VrfPoolInit = ag_binary.TypeID([8]byte{213, 10, 27, 81, 131, 152, 33, 195})

	Instruction_VrfPoolRemove = ag_binary.TypeID([8]byte{15, 73, 86, 124, 75, 183, 20, 199})

	Instruction_VrfPoolAdd = ag_binary.TypeID([8]byte{234, 143, 61, 230, 212, 57, 8, 234})

	Instruction_VrfPoolRequest = ag_binary.TypeID([8]byte{67, 49, 182, 255, 222, 161, 116, 238})

	Instruction_VrfProveAndVerify = ag_binary.TypeID([8]byte{133, 190, 186, 48, 208, 164, 205, 34})

	Instruction_VrfRequestRandomness = ag_binary.TypeID([8]byte{230, 121, 14, 164, 28, 222, 117, 118})

	Instruction_VrfSetCallback = ag_binary.TypeID([8]byte{121, 167, 168, 191, 180, 247, 251, 78})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_ViewVersion:
		return "ViewVersion"
	case Instruction_AggregatorClose:
		return "AggregatorClose"
	case Instruction_SetBumps:
		return "SetBumps"
	case Instruction_AggregatorAddJob:
		return "AggregatorAddJob"
	case Instruction_AggregatorInit:
		return "AggregatorInit"
	case Instruction_AggregatorFunctionUpsert:
		return "AggregatorFunctionUpsert"
	case Instruction_AggregatorLock:
		return "AggregatorLock"
	case Instruction_AggregatorOpenRound:
		return "AggregatorOpenRound"
	case Instruction_AggregatorRemoveJob:
		return "AggregatorRemoveJob"
	case Instruction_AggregatorSaveResult:
		return "AggregatorSaveResult"
	case Instruction_AggregatorSaveResultV2:
		return "AggregatorSaveResultV2"
	case Instruction_AggregatorTeeSaveResult:
		return "AggregatorTeeSaveResult"
	case Instruction_AggregatorSetAuthority:
		return "AggregatorSetAuthority"
	case Instruction_AggregatorSetConfig:
		return "AggregatorSetConfig"
	case Instruction_AggregatorSetResolutionMode:
		return "AggregatorSetResolutionMode"
	case Instruction_AggregatorSetHistoryBuffer:
		return "AggregatorSetHistoryBuffer"
	case Instruction_AggregatorSetQueue:
		return "AggregatorSetQueue"
	case Instruction_BufferRelayerInit:
		return "BufferRelayerInit"
	case Instruction_BufferRelayerOpenRound:
		return "BufferRelayerOpenRound"
	case Instruction_BufferRelayerSaveResult:
		return "BufferRelayerSaveResult"
	case Instruction_CrankInit:
		return "CrankInit"
	case Instruction_CrankPop:
		return "CrankPop"
	case Instruction_CrankPopV2:
		return "CrankPopV2"
	case Instruction_CrankPush:
		return "CrankPush"
	case Instruction_JobInit:
		return "JobInit"
	case Instruction_JobSetData:
		return "JobSetData"
	case Instruction_LeaseExtend:
		return "LeaseExtend"
	case Instruction_LeaseInit:
		return "LeaseInit"
	case Instruction_LeaseSetAuthority:
		return "LeaseSetAuthority"
	case Instruction_LeaseWithdraw:
		return "LeaseWithdraw"
	case Instruction_OracleHeartbeat:
		return "OracleHeartbeat"
	case Instruction_OracleTeeHeartbeat:
		return "OracleTeeHeartbeat"
	case Instruction_OracleInit:
		return "OracleInit"
	case Instruction_OracleQueueInit:
		return "OracleQueueInit"
	case Instruction_OracleQueueSetConfig:
		return "OracleQueueSetConfig"
	case Instruction_OracleWithdraw:
		return "OracleWithdraw"
	case Instruction_PermissionInit:
		return "PermissionInit"
	case Instruction_PermissionSet:
		return "PermissionSet"
	case Instruction_ProgramConfig:
		return "ProgramConfig"
	case Instruction_ProgramInit:
		return "ProgramInit"
	case Instruction_VaultTransfer:
		return "VaultTransfer"
	case Instruction_VrfInit:
		return "VrfInit"
	case Instruction_VrfCloseAction:
		return "VrfCloseAction"
	case Instruction_VrfLiteCloseAction:
		return "VrfLiteCloseAction"
	case Instruction_VrfLiteInit:
		return "VrfLiteInit"
	case Instruction_VrfLiteProveAndVerify:
		return "VrfLiteProveAndVerify"
	case Instruction_VrfLiteRequestRandomness:
		return "VrfLiteRequestRandomness"
	case Instruction_VrfPoolInit:
		return "VrfPoolInit"
	case Instruction_VrfPoolRemove:
		return "VrfPoolRemove"
	case Instruction_VrfPoolAdd:
		return "VrfPoolAdd"
	case Instruction_VrfPoolRequest:
		return "VrfPoolRequest"
	case Instruction_VrfProveAndVerify:
		return "VrfProveAndVerify"
	case Instruction_VrfRequestRandomness:
		return "VrfRequestRandomness"
	case Instruction_VrfSetCallback:
		return "VrfSetCallback"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"view_version", (*ViewVersion)(nil),
		},
		{
			"aggregator_close", (*AggregatorClose)(nil),
		},
		{
			"set_bumps", (*SetBumps)(nil),
		},
		{
			"aggregator_add_job", (*AggregatorAddJob)(nil),
		},
		{
			"aggregator_init", (*AggregatorInit)(nil),
		},
		{
			"aggregator_function_upsert", (*AggregatorFunctionUpsert)(nil),
		},
		{
			"aggregator_lock", (*AggregatorLock)(nil),
		},
		{
			"aggregator_open_round", (*AggregatorOpenRound)(nil),
		},
		{
			"aggregator_remove_job", (*AggregatorRemoveJob)(nil),
		},
		{
			"aggregator_save_result", (*AggregatorSaveResult)(nil),
		},
		{
			"aggregator_save_result_v2", (*AggregatorSaveResultV2)(nil),
		},
		{
			"aggregator_tee_save_result", (*AggregatorTeeSaveResult)(nil),
		},
		{
			"aggregator_set_authority", (*AggregatorSetAuthority)(nil),
		},
		{
			"aggregator_set_config", (*AggregatorSetConfig)(nil),
		},
		{
			"aggregator_set_resolution_mode", (*AggregatorSetResolutionMode)(nil),
		},
		{
			"aggregator_set_history_buffer", (*AggregatorSetHistoryBuffer)(nil),
		},
		{
			"aggregator_set_queue", (*AggregatorSetQueue)(nil),
		},
		{
			"buffer_relayer_init", (*BufferRelayerInit)(nil),
		},
		{
			"buffer_relayer_open_round", (*BufferRelayerOpenRound)(nil),
		},
		{
			"buffer_relayer_save_result", (*BufferRelayerSaveResult)(nil),
		},
		{
			"crank_init", (*CrankInit)(nil),
		},
		{
			"crank_pop", (*CrankPop)(nil),
		},
		{
			"crank_pop_v2", (*CrankPopV2)(nil),
		},
		{
			"crank_push", (*CrankPush)(nil),
		},
		{
			"job_init", (*JobInit)(nil),
		},
		{
			"job_set_data", (*JobSetData)(nil),
		},
		{
			"lease_extend", (*LeaseExtend)(nil),
		},
		{
			"lease_init", (*LeaseInit)(nil),
		},
		{
			"lease_set_authority", (*LeaseSetAuthority)(nil),
		},
		{
			"lease_withdraw", (*LeaseWithdraw)(nil),
		},
		{
			"oracle_heartbeat", (*OracleHeartbeat)(nil),
		},
		{
			"oracle_tee_heartbeat", (*OracleTeeHeartbeat)(nil),
		},
		{
			"oracle_init", (*OracleInit)(nil),
		},
		{
			"oracle_queue_init", (*OracleQueueInit)(nil),
		},
		{
			"oracle_queue_set_config", (*OracleQueueSetConfig)(nil),
		},
		{
			"oracle_withdraw", (*OracleWithdraw)(nil),
		},
		{
			"permission_init", (*PermissionInit)(nil),
		},
		{
			"permission_set", (*PermissionSet)(nil),
		},
		{
			"program_config", (*ProgramConfig)(nil),
		},
		{
			"program_init", (*ProgramInit)(nil),
		},
		{
			"vault_transfer", (*VaultTransfer)(nil),
		},
		{
			"vrf_init", (*VrfInit)(nil),
		},
		{
			"vrf_close_action", (*VrfCloseAction)(nil),
		},
		{
			"vrf_lite_close_action", (*VrfLiteCloseAction)(nil),
		},
		{
			"vrf_lite_init", (*VrfLiteInit)(nil),
		},
		{
			"vrf_lite_prove_and_verify", (*VrfLiteProveAndVerify)(nil),
		},
		{
			"vrf_lite_request_randomness", (*VrfLiteRequestRandomness)(nil),
		},
		{
			"vrf_pool_init", (*VrfPoolInit)(nil),
		},
		{
			"vrf_pool_remove", (*VrfPoolRemove)(nil),
		},
		{
			"vrf_pool_add", (*VrfPoolAdd)(nil),
		},
		{
			"vrf_pool_request", (*VrfPoolRequest)(nil),
		},
		{
			"vrf_prove_and_verify", (*VrfProveAndVerify)(nil),
		},
		{
			"vrf_request_randomness", (*VrfRequestRandomness)(nil),
		},
		{
			"vrf_set_callback", (*VrfSetCallback)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
